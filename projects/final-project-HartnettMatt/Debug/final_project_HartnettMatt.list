
final_project_HartnettMatt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002760  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000290  08002820  08002820  00003820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ab0  08002ab0  00004060  2**0
                  CONTENTS
  4 .ARM          00000000  08002ab0  08002ab0  00004060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ab0  08002ab0  00004060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ab0  08002ab0  00003ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002ab4  08002ab4  00003ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08002ab8  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000128c  20000060  08002b18  00004060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200012ec  08002b18  000042ec  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00004060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000031f9  00000000  00000000  00004088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000ea7  00000000  00000000  00007281  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000300  00000000  00000000  00008128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000218  00000000  00000000  00008428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014fb6  00000000  00000000  00008640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000412b  00000000  00000000  0001d5f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00069979  00000000  00000000  00021721  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0008b09a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000117c  00000000  00000000  0008b0e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000af  00000000  00000000  0008c25c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000060 	.word	0x20000060
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002808 	.word	0x08002808

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000064 	.word	0x20000064
 8000104:	08002808 	.word	0x08002808

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	@ 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	@ 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			@ (mov r8, r8)

08000408 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af00      	add	r7, sp, #0
 800040e:	0002      	movs	r2, r0
 8000410:	1dfb      	adds	r3, r7, #7
 8000412:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000414:	1dfb      	adds	r3, r7, #7
 8000416:	781b      	ldrb	r3, [r3, #0]
 8000418:	2b7f      	cmp	r3, #127	@ 0x7f
 800041a:	d809      	bhi.n	8000430 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800041c:	1dfb      	adds	r3, r7, #7
 800041e:	781b      	ldrb	r3, [r3, #0]
 8000420:	001a      	movs	r2, r3
 8000422:	231f      	movs	r3, #31
 8000424:	401a      	ands	r2, r3
 8000426:	4b04      	ldr	r3, [pc, #16]	@ (8000438 <__NVIC_EnableIRQ+0x30>)
 8000428:	2101      	movs	r1, #1
 800042a:	4091      	lsls	r1, r2
 800042c:	000a      	movs	r2, r1
 800042e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000430:	46c0      	nop			@ (mov r8, r8)
 8000432:	46bd      	mov	sp, r7
 8000434:	b002      	add	sp, #8
 8000436:	bd80      	pop	{r7, pc}
 8000438:	e000e100 	.word	0xe000e100

0800043c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0
 8000442:	0002      	movs	r2, r0
 8000444:	1dfb      	adds	r3, r7, #7
 8000446:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000448:	1dfb      	adds	r3, r7, #7
 800044a:	781b      	ldrb	r3, [r3, #0]
 800044c:	2b7f      	cmp	r3, #127	@ 0x7f
 800044e:	d80a      	bhi.n	8000466 <__NVIC_ClearPendingIRQ+0x2a>
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000450:	1dfb      	adds	r3, r7, #7
 8000452:	781b      	ldrb	r3, [r3, #0]
 8000454:	001a      	movs	r2, r3
 8000456:	231f      	movs	r3, #31
 8000458:	4013      	ands	r3, r2
 800045a:	4905      	ldr	r1, [pc, #20]	@ (8000470 <__NVIC_ClearPendingIRQ+0x34>)
 800045c:	2201      	movs	r2, #1
 800045e:	409a      	lsls	r2, r3
 8000460:	23c0      	movs	r3, #192	@ 0xc0
 8000462:	005b      	lsls	r3, r3, #1
 8000464:	50ca      	str	r2, [r1, r3]
  }
}
 8000466:	46c0      	nop			@ (mov r8, r8)
 8000468:	46bd      	mov	sp, r7
 800046a:	b002      	add	sp, #8
 800046c:	bd80      	pop	{r7, pc}
 800046e:	46c0      	nop			@ (mov r8, r8)
 8000470:	e000e100 	.word	0xe000e100

08000474 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000474:	b590      	push	{r4, r7, lr}
 8000476:	b083      	sub	sp, #12
 8000478:	af00      	add	r7, sp, #0
 800047a:	0002      	movs	r2, r0
 800047c:	6039      	str	r1, [r7, #0]
 800047e:	1dfb      	adds	r3, r7, #7
 8000480:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000482:	1dfb      	adds	r3, r7, #7
 8000484:	781b      	ldrb	r3, [r3, #0]
 8000486:	2b7f      	cmp	r3, #127	@ 0x7f
 8000488:	d828      	bhi.n	80004dc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800048a:	4a2f      	ldr	r2, [pc, #188]	@ (8000548 <__NVIC_SetPriority+0xd4>)
 800048c:	1dfb      	adds	r3, r7, #7
 800048e:	781b      	ldrb	r3, [r3, #0]
 8000490:	b25b      	sxtb	r3, r3
 8000492:	089b      	lsrs	r3, r3, #2
 8000494:	33c0      	adds	r3, #192	@ 0xc0
 8000496:	009b      	lsls	r3, r3, #2
 8000498:	589b      	ldr	r3, [r3, r2]
 800049a:	1dfa      	adds	r2, r7, #7
 800049c:	7812      	ldrb	r2, [r2, #0]
 800049e:	0011      	movs	r1, r2
 80004a0:	2203      	movs	r2, #3
 80004a2:	400a      	ands	r2, r1
 80004a4:	00d2      	lsls	r2, r2, #3
 80004a6:	21ff      	movs	r1, #255	@ 0xff
 80004a8:	4091      	lsls	r1, r2
 80004aa:	000a      	movs	r2, r1
 80004ac:	43d2      	mvns	r2, r2
 80004ae:	401a      	ands	r2, r3
 80004b0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80004b2:	683b      	ldr	r3, [r7, #0]
 80004b4:	019b      	lsls	r3, r3, #6
 80004b6:	22ff      	movs	r2, #255	@ 0xff
 80004b8:	401a      	ands	r2, r3
 80004ba:	1dfb      	adds	r3, r7, #7
 80004bc:	781b      	ldrb	r3, [r3, #0]
 80004be:	0018      	movs	r0, r3
 80004c0:	2303      	movs	r3, #3
 80004c2:	4003      	ands	r3, r0
 80004c4:	00db      	lsls	r3, r3, #3
 80004c6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004c8:	481f      	ldr	r0, [pc, #124]	@ (8000548 <__NVIC_SetPriority+0xd4>)
 80004ca:	1dfb      	adds	r3, r7, #7
 80004cc:	781b      	ldrb	r3, [r3, #0]
 80004ce:	b25b      	sxtb	r3, r3
 80004d0:	089b      	lsrs	r3, r3, #2
 80004d2:	430a      	orrs	r2, r1
 80004d4:	33c0      	adds	r3, #192	@ 0xc0
 80004d6:	009b      	lsls	r3, r3, #2
 80004d8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80004da:	e031      	b.n	8000540 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004dc:	4a1b      	ldr	r2, [pc, #108]	@ (800054c <__NVIC_SetPriority+0xd8>)
 80004de:	1dfb      	adds	r3, r7, #7
 80004e0:	781b      	ldrb	r3, [r3, #0]
 80004e2:	0019      	movs	r1, r3
 80004e4:	230f      	movs	r3, #15
 80004e6:	400b      	ands	r3, r1
 80004e8:	3b08      	subs	r3, #8
 80004ea:	089b      	lsrs	r3, r3, #2
 80004ec:	3306      	adds	r3, #6
 80004ee:	009b      	lsls	r3, r3, #2
 80004f0:	18d3      	adds	r3, r2, r3
 80004f2:	3304      	adds	r3, #4
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	1dfa      	adds	r2, r7, #7
 80004f8:	7812      	ldrb	r2, [r2, #0]
 80004fa:	0011      	movs	r1, r2
 80004fc:	2203      	movs	r2, #3
 80004fe:	400a      	ands	r2, r1
 8000500:	00d2      	lsls	r2, r2, #3
 8000502:	21ff      	movs	r1, #255	@ 0xff
 8000504:	4091      	lsls	r1, r2
 8000506:	000a      	movs	r2, r1
 8000508:	43d2      	mvns	r2, r2
 800050a:	401a      	ands	r2, r3
 800050c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800050e:	683b      	ldr	r3, [r7, #0]
 8000510:	019b      	lsls	r3, r3, #6
 8000512:	22ff      	movs	r2, #255	@ 0xff
 8000514:	401a      	ands	r2, r3
 8000516:	1dfb      	adds	r3, r7, #7
 8000518:	781b      	ldrb	r3, [r3, #0]
 800051a:	0018      	movs	r0, r3
 800051c:	2303      	movs	r3, #3
 800051e:	4003      	ands	r3, r0
 8000520:	00db      	lsls	r3, r3, #3
 8000522:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000524:	4809      	ldr	r0, [pc, #36]	@ (800054c <__NVIC_SetPriority+0xd8>)
 8000526:	1dfb      	adds	r3, r7, #7
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	001c      	movs	r4, r3
 800052c:	230f      	movs	r3, #15
 800052e:	4023      	ands	r3, r4
 8000530:	3b08      	subs	r3, #8
 8000532:	089b      	lsrs	r3, r3, #2
 8000534:	430a      	orrs	r2, r1
 8000536:	3306      	adds	r3, #6
 8000538:	009b      	lsls	r3, r3, #2
 800053a:	18c3      	adds	r3, r0, r3
 800053c:	3304      	adds	r3, #4
 800053e:	601a      	str	r2, [r3, #0]
}
 8000540:	46c0      	nop			@ (mov r8, r8)
 8000542:	46bd      	mov	sp, r7
 8000544:	b003      	add	sp, #12
 8000546:	bd90      	pop	{r4, r7, pc}
 8000548:	e000e100 	.word	0xe000e100
 800054c:	e000ed00 	.word	0xe000ed00

08000550 <set_blk_size>:
#include "utilities.h"
#include <stm32f091xc.h>

int blk_size;

void set_blk_size(int block_size) {
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
    blk_size = block_size;
 8000558:	4b03      	ldr	r3, [pc, #12]	@ (8000568 <set_blk_size+0x18>)
 800055a:	687a      	ldr	r2, [r7, #4]
 800055c:	601a      	str	r2, [r3, #0]
}
 800055e:	46c0      	nop			@ (mov r8, r8)
 8000560:	46bd      	mov	sp, r7
 8000562:	b002      	add	sp, #8
 8000564:	bd80      	pop	{r7, pc}
 8000566:	46c0      	nop			@ (mov r8, r8)
 8000568:	2000007c 	.word	0x2000007c

0800056c <dac_init>:

// This init function was taken from Alex Dean's github: https://github.com/alexander-g-dean/ESF/blob/master/ST/Code/common-driver/dac.c
void dac_init(void) {
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
    // Enable clocks for DAC and PA4
    RCC->APB1ENR |= RCC_APB1ENR_DACEN;
 8000570:	4b0e      	ldr	r3, [pc, #56]	@ (80005ac <dac_init+0x40>)
 8000572:	69da      	ldr	r2, [r3, #28]
 8000574:	4b0d      	ldr	r3, [pc, #52]	@ (80005ac <dac_init+0x40>)
 8000576:	2180      	movs	r1, #128	@ 0x80
 8000578:	0589      	lsls	r1, r1, #22
 800057a:	430a      	orrs	r2, r1
 800057c:	61da      	str	r2, [r3, #28]
    RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 800057e:	4b0b      	ldr	r3, [pc, #44]	@ (80005ac <dac_init+0x40>)
 8000580:	695a      	ldr	r2, [r3, #20]
 8000582:	4b0a      	ldr	r3, [pc, #40]	@ (80005ac <dac_init+0x40>)
 8000584:	2180      	movs	r1, #128	@ 0x80
 8000586:	0289      	lsls	r1, r1, #10
 8000588:	430a      	orrs	r2, r1
 800058a:	615a      	str	r2, [r3, #20]

    // Init PA4 as analog by setting both MODER bits
    MODIFY_FIELD(GPIOA->MODER, GPIO_MODER_MODER4, ESF_GPIO_MODER_ANALOG);
 800058c:	2390      	movs	r3, #144	@ 0x90
 800058e:	05db      	lsls	r3, r3, #23
 8000590:	681a      	ldr	r2, [r3, #0]
 8000592:	2390      	movs	r3, #144	@ 0x90
 8000594:	05db      	lsls	r3, r3, #23
 8000596:	21c0      	movs	r1, #192	@ 0xc0
 8000598:	0089      	lsls	r1, r1, #2
 800059a:	430a      	orrs	r2, r1
 800059c:	601a      	str	r2, [r3, #0]

    // Init DAC1, connecting it to PA4
    DAC1->CR = DAC_CR_EN1;
 800059e:	4b04      	ldr	r3, [pc, #16]	@ (80005b0 <dac_init+0x44>)
 80005a0:	2201      	movs	r2, #1
 80005a2:	601a      	str	r2, [r3, #0]
}
 80005a4:	46c0      	nop			@ (mov r8, r8)
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	46c0      	nop			@ (mov r8, r8)
 80005ac:	40021000 	.word	0x40021000
 80005b0:	40007400 	.word	0x40007400

080005b4 <tim6_init>:
 * Initializes TIM6 for periodic DMA requests.
 *
 * This function enables the TIM6 clock, sets the auto-reload value (ARR)
 * and prescaler (PSC) for the desired DAC frequency.
 */
void tim6_init(void) {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_TIM6EN;
 80005b8:	4b0c      	ldr	r3, [pc, #48]	@ (80005ec <tim6_init+0x38>)
 80005ba:	69da      	ldr	r2, [r3, #28]
 80005bc:	4b0b      	ldr	r3, [pc, #44]	@ (80005ec <tim6_init+0x38>)
 80005be:	2110      	movs	r1, #16
 80005c0:	430a      	orrs	r2, r1
 80005c2:	61da      	str	r2, [r3, #28]
    TIM6->ARR = 1;
 80005c4:	4b0a      	ldr	r3, [pc, #40]	@ (80005f0 <tim6_init+0x3c>)
 80005c6:	2201      	movs	r2, #1
 80005c8:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM6->PSC = TIM6_PRESCALER - 1;
 80005ca:	4b09      	ldr	r3, [pc, #36]	@ (80005f0 <tim6_init+0x3c>)
 80005cc:	22f4      	movs	r2, #244	@ 0xf4
 80005ce:	32ff      	adds	r2, #255	@ 0xff
 80005d0:	629a      	str	r2, [r3, #40]	@ 0x28
    // Enable DMA request
    TIM6->DIER = TIM_DIER_UDE;
 80005d2:	4b07      	ldr	r3, [pc, #28]	@ (80005f0 <tim6_init+0x3c>)
 80005d4:	2280      	movs	r2, #128	@ 0x80
 80005d6:	0052      	lsls	r2, r2, #1
 80005d8:	60da      	str	r2, [r3, #12]
    // Enable counting
    TIM6->CR1 |= TIM_CR1_CEN;
 80005da:	4b05      	ldr	r3, [pc, #20]	@ (80005f0 <tim6_init+0x3c>)
 80005dc:	681a      	ldr	r2, [r3, #0]
 80005de:	4b04      	ldr	r3, [pc, #16]	@ (80005f0 <tim6_init+0x3c>)
 80005e0:	2101      	movs	r1, #1
 80005e2:	430a      	orrs	r2, r1
 80005e4:	601a      	str	r2, [r3, #0]
}
 80005e6:	46c0      	nop			@ (mov r8, r8)
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	40021000 	.word	0x40021000
 80005f0:	40001000 	.word	0x40001000

080005f4 <analog_out_init>:
        DMA2_Channel3->CNDTR = blk_size; // Reset to whatever block size is required
    }
    DMA2->IFCR |= 1; // Clear flag
}

void analog_out_init(int16_t *buffer, uint16_t buffer_size) {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
 80005fc:	000a      	movs	r2, r1
 80005fe:	1cbb      	adds	r3, r7, #2
 8000600:	801a      	strh	r2, [r3, #0]
    // Enable clocks for DAC, TIMER6, and DMA
    RCC->APB1ENR |= RCC_APB1ENR_DACEN | RCC_APB1ENR_TIM6EN;
 8000602:	4b2a      	ldr	r3, [pc, #168]	@ (80006ac <analog_out_init+0xb8>)
 8000604:	69da      	ldr	r2, [r3, #28]
 8000606:	4b29      	ldr	r3, [pc, #164]	@ (80006ac <analog_out_init+0xb8>)
 8000608:	4929      	ldr	r1, [pc, #164]	@ (80006b0 <analog_out_init+0xbc>)
 800060a:	430a      	orrs	r2, r1
 800060c:	61da      	str	r2, [r3, #28]
    RCC->AHBENR |= RCC_AHBENR_DMA1EN;
 800060e:	4b27      	ldr	r3, [pc, #156]	@ (80006ac <analog_out_init+0xb8>)
 8000610:	695a      	ldr	r2, [r3, #20]
 8000612:	4b26      	ldr	r3, [pc, #152]	@ (80006ac <analog_out_init+0xb8>)
 8000614:	2101      	movs	r1, #1
 8000616:	430a      	orrs	r2, r1
 8000618:	615a      	str	r2, [r3, #20]

    // Configure DAC
    dac_init();
 800061a:	f7ff ffa7 	bl	800056c <dac_init>

    // Configure timer
    tim6_init();
 800061e:	f7ff ffc9 	bl	80005b4 <tim6_init>

    // Configure DMA for DAC
    // Enable DMA2 clock
    RCC->AHBENR |= RCC_AHBENR_DMA2EN;
 8000622:	4b22      	ldr	r3, [pc, #136]	@ (80006ac <analog_out_init+0xb8>)
 8000624:	695a      	ldr	r2, [r3, #20]
 8000626:	4b21      	ldr	r3, [pc, #132]	@ (80006ac <analog_out_init+0xb8>)
 8000628:	2102      	movs	r1, #2
 800062a:	430a      	orrs	r2, r1
 800062c:	615a      	str	r2, [r3, #20]
    DMA2_Channel3->CCR = DMA_CCR_MINC | DMA_CCR_DIR | DMA_CCR_CIRC;
 800062e:	4b21      	ldr	r3, [pc, #132]	@ (80006b4 <analog_out_init+0xc0>)
 8000630:	22b0      	movs	r2, #176	@ 0xb0
 8000632:	601a      	str	r2, [r3, #0]
    MODIFY_FIELD(DMA2_Channel3->CCR, DMA_CCR_MSIZE, 1);
 8000634:	4b1f      	ldr	r3, [pc, #124]	@ (80006b4 <analog_out_init+0xc0>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a1f      	ldr	r2, [pc, #124]	@ (80006b8 <analog_out_init+0xc4>)
 800063a:	401a      	ands	r2, r3
 800063c:	4b1d      	ldr	r3, [pc, #116]	@ (80006b4 <analog_out_init+0xc0>)
 800063e:	2180      	movs	r1, #128	@ 0x80
 8000640:	00c9      	lsls	r1, r1, #3
 8000642:	430a      	orrs	r2, r1
 8000644:	601a      	str	r2, [r3, #0]
    MODIFY_FIELD(DMA2_Channel3->CCR, DMA_CCR_PSIZE, 1);
 8000646:	4b1b      	ldr	r3, [pc, #108]	@ (80006b4 <analog_out_init+0xc0>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	4a1c      	ldr	r2, [pc, #112]	@ (80006bc <analog_out_init+0xc8>)
 800064c:	401a      	ands	r2, r3
 800064e:	4b19      	ldr	r3, [pc, #100]	@ (80006b4 <analog_out_init+0xc0>)
 8000650:	2180      	movs	r1, #128	@ 0x80
 8000652:	0049      	lsls	r1, r1, #1
 8000654:	430a      	orrs	r2, r1
 8000656:	601a      	str	r2, [r3, #0]
    MODIFY_FIELD(DMA2_Channel3->CCR, DMA_CCR_PL, 3);
 8000658:	4b16      	ldr	r3, [pc, #88]	@ (80006b4 <analog_out_init+0xc0>)
 800065a:	681a      	ldr	r2, [r3, #0]
 800065c:	4b15      	ldr	r3, [pc, #84]	@ (80006b4 <analog_out_init+0xc0>)
 800065e:	21c0      	movs	r1, #192	@ 0xc0
 8000660:	0189      	lsls	r1, r1, #6
 8000662:	430a      	orrs	r2, r1
 8000664:	601a      	str	r2, [r3, #0]

    // Configure DMA IRQ
    NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch3_5_IRQn, 3);
 8000666:	2103      	movs	r1, #3
 8000668:	200b      	movs	r0, #11
 800066a:	f7ff ff03 	bl	8000474 <__NVIC_SetPriority>
    NVIC_ClearPendingIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);
 800066e:	200b      	movs	r0, #11
 8000670:	f7ff fee4 	bl	800043c <__NVIC_ClearPendingIRQ>
    NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);
 8000674:	200b      	movs	r0, #11
 8000676:	f7ff fec7 	bl	8000408 <__NVIC_EnableIRQ>

    MODIFY_FIELD(DMA2->CSELR, DMA_CSELR_C3S, 1);
 800067a:	4a11      	ldr	r2, [pc, #68]	@ (80006c0 <analog_out_init+0xcc>)
 800067c:	23a8      	movs	r3, #168	@ 0xa8
 800067e:	58d3      	ldr	r3, [r2, r3]
 8000680:	4a10      	ldr	r2, [pc, #64]	@ (80006c4 <analog_out_init+0xd0>)
 8000682:	4013      	ands	r3, r2
 8000684:	490e      	ldr	r1, [pc, #56]	@ (80006c0 <analog_out_init+0xcc>)
 8000686:	2280      	movs	r2, #128	@ 0x80
 8000688:	0052      	lsls	r2, r2, #1
 800068a:	4313      	orrs	r3, r2
 800068c:	22a8      	movs	r2, #168	@ 0xa8
 800068e:	508b      	str	r3, [r1, r2]
    DMA2_Channel3->CNDTR = buffer_size;            // Number of data items to transfer
 8000690:	4b08      	ldr	r3, [pc, #32]	@ (80006b4 <analog_out_init+0xc0>)
 8000692:	1cba      	adds	r2, r7, #2
 8000694:	8812      	ldrh	r2, [r2, #0]
 8000696:	605a      	str	r2, [r3, #4]
    DMA2_Channel3->CMAR = (uint32_t)buffer;        // Memory address
 8000698:	4b06      	ldr	r3, [pc, #24]	@ (80006b4 <analog_out_init+0xc0>)
 800069a:	687a      	ldr	r2, [r7, #4]
 800069c:	60da      	str	r2, [r3, #12]
    DMA2_Channel3->CPAR = (uint32_t)&DAC->DHR12R1; // DAC data register
 800069e:	4b05      	ldr	r3, [pc, #20]	@ (80006b4 <analog_out_init+0xc0>)
 80006a0:	4a09      	ldr	r2, [pc, #36]	@ (80006c8 <analog_out_init+0xd4>)
 80006a2:	609a      	str	r2, [r3, #8]
}
 80006a4:	46c0      	nop			@ (mov r8, r8)
 80006a6:	46bd      	mov	sp, r7
 80006a8:	b002      	add	sp, #8
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	40021000 	.word	0x40021000
 80006b0:	20000010 	.word	0x20000010
 80006b4:	40020430 	.word	0x40020430
 80006b8:	fffff3ff 	.word	0xfffff3ff
 80006bc:	fffffcff 	.word	0xfffffcff
 80006c0:	40020400 	.word	0x40020400
 80006c4:	fffff0ff 	.word	0xfffff0ff
 80006c8:	40007408 	.word	0x40007408

080006cc <tone_to_samples>:
    // Disable DMA and Timer
    DMA1_Channel1->CCR &= ~DMA_CCR_EN;
    TIM6->CR1 &= ~TIM_CR1_CEN;
}

int tone_to_samples(uint32_t frequency, uint32_t step_size, uint32_t block_size, int16_t *buffer, uint32_t buffer_size) {
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b088      	sub	sp, #32
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	60f8      	str	r0, [r7, #12]
 80006d4:	60b9      	str	r1, [r7, #8]
 80006d6:	607a      	str	r2, [r7, #4]
 80006d8:	603b      	str	r3, [r7, #0]

    if (block_size > buffer_size) {
 80006da:	687a      	ldr	r2, [r7, #4]
 80006dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80006de:	429a      	cmp	r2, r3
 80006e0:	d902      	bls.n	80006e8 <tone_to_samples+0x1c>
        return -1; // Buffer too small
 80006e2:	2301      	movs	r3, #1
 80006e4:	425b      	negs	r3, r3
 80006e6:	e01c      	b.n	8000722 <tone_to_samples+0x56>
    }

    int32_t current_phase = 0;
 80006e8:	2300      	movs	r3, #0
 80006ea:	61fb      	str	r3, [r7, #28]

    for (int32_t i = 0; i < block_size; ++i) {
 80006ec:	2300      	movs	r3, #0
 80006ee:	61bb      	str	r3, [r7, #24]
 80006f0:	e012      	b.n	8000718 <tone_to_samples+0x4c>
//        int32_t raw_sample = fp_sin(current_phase);
        int32_t raw_sample = 1;
 80006f2:	2301      	movs	r3, #1
 80006f4:	617b      	str	r3, [r7, #20]
        buffer[i] = (int16_t)(raw_sample + 1);
 80006f6:	697b      	ldr	r3, [r7, #20]
 80006f8:	b29b      	uxth	r3, r3
 80006fa:	3301      	adds	r3, #1
 80006fc:	b299      	uxth	r1, r3
 80006fe:	69bb      	ldr	r3, [r7, #24]
 8000700:	005b      	lsls	r3, r3, #1
 8000702:	683a      	ldr	r2, [r7, #0]
 8000704:	18d3      	adds	r3, r2, r3
 8000706:	b20a      	sxth	r2, r1
 8000708:	801a      	strh	r2, [r3, #0]
        current_phase = (current_phase + step_size);
 800070a:	69fa      	ldr	r2, [r7, #28]
 800070c:	68bb      	ldr	r3, [r7, #8]
 800070e:	18d3      	adds	r3, r2, r3
 8000710:	61fb      	str	r3, [r7, #28]
    for (int32_t i = 0; i < block_size; ++i) {
 8000712:	69bb      	ldr	r3, [r7, #24]
 8000714:	3301      	adds	r3, #1
 8000716:	61bb      	str	r3, [r7, #24]
 8000718:	69bb      	ldr	r3, [r7, #24]
 800071a:	687a      	ldr	r2, [r7, #4]
 800071c:	429a      	cmp	r2, r3
 800071e:	d8e8      	bhi.n	80006f2 <tone_to_samples+0x26>
    }

    return 0;
 8000720:	2300      	movs	r3, #0
 8000722:	0018      	movs	r0, r3
 8000724:	46bd      	mov	sp, r7
 8000726:	b008      	add	sp, #32
 8000728:	bd80      	pop	{r7, pc}

0800072a <cbfifo_enqueue>:
#include "cbfifo.h"
#include <stddef.h>
#include <stdio.h>


size_t cbfifo_enqueue(cbfifo *cb, void *buf, size_t nbyte) {
 800072a:	b580      	push	{r7, lr}
 800072c:	b088      	sub	sp, #32
 800072e:	af00      	add	r7, sp, #0
 8000730:	60f8      	str	r0, [r7, #12]
 8000732:	60b9      	str	r1, [r7, #8]
 8000734:	607a      	str	r2, [r7, #4]
    // Error conditions
    if (buf == NULL || cb->is_full) {
 8000736:	68bb      	ldr	r3, [r7, #8]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d004      	beq.n	8000746 <cbfifo_enqueue+0x1c>
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	2284      	movs	r2, #132	@ 0x84
 8000740:	589b      	ldr	r3, [r3, r2]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d002      	beq.n	800074c <cbfifo_enqueue+0x22>
        return (size_t)-1;
 8000746:	2301      	movs	r3, #1
 8000748:	425b      	negs	r3, r3
 800074a:	e03d      	b.n	80007c8 <cbfifo_enqueue+0x9e>
    }

    size_t available_space = BUFFER_SIZE - cbfifo_length(cb);
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	0018      	movs	r0, r3
 8000750:	f000 f886 	bl	8000860 <cbfifo_length>
 8000754:	0003      	movs	r3, r0
 8000756:	2280      	movs	r2, #128	@ 0x80
 8000758:	1ad3      	subs	r3, r2, r3
 800075a:	617b      	str	r3, [r7, #20]
    size_t to_enqueue = nbyte;
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	61fb      	str	r3, [r7, #28]

    // Cap the enqueue length to the max available space
    if (to_enqueue > available_space) {
 8000760:	69fa      	ldr	r2, [r7, #28]
 8000762:	697b      	ldr	r3, [r7, #20]
 8000764:	429a      	cmp	r2, r3
 8000766:	d901      	bls.n	800076c <cbfifo_enqueue+0x42>
        to_enqueue = available_space;
 8000768:	697b      	ldr	r3, [r7, #20]
 800076a:	61fb      	str	r3, [r7, #28]
    }

    // Loop through the buffer and add to FIFO at the head ptr
    for (size_t i = 0; i < to_enqueue; i++) {
 800076c:	2300      	movs	r3, #0
 800076e:	61bb      	str	r3, [r7, #24]
 8000770:	e016      	b.n	80007a0 <cbfifo_enqueue+0x76>
        cb->fifo[cb->write] = ((uint8_t *)buf)[i];
 8000772:	68ba      	ldr	r2, [r7, #8]
 8000774:	69bb      	ldr	r3, [r7, #24]
 8000776:	18d3      	adds	r3, r2, r3
 8000778:	68fa      	ldr	r2, [r7, #12]
 800077a:	2180      	movs	r1, #128	@ 0x80
 800077c:	5c52      	ldrb	r2, [r2, r1]
 800077e:	7819      	ldrb	r1, [r3, #0]
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	5499      	strb	r1, [r3, r2]
        cb->write = (cb->write + 1) & (BUFFER_SIZE - 1); // Wrap around using bitwise AND
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	2280      	movs	r2, #128	@ 0x80
 8000788:	5c9b      	ldrb	r3, [r3, r2]
 800078a:	3301      	adds	r3, #1
 800078c:	b2db      	uxtb	r3, r3
 800078e:	227f      	movs	r2, #127	@ 0x7f
 8000790:	4013      	ands	r3, r2
 8000792:	b2d9      	uxtb	r1, r3
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	2280      	movs	r2, #128	@ 0x80
 8000798:	5499      	strb	r1, [r3, r2]
    for (size_t i = 0; i < to_enqueue; i++) {
 800079a:	69bb      	ldr	r3, [r7, #24]
 800079c:	3301      	adds	r3, #1
 800079e:	61bb      	str	r3, [r7, #24]
 80007a0:	69ba      	ldr	r2, [r7, #24]
 80007a2:	69fb      	ldr	r3, [r7, #28]
 80007a4:	429a      	cmp	r2, r3
 80007a6:	d3e4      	bcc.n	8000772 <cbfifo_enqueue+0x48>
    }

    // If we had to cap, then the FIFO is full at this point
    if (to_enqueue > 0 && cb->read == cb->write) {
 80007a8:	69fb      	ldr	r3, [r7, #28]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d00b      	beq.n	80007c6 <cbfifo_enqueue+0x9c>
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	2281      	movs	r2, #129	@ 0x81
 80007b2:	5c9a      	ldrb	r2, [r3, r2]
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	2180      	movs	r1, #128	@ 0x80
 80007b8:	5c5b      	ldrb	r3, [r3, r1]
 80007ba:	429a      	cmp	r2, r3
 80007bc:	d103      	bne.n	80007c6 <cbfifo_enqueue+0x9c>
        cb->is_full = 1;
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	2284      	movs	r2, #132	@ 0x84
 80007c2:	2101      	movs	r1, #1
 80007c4:	5099      	str	r1, [r3, r2]
    }
    return to_enqueue;
 80007c6:	69fb      	ldr	r3, [r7, #28]
}
 80007c8:	0018      	movs	r0, r3
 80007ca:	46bd      	mov	sp, r7
 80007cc:	b008      	add	sp, #32
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <cbfifo_dequeue>:

size_t cbfifo_dequeue(cbfifo *cb, void *buf, size_t nbyte) {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b088      	sub	sp, #32
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	60f8      	str	r0, [r7, #12]
 80007d8:	60b9      	str	r1, [r7, #8]
 80007da:	607a      	str	r2, [r7, #4]
    if (buf == NULL || nbyte == 0) {
 80007dc:	68bb      	ldr	r3, [r7, #8]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d002      	beq.n	80007e8 <cbfifo_dequeue+0x18>
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d102      	bne.n	80007ee <cbfifo_dequeue+0x1e>
        return (size_t)-1; // Return -1 if buffer is NULL
 80007e8:	2301      	movs	r3, #1
 80007ea:	425b      	negs	r3, r3
 80007ec:	e034      	b.n	8000858 <cbfifo_dequeue+0x88>
    }
    size_t available_data = cbfifo_length(cb);
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	0018      	movs	r0, r3
 80007f2:	f000 f835 	bl	8000860 <cbfifo_length>
 80007f6:	0003      	movs	r3, r0
 80007f8:	617b      	str	r3, [r7, #20]
    size_t to_dequeue = nbyte;
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	61fb      	str	r3, [r7, #28]

    if (to_dequeue > available_data) {
 80007fe:	69fa      	ldr	r2, [r7, #28]
 8000800:	697b      	ldr	r3, [r7, #20]
 8000802:	429a      	cmp	r2, r3
 8000804:	d901      	bls.n	800080a <cbfifo_dequeue+0x3a>
        to_dequeue = available_data;
 8000806:	697b      	ldr	r3, [r7, #20]
 8000808:	61fb      	str	r3, [r7, #28]
    }

    for (size_t i = 0; i < to_dequeue; i++) {
 800080a:	2300      	movs	r3, #0
 800080c:	61bb      	str	r3, [r7, #24]
 800080e:	e017      	b.n	8000840 <cbfifo_dequeue+0x70>
        ((uint8_t *)buf)[i] = cb->fifo[cb->read];
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	2281      	movs	r2, #129	@ 0x81
 8000814:	5c9b      	ldrb	r3, [r3, r2]
 8000816:	0019      	movs	r1, r3
 8000818:	68ba      	ldr	r2, [r7, #8]
 800081a:	69bb      	ldr	r3, [r7, #24]
 800081c:	18d3      	adds	r3, r2, r3
 800081e:	68fa      	ldr	r2, [r7, #12]
 8000820:	5c52      	ldrb	r2, [r2, r1]
 8000822:	701a      	strb	r2, [r3, #0]
        cb->read = (cb->read + 1) & (BUFFER_SIZE - 1); // Wrap around using bitwise AND
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	2281      	movs	r2, #129	@ 0x81
 8000828:	5c9b      	ldrb	r3, [r3, r2]
 800082a:	3301      	adds	r3, #1
 800082c:	b2db      	uxtb	r3, r3
 800082e:	227f      	movs	r2, #127	@ 0x7f
 8000830:	4013      	ands	r3, r2
 8000832:	b2d9      	uxtb	r1, r3
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	2281      	movs	r2, #129	@ 0x81
 8000838:	5499      	strb	r1, [r3, r2]
    for (size_t i = 0; i < to_dequeue; i++) {
 800083a:	69bb      	ldr	r3, [r7, #24]
 800083c:	3301      	adds	r3, #1
 800083e:	61bb      	str	r3, [r7, #24]
 8000840:	69ba      	ldr	r2, [r7, #24]
 8000842:	69fb      	ldr	r3, [r7, #28]
 8000844:	429a      	cmp	r2, r3
 8000846:	d3e3      	bcc.n	8000810 <cbfifo_dequeue+0x40>
    }

    // If any bytes were removed, then the FIFO isn't full anymore
    if (to_dequeue > 0) {
 8000848:	69fb      	ldr	r3, [r7, #28]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d003      	beq.n	8000856 <cbfifo_dequeue+0x86>
        cb->is_full = 0;
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	2284      	movs	r2, #132	@ 0x84
 8000852:	2100      	movs	r1, #0
 8000854:	5099      	str	r1, [r3, r2]
    }

    return to_dequeue;
 8000856:	69fb      	ldr	r3, [r7, #28]
}
 8000858:	0018      	movs	r0, r3
 800085a:	46bd      	mov	sp, r7
 800085c:	b008      	add	sp, #32
 800085e:	bd80      	pop	{r7, pc}

08000860 <cbfifo_length>:

    *byte = cb->fifo[cb->read];
    return cbfifo_length(cb);
}

size_t cbfifo_length(cbfifo *cb) {
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
    // More reliable for changes in BUFFER_SIZE
    if (cb->is_full) {
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	2284      	movs	r2, #132	@ 0x84
 800086c:	589b      	ldr	r3, [r3, r2]
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <cbfifo_length+0x16>
        // If the buffer is marked as full, return the maximum capacity
        return BUFFER_SIZE;
 8000872:	2380      	movs	r3, #128	@ 0x80
 8000874:	e01a      	b.n	80008ac <cbfifo_length+0x4c>
    } else if (cb->write >= cb->read) {
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	2280      	movs	r2, #128	@ 0x80
 800087a:	5c9a      	ldrb	r2, [r3, r2]
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	2181      	movs	r1, #129	@ 0x81
 8000880:	5c5b      	ldrb	r3, [r3, r1]
 8000882:	429a      	cmp	r2, r3
 8000884:	d308      	bcc.n	8000898 <cbfifo_length+0x38>
        // If write pointer is ahead or equal to read pointer, calculate length normally
        return cb->write - cb->read;
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	2280      	movs	r2, #128	@ 0x80
 800088a:	5c9b      	ldrb	r3, [r3, r2]
 800088c:	0019      	movs	r1, r3
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	2281      	movs	r2, #129	@ 0x81
 8000892:	5c9b      	ldrb	r3, [r3, r2]
 8000894:	1acb      	subs	r3, r1, r3
 8000896:	e009      	b.n	80008ac <cbfifo_length+0x4c>
    } else {
        // If write pointer has wrapped around, account for the circular structure
        return BUFFER_SIZE - (cb->read - cb->write);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	2281      	movs	r2, #129	@ 0x81
 800089c:	5c9b      	ldrb	r3, [r3, r2]
 800089e:	0019      	movs	r1, r3
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	2280      	movs	r2, #128	@ 0x80
 80008a4:	5c9b      	ldrb	r3, [r3, r2]
 80008a6:	1acb      	subs	r3, r1, r3
 80008a8:	2280      	movs	r2, #128	@ 0x80
 80008aa:	1ad3      	subs	r3, r2, r3
    }
}
 80008ac:	0018      	movs	r0, r3
 80008ae:	46bd      	mov	sp, r7
 80008b0:	b002      	add	sp, #8
 80008b2:	bd80      	pop	{r7, pc}

080008b4 <cbfifo_capacity>:

size_t cbfifo_capacity(cbfifo *cb) {
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
    // Capacity is statically set to BUFFER_SIZE
    return BUFFER_SIZE;
 80008bc:	2380      	movs	r3, #128	@ 0x80
}
 80008be:	0018      	movs	r0, r3
 80008c0:	46bd      	mov	sp, r7
 80008c2:	b002      	add	sp, #8
 80008c4:	bd80      	pop	{r7, pc}
	...

080008c8 <SysTick_Handler>:
 * This handler increments a time counter and switches tones every 2 seconds.
 * When the time threshold is reached, it disables the DMA, updates the DMA
 * buffer with the next tone's sample data, resets the counter, and restarts
 * the DMA. The tones cycle through a predefined set of four options.
 */
void SysTick_Handler(void) {
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0

    current_time++;
 80008cc:	4b21      	ldr	r3, [pc, #132]	@ (8000954 <SysTick_Handler+0x8c>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	1c5a      	adds	r2, r3, #1
 80008d2:	4b20      	ldr	r3, [pc, #128]	@ (8000954 <SysTick_Handler+0x8c>)
 80008d4:	601a      	str	r2, [r3, #0]
    if (current_time >= 20) {                // Switch tone every 2 seconds
 80008d6:	4b1f      	ldr	r3, [pc, #124]	@ (8000954 <SysTick_Handler+0x8c>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	2b13      	cmp	r3, #19
 80008dc:	dd37      	ble.n	800094e <SysTick_Handler+0x86>
        DMA2_Channel3->CCR &= ~DMA_CCR_EN; // Disable DMA
 80008de:	4b1e      	ldr	r3, [pc, #120]	@ (8000958 <SysTick_Handler+0x90>)
 80008e0:	681a      	ldr	r2, [r3, #0]
 80008e2:	4b1d      	ldr	r3, [pc, #116]	@ (8000958 <SysTick_Handler+0x90>)
 80008e4:	2101      	movs	r1, #1
 80008e6:	438a      	bics	r2, r1
 80008e8:	601a      	str	r2, [r3, #0]
        current_time = 0;
 80008ea:	4b1a      	ldr	r3, [pc, #104]	@ (8000954 <SysTick_Handler+0x8c>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
        tone_index = (tone_index + 1) % 4; // Cycle through 4 tones
 80008f0:	4b1a      	ldr	r3, [pc, #104]	@ (800095c <SysTick_Handler+0x94>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	3301      	adds	r3, #1
 80008f6:	4a1a      	ldr	r2, [pc, #104]	@ (8000960 <SysTick_Handler+0x98>)
 80008f8:	4013      	ands	r3, r2
 80008fa:	d504      	bpl.n	8000906 <SysTick_Handler+0x3e>
 80008fc:	3b01      	subs	r3, #1
 80008fe:	2204      	movs	r2, #4
 8000900:	4252      	negs	r2, r2
 8000902:	4313      	orrs	r3, r2
 8000904:	3301      	adds	r3, #1
 8000906:	001a      	movs	r2, r3
 8000908:	4b14      	ldr	r3, [pc, #80]	@ (800095c <SysTick_Handler+0x94>)
 800090a:	601a      	str	r2, [r3, #0]

        // Change the DMA buffer to the new tone
        switch (tone_index) {
 800090c:	4b13      	ldr	r3, [pc, #76]	@ (800095c <SysTick_Handler+0x94>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d002      	beq.n	800091a <SysTick_Handler+0x52>
 8000914:	2b01      	cmp	r3, #1
 8000916:	d00a      	beq.n	800092e <SysTick_Handler+0x66>
 8000918:	e013      	b.n	8000942 <SysTick_Handler+0x7a>
        case 0:
            DMA2_Channel3->CMAR = (uint32_t)a4_samples;
 800091a:	4b0f      	ldr	r3, [pc, #60]	@ (8000958 <SysTick_Handler+0x90>)
 800091c:	4a11      	ldr	r2, [pc, #68]	@ (8000964 <SysTick_Handler+0x9c>)
 800091e:	60da      	str	r2, [r3, #12]
            DMA2_Channel3->CNDTR = A4_BLOCK;
 8000920:	4b0d      	ldr	r3, [pc, #52]	@ (8000958 <SysTick_Handler+0x90>)
 8000922:	226d      	movs	r2, #109	@ 0x6d
 8000924:	605a      	str	r2, [r3, #4]
            set_blk_size(A4_BLOCK);
 8000926:	206d      	movs	r0, #109	@ 0x6d
 8000928:	f7ff fe12 	bl	8000550 <set_blk_size>
            break;
 800092c:	e009      	b.n	8000942 <SysTick_Handler+0x7a>
        case 1:
            DMA2_Channel3->CMAR = (uint32_t)d5_samples;
 800092e:	4b0a      	ldr	r3, [pc, #40]	@ (8000958 <SysTick_Handler+0x90>)
 8000930:	4a0d      	ldr	r2, [pc, #52]	@ (8000968 <SysTick_Handler+0xa0>)
 8000932:	60da      	str	r2, [r3, #12]
            DMA2_Channel3->CNDTR = D5_BLOCK;
 8000934:	4b08      	ldr	r3, [pc, #32]	@ (8000958 <SysTick_Handler+0x90>)
 8000936:	2251      	movs	r2, #81	@ 0x51
 8000938:	605a      	str	r2, [r3, #4]
            set_blk_size(D5_BLOCK);
 800093a:	2051      	movs	r0, #81	@ 0x51
 800093c:	f7ff fe08 	bl	8000550 <set_blk_size>
            break;
 8000940:	46c0      	nop			@ (mov r8, r8)
        }

        // Restart the DMA
        DMA2_Channel3->CCR |= DMA_CCR_EN; // Enable DMA
 8000942:	4b05      	ldr	r3, [pc, #20]	@ (8000958 <SysTick_Handler+0x90>)
 8000944:	681a      	ldr	r2, [r3, #0]
 8000946:	4b04      	ldr	r3, [pc, #16]	@ (8000958 <SysTick_Handler+0x90>)
 8000948:	2101      	movs	r1, #1
 800094a:	430a      	orrs	r2, r1
 800094c:	601a      	str	r2, [r3, #0]
    }
}
 800094e:	46c0      	nop			@ (mov r8, r8)
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	20001080 	.word	0x20001080
 8000958:	40020430 	.word	0x40020430
 800095c:	20001088 	.word	0x20001088
 8000960:	80000003 	.word	0x80000003
 8000964:	20000080 	.word	0x20000080
 8000968:	20000880 	.word	0x20000880

0800096c <user_input>:
// Returns length of string
// TODO: Write comment for this function
// TODO: Add buffer overflow protection
int user_input(char *str, size_t strlen) {
 800096c:	b580      	push	{r7, lr}
 800096e:	b084      	sub	sp, #16
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
 8000974:	6039      	str	r1, [r7, #0]
    int str_idx = 0;      // Index for string buffer
 8000976:	2300      	movs	r3, #0
 8000978:	60fb      	str	r3, [r7, #12]
    while (1) {
        char ch = __io_getchar(); // Get a character
 800097a:	f000 fcb0 	bl	80012de <__io_getchar>
 800097e:	0003      	movs	r3, r0
 8000980:	b2da      	uxtb	r2, r3
 8000982:	210b      	movs	r1, #11
 8000984:	187b      	adds	r3, r7, r1
 8000986:	701a      	strb	r2, [r3, #0]
        if (ch == '\n' || ch == '\r') {
 8000988:	000a      	movs	r2, r1
 800098a:	18bb      	adds	r3, r7, r2
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	2b0a      	cmp	r3, #10
 8000990:	d003      	beq.n	800099a <user_input+0x2e>
 8000992:	18bb      	adds	r3, r7, r2
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	2b0d      	cmp	r3, #13
 8000998:	d10b      	bne.n	80009b2 <user_input+0x46>
            // End of input string (newline or carriage return)
            str[str_idx] = '\0';   // Null-terminate the string
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	687a      	ldr	r2, [r7, #4]
 800099e:	18d3      	adds	r3, r2, r3
 80009a0:	2200      	movs	r2, #0
 80009a2:	701a      	strb	r2, [r3, #0]
            usart_transmit("\r\n", 2); // Send newline for the terminal
 80009a4:	4b1a      	ldr	r3, [pc, #104]	@ (8000a10 <user_input+0xa4>)
 80009a6:	2102      	movs	r1, #2
 80009a8:	0018      	movs	r0, r3
 80009aa:	f000 fc31 	bl	8001210 <usart_transmit>
            return str_idx;
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	e029      	b.n	8000a06 <user_input+0x9a>
        } else if (ch == '\b' || ch == 127) { // Backspace or Delete key
 80009b2:	220b      	movs	r2, #11
 80009b4:	18bb      	adds	r3, r7, r2
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	2b08      	cmp	r3, #8
 80009ba:	d003      	beq.n	80009c4 <user_input+0x58>
 80009bc:	18bb      	adds	r3, r7, r2
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	2b7f      	cmp	r3, #127	@ 0x7f
 80009c2:	d10b      	bne.n	80009dc <user_input+0x70>
            if (str_idx > 0) {
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	dd1c      	ble.n	8000a04 <user_input+0x98>
                // Remove the last character in buffer
                str_idx--;
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	3b01      	subs	r3, #1
 80009ce:	60fb      	str	r3, [r7, #12]
                usart_transmit("\b \b", 3); // Erase character from terminal
 80009d0:	4b10      	ldr	r3, [pc, #64]	@ (8000a14 <user_input+0xa8>)
 80009d2:	2103      	movs	r1, #3
 80009d4:	0018      	movs	r0, r3
 80009d6:	f000 fc1b 	bl	8001210 <usart_transmit>
            if (str_idx > 0) {
 80009da:	e013      	b.n	8000a04 <user_input+0x98>
            }
        } else if (str_idx < strlen - 1) {
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	1e5a      	subs	r2, r3, #1
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	429a      	cmp	r2, r3
 80009e4:	d9c9      	bls.n	800097a <user_input+0xe>
            // Store character in buffer and echo it back
            str[str_idx++] = ch;
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	1c5a      	adds	r2, r3, #1
 80009ea:	60fa      	str	r2, [r7, #12]
 80009ec:	001a      	movs	r2, r3
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	189b      	adds	r3, r3, r2
 80009f2:	210b      	movs	r1, #11
 80009f4:	187a      	adds	r2, r7, r1
 80009f6:	7812      	ldrb	r2, [r2, #0]
 80009f8:	701a      	strb	r2, [r3, #0]
            usart_transmit(&ch, 1); // Echo back the character
 80009fa:	187b      	adds	r3, r7, r1
 80009fc:	2101      	movs	r1, #1
 80009fe:	0018      	movs	r0, r3
 8000a00:	f000 fc06 	bl	8001210 <usart_transmit>
    while (1) {
 8000a04:	e7b9      	b.n	800097a <user_input+0xe>
        }
    }
    return -1; // Error condition
}
 8000a06:	0018      	movs	r0, r3
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	b004      	add	sp, #16
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	46c0      	nop			@ (mov r8, r8)
 8000a10:	08002820 	.word	0x08002820
 8000a14:	08002824 	.word	0x08002824

08000a18 <main>:

int main(void) {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b0a4      	sub	sp, #144	@ 0x90
 8000a1c:	af02      	add	r7, sp, #8
	 * Clocks: Processor = 48 Mhz. AHB = 48 MHz. APB = 24 MHz.
	 *
	 */

    // Generate all of my tone buffers first
    tone_to_samples(A4_FREQ, A4_STEP, A4_BLOCK, a4_samples, BUFFER_SIZE);
 8000a1e:	4a3b      	ldr	r2, [pc, #236]	@ (8000b0c <main+0xf4>)
 8000a20:	23dc      	movs	r3, #220	@ 0xdc
 8000a22:	0058      	lsls	r0, r3, #1
 8000a24:	2380      	movs	r3, #128	@ 0x80
 8000a26:	00db      	lsls	r3, r3, #3
 8000a28:	9300      	str	r3, [sp, #0]
 8000a2a:	0013      	movs	r3, r2
 8000a2c:	226d      	movs	r2, #109	@ 0x6d
 8000a2e:	2100      	movs	r1, #0
 8000a30:	f7ff fe4c 	bl	80006cc <tone_to_samples>
    tone_to_samples(D5_FREQ, D5_STEP, D5_BLOCK, d5_samples, BUFFER_SIZE);
 8000a34:	4a36      	ldr	r2, [pc, #216]	@ (8000b10 <main+0xf8>)
 8000a36:	4837      	ldr	r0, [pc, #220]	@ (8000b14 <main+0xfc>)
 8000a38:	2380      	movs	r3, #128	@ 0x80
 8000a3a:	00db      	lsls	r3, r3, #3
 8000a3c:	9300      	str	r3, [sp, #0]
 8000a3e:	0013      	movs	r3, r2
 8000a40:	2251      	movs	r2, #81	@ 0x51
 8000a42:	2100      	movs	r1, #0
 8000a44:	f7ff fe42 	bl	80006cc <tone_to_samples>

    // Initialize peripherals
    usart_init();
 8000a48:	f000 fb04 	bl	8001054 <usart_init>
    uled_init();
 8000a4c:	f000 fa38 	bl	8000ec0 <uled_init>
    analog_out_init(a4_samples, A4_BLOCK);
 8000a50:	4b2e      	ldr	r3, [pc, #184]	@ (8000b0c <main+0xf4>)
 8000a52:	216d      	movs	r1, #109	@ 0x6d
 8000a54:	0018      	movs	r0, r3
 8000a56:	f7ff fdcd 	bl	80005f4 <analog_out_init>
    set_blk_size(A4_BLOCK);
 8000a5a:	206d      	movs	r0, #109	@ 0x6d
 8000a5c:	f7ff fd78 	bl	8000550 <set_blk_size>
    // TODO: UART init (maybe, depends on if we can read with default UART)

    // TODO: Ask user for time and alarm, set system parameters
    char str_buf[TXT_BUFFER_SIZE]; // Recieve string buffer
    int str_size;
    int time = -1;
 8000a60:	2301      	movs	r3, #1
 8000a62:	425b      	negs	r3, r3
 8000a64:	2284      	movs	r2, #132	@ 0x84
 8000a66:	18ba      	adds	r2, r7, r2
 8000a68:	6013      	str	r3, [r2, #0]
    while(time == -1){
 8000a6a:	e017      	b.n	8000a9c <main+0x84>
        printf("What time is it?\r\n");
 8000a6c:	4b2a      	ldr	r3, [pc, #168]	@ (8000b18 <main+0x100>)
 8000a6e:	0018      	movs	r0, r3
 8000a70:	f000 ff44 	bl	80018fc <puts>
        str_size = user_input(str_buf, TXT_BUFFER_SIZE);
 8000a74:	003b      	movs	r3, r7
 8000a76:	2180      	movs	r1, #128	@ 0x80
 8000a78:	0018      	movs	r0, r3
 8000a7a:	f7ff ff77 	bl	800096c <user_input>
 8000a7e:	0003      	movs	r3, r0
 8000a80:	2280      	movs	r2, #128	@ 0x80
 8000a82:	18b9      	adds	r1, r7, r2
 8000a84:	600b      	str	r3, [r1, #0]
        time = process_time(str_buf, str_size);
 8000a86:	18bb      	adds	r3, r7, r2
 8000a88:	681a      	ldr	r2, [r3, #0]
 8000a8a:	003b      	movs	r3, r7
 8000a8c:	0011      	movs	r1, r2
 8000a8e:	0018      	movs	r0, r3
 8000a90:	f000 f84c 	bl	8000b2c <process_time>
 8000a94:	0003      	movs	r3, r0
 8000a96:	2284      	movs	r2, #132	@ 0x84
 8000a98:	18ba      	adds	r2, r7, r2
 8000a9a:	6013      	str	r3, [r2, #0]
    while(time == -1){
 8000a9c:	2184      	movs	r1, #132	@ 0x84
 8000a9e:	187b      	adds	r3, r7, r1
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	3301      	adds	r3, #1
 8000aa4:	d0e2      	beq.n	8000a6c <main+0x54>
    }
    current_time = time;
 8000aa6:	4b1d      	ldr	r3, [pc, #116]	@ (8000b1c <main+0x104>)
 8000aa8:	187a      	adds	r2, r7, r1
 8000aaa:	6812      	ldr	r2, [r2, #0]
 8000aac:	601a      	str	r2, [r3, #0]
    time = -1;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	425b      	negs	r3, r3
 8000ab2:	187a      	adds	r2, r7, r1
 8000ab4:	6013      	str	r3, [r2, #0]
    while(time == -1){
 8000ab6:	e017      	b.n	8000ae8 <main+0xd0>
        printf("When do you want to wake up?\r\n");
 8000ab8:	4b19      	ldr	r3, [pc, #100]	@ (8000b20 <main+0x108>)
 8000aba:	0018      	movs	r0, r3
 8000abc:	f000 ff1e 	bl	80018fc <puts>
        str_size = user_input(str_buf, TXT_BUFFER_SIZE);
 8000ac0:	003b      	movs	r3, r7
 8000ac2:	2180      	movs	r1, #128	@ 0x80
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	f7ff ff51 	bl	800096c <user_input>
 8000aca:	0003      	movs	r3, r0
 8000acc:	2280      	movs	r2, #128	@ 0x80
 8000ace:	18b9      	adds	r1, r7, r2
 8000ad0:	600b      	str	r3, [r1, #0]
        time = process_time(str_buf, str_size);
 8000ad2:	18bb      	adds	r3, r7, r2
 8000ad4:	681a      	ldr	r2, [r3, #0]
 8000ad6:	003b      	movs	r3, r7
 8000ad8:	0011      	movs	r1, r2
 8000ada:	0018      	movs	r0, r3
 8000adc:	f000 f826 	bl	8000b2c <process_time>
 8000ae0:	0003      	movs	r3, r0
 8000ae2:	2284      	movs	r2, #132	@ 0x84
 8000ae4:	18ba      	adds	r2, r7, r2
 8000ae6:	6013      	str	r3, [r2, #0]
    while(time == -1){
 8000ae8:	2284      	movs	r2, #132	@ 0x84
 8000aea:	18bb      	adds	r3, r7, r2
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	3301      	adds	r3, #1
 8000af0:	d0e2      	beq.n	8000ab8 <main+0xa0>
    }
    alarm_time = time;
 8000af2:	4b0c      	ldr	r3, [pc, #48]	@ (8000b24 <main+0x10c>)
 8000af4:	18ba      	adds	r2, r7, r2
 8000af6:	6812      	ldr	r2, [r2, #0]
 8000af8:	601a      	str	r2, [r3, #0]
    printf("Goodnight! See you at %s\r\n", str_buf);
 8000afa:	003a      	movs	r2, r7
 8000afc:	4b0a      	ldr	r3, [pc, #40]	@ (8000b28 <main+0x110>)
 8000afe:	0011      	movs	r1, r2
 8000b00:	0018      	movs	r0, r3
 8000b02:	f000 fe95 	bl	8001830 <iprintf>
//    Init_SysTick();
    // TODO: Figure out sleep and such

    while (1) {
 8000b06:	46c0      	nop			@ (mov r8, r8)
 8000b08:	e7fd      	b.n	8000b06 <main+0xee>
 8000b0a:	46c0      	nop			@ (mov r8, r8)
 8000b0c:	20000080 	.word	0x20000080
 8000b10:	20000880 	.word	0x20000880
 8000b14:	0000024b 	.word	0x0000024b
 8000b18:	08002828 	.word	0x08002828
 8000b1c:	20001080 	.word	0x20001080
 8000b20:	0800283c 	.word	0x0800283c
 8000b24:	20001084 	.word	0x20001084
 8000b28:	0800285c 	.word	0x0800285c

08000b2c <process_time>:
#include <stdlib.h>
#include <string.h>

#include "process_time.h"
#include "uled.h"
int process_time(char *input, size_t nbytes) {
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b088      	sub	sp, #32
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
 8000b34:	6039      	str	r1, [r7, #0]
    int hours = -1, minutes = -1, total_seconds = 0;
 8000b36:	2301      	movs	r3, #1
 8000b38:	425b      	negs	r3, r3
 8000b3a:	61fb      	str	r3, [r7, #28]
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	425b      	negs	r3, r3
 8000b40:	61bb      	str	r3, [r7, #24]
 8000b42:	2300      	movs	r3, #0
 8000b44:	617b      	str	r3, [r7, #20]
    char *endptr;

    // Skip leading whitespace
    while (*input && isspace((unsigned char)*input)) {
 8000b46:	e002      	b.n	8000b4e <process_time+0x22>
        input++;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	607b      	str	r3, [r7, #4]
    while (*input && isspace((unsigned char)*input)) {
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d009      	beq.n	8000b6a <process_time+0x3e>
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	1c5a      	adds	r2, r3, #1
 8000b5c:	4b7f      	ldr	r3, [pc, #508]	@ (8000d5c <process_time+0x230>)
 8000b5e:	18d3      	adds	r3, r2, r3
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	001a      	movs	r2, r3
 8000b64:	2308      	movs	r3, #8
 8000b66:	4013      	ands	r3, r2
 8000b68:	d1ee      	bne.n	8000b48 <process_time+0x1c>
    }

    // Check if the input is empty
    if (*input == '\0') {
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d106      	bne.n	8000b80 <process_time+0x54>
        printf("Error: Empty input\r\n");
 8000b72:	4b7b      	ldr	r3, [pc, #492]	@ (8000d60 <process_time+0x234>)
 8000b74:	0018      	movs	r0, r3
 8000b76:	f000 fec1 	bl	80018fc <puts>
        return -1;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	425b      	negs	r3, r3
 8000b7e:	e0e8      	b.n	8000d52 <process_time+0x226>
    }

    // Parse hours and minutes
    if (isdigit((unsigned char)*input)) {
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	1c5a      	adds	r2, r3, #1
 8000b86:	4b75      	ldr	r3, [pc, #468]	@ (8000d5c <process_time+0x230>)
 8000b88:	18d3      	adds	r3, r2, r3
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	001a      	movs	r2, r3
 8000b8e:	2304      	movs	r3, #4
 8000b90:	4013      	ands	r3, r2
 8000b92:	d059      	beq.n	8000c48 <process_time+0x11c>
        int time_value = strtol(input, &endptr, 10);
 8000b94:	2308      	movs	r3, #8
 8000b96:	18f9      	adds	r1, r7, r3
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	220a      	movs	r2, #10
 8000b9c:	0018      	movs	r0, r3
 8000b9e:	f000 fd77 	bl	8001690 <strtol>
 8000ba2:	0003      	movs	r3, r0
 8000ba4:	613b      	str	r3, [r7, #16]

        // Check if the input length indicates a combined hours-minutes format
        int length = endptr - input;
 8000ba6:	68ba      	ldr	r2, [r7, #8]
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	1ad3      	subs	r3, r2, r3
 8000bac:	60fb      	str	r3, [r7, #12]
        if (length == 4) { // Format like 0800
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	2b04      	cmp	r3, #4
 8000bb2:	d110      	bne.n	8000bd6 <process_time+0xaa>
            hours = time_value / 100;
 8000bb4:	693b      	ldr	r3, [r7, #16]
 8000bb6:	2164      	movs	r1, #100	@ 0x64
 8000bb8:	0018      	movs	r0, r3
 8000bba:	f7ff fb39 	bl	8000230 <__divsi3>
 8000bbe:	0003      	movs	r3, r0
 8000bc0:	61fb      	str	r3, [r7, #28]
            minutes = time_value % 100;
 8000bc2:	693b      	ldr	r3, [r7, #16]
 8000bc4:	2164      	movs	r1, #100	@ 0x64
 8000bc6:	0018      	movs	r0, r3
 8000bc8:	f7ff fc18 	bl	80003fc <__aeabi_idivmod>
 8000bcc:	000b      	movs	r3, r1
 8000bce:	61bb      	str	r3, [r7, #24]
            input = endptr;
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	607b      	str	r3, [r7, #4]
 8000bd4:	e03f      	b.n	8000c56 <process_time+0x12a>
        } else if (length == 2 || *endptr == ':') { // Format like 08:00 or 08
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	2b02      	cmp	r3, #2
 8000bda:	d003      	beq.n	8000be4 <process_time+0xb8>
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	2b3a      	cmp	r3, #58	@ 0x3a
 8000be2:	d12a      	bne.n	8000c3a <process_time+0x10e>
            hours = time_value;
 8000be4:	693b      	ldr	r3, [r7, #16]
 8000be6:	61fb      	str	r3, [r7, #28]
            input = endptr;
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	607b      	str	r3, [r7, #4]

            if (*input == ':') {
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	2b3a      	cmp	r3, #58	@ 0x3a
 8000bf2:	d11f      	bne.n	8000c34 <process_time+0x108>
                input++;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	3301      	adds	r3, #1
 8000bf8:	607b      	str	r3, [r7, #4]
                if (isdigit((unsigned char)*input)) {
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	1c5a      	adds	r2, r3, #1
 8000c00:	4b56      	ldr	r3, [pc, #344]	@ (8000d5c <process_time+0x230>)
 8000c02:	18d3      	adds	r3, r2, r3
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	001a      	movs	r2, r3
 8000c08:	2304      	movs	r3, #4
 8000c0a:	4013      	ands	r3, r2
 8000c0c:	d00b      	beq.n	8000c26 <process_time+0xfa>
                    minutes = strtol(input, &endptr, 10);
 8000c0e:	2308      	movs	r3, #8
 8000c10:	18f9      	adds	r1, r7, r3
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	220a      	movs	r2, #10
 8000c16:	0018      	movs	r0, r3
 8000c18:	f000 fd3a 	bl	8001690 <strtol>
 8000c1c:	0003      	movs	r3, r0
 8000c1e:	61bb      	str	r3, [r7, #24]
                    input = endptr;
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	607b      	str	r3, [r7, #4]
            if (*input == ':') {
 8000c24:	e017      	b.n	8000c56 <process_time+0x12a>
                } else {
                    printf("Error: Invalid minutes format\r\n");
 8000c26:	4b4f      	ldr	r3, [pc, #316]	@ (8000d64 <process_time+0x238>)
 8000c28:	0018      	movs	r0, r3
 8000c2a:	f000 fe67 	bl	80018fc <puts>
                    return -1;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	425b      	negs	r3, r3
 8000c32:	e08e      	b.n	8000d52 <process_time+0x226>
                }
            } else {
                minutes = 0; // Default minutes to 0 if not provided
 8000c34:	2300      	movs	r3, #0
 8000c36:	61bb      	str	r3, [r7, #24]
            if (*input == ':') {
 8000c38:	e00d      	b.n	8000c56 <process_time+0x12a>
            }
        } else {
            printf("Error: Invalid time format\r\n");
 8000c3a:	4b4b      	ldr	r3, [pc, #300]	@ (8000d68 <process_time+0x23c>)
 8000c3c:	0018      	movs	r0, r3
 8000c3e:	f000 fe5d 	bl	80018fc <puts>
            return -1;
 8000c42:	2301      	movs	r3, #1
 8000c44:	425b      	negs	r3, r3
 8000c46:	e084      	b.n	8000d52 <process_time+0x226>
        }
    } else {
        printf("Error: Invalid hours format\r\n");
 8000c48:	4b48      	ldr	r3, [pc, #288]	@ (8000d6c <process_time+0x240>)
 8000c4a:	0018      	movs	r0, r3
 8000c4c:	f000 fe56 	bl	80018fc <puts>
        return -1;
 8000c50:	2301      	movs	r3, #1
 8000c52:	425b      	negs	r3, r3
 8000c54:	e07d      	b.n	8000d52 <process_time+0x226>
    }

    // Validate hours and minutes
    if (minutes < 0 || minutes >= 60) {
 8000c56:	69bb      	ldr	r3, [r7, #24]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	db02      	blt.n	8000c62 <process_time+0x136>
 8000c5c:	69bb      	ldr	r3, [r7, #24]
 8000c5e:	2b3b      	cmp	r3, #59	@ 0x3b
 8000c60:	dd06      	ble.n	8000c70 <process_time+0x144>
        printf("Error: Invalid minutes\r\n");
 8000c62:	4b43      	ldr	r3, [pc, #268]	@ (8000d70 <process_time+0x244>)
 8000c64:	0018      	movs	r0, r3
 8000c66:	f000 fe49 	bl	80018fc <puts>
        return -1;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	425b      	negs	r3, r3
 8000c6e:	e070      	b.n	8000d52 <process_time+0x226>
    }
    if (hours < 0 || hours > 23) {
 8000c70:	69fb      	ldr	r3, [r7, #28]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	db02      	blt.n	8000c7c <process_time+0x150>
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	2b17      	cmp	r3, #23
 8000c7a:	dd09      	ble.n	8000c90 <process_time+0x164>
        printf("Error: Invalid hours\r\n");
 8000c7c:	4b3d      	ldr	r3, [pc, #244]	@ (8000d74 <process_time+0x248>)
 8000c7e:	0018      	movs	r0, r3
 8000c80:	f000 fe3c 	bl	80018fc <puts>
        return -1;
 8000c84:	2301      	movs	r3, #1
 8000c86:	425b      	negs	r3, r3
 8000c88:	e063      	b.n	8000d52 <process_time+0x226>
    }

    // Skip whitespace
    while (*input && isspace((unsigned char)*input)) {
        input++;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	607b      	str	r3, [r7, #4]
    while (*input && isspace((unsigned char)*input)) {
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d009      	beq.n	8000cac <process_time+0x180>
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	1c5a      	adds	r2, r3, #1
 8000c9e:	4b2f      	ldr	r3, [pc, #188]	@ (8000d5c <process_time+0x230>)
 8000ca0:	18d3      	adds	r3, r2, r3
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	001a      	movs	r2, r3
 8000ca6:	2308      	movs	r3, #8
 8000ca8:	4013      	ands	r3, r2
 8000caa:	d1ee      	bne.n	8000c8a <process_time+0x15e>
    }

    // Parse optional AM/PM
    if (*input != '\0') {
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d03d      	beq.n	8000d30 <process_time+0x204>
        if (strncasecmp(input, "AM", 2) == 0) {
 8000cb4:	4930      	ldr	r1, [pc, #192]	@ (8000d78 <process_time+0x24c>)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2202      	movs	r2, #2
 8000cba:	0018      	movs	r0, r3
 8000cbc:	f000 ffdc 	bl	8001c78 <strncasecmp>
 8000cc0:	1e03      	subs	r3, r0, #0
 8000cc2:	d112      	bne.n	8000cea <process_time+0x1be>
            if (hours < 1 || hours > 12) {
 8000cc4:	69fb      	ldr	r3, [r7, #28]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	dd02      	ble.n	8000cd0 <process_time+0x1a4>
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	2b0c      	cmp	r3, #12
 8000cce:	dd06      	ble.n	8000cde <process_time+0x1b2>
                printf("Error: Invalid hours for 12-hour format\r\n");
 8000cd0:	4b2a      	ldr	r3, [pc, #168]	@ (8000d7c <process_time+0x250>)
 8000cd2:	0018      	movs	r0, r3
 8000cd4:	f000 fe12 	bl	80018fc <puts>
                return -1;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	425b      	negs	r3, r3
 8000cdc:	e039      	b.n	8000d52 <process_time+0x226>
            }
            if (hours == 12) hours = 0; // Convert 12 AM to 0 hours
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	2b0c      	cmp	r3, #12
 8000ce2:	d125      	bne.n	8000d30 <process_time+0x204>
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	61fb      	str	r3, [r7, #28]
 8000ce8:	e022      	b.n	8000d30 <process_time+0x204>
        } else if (strncasecmp(input, "PM", 2) == 0) {
 8000cea:	4925      	ldr	r1, [pc, #148]	@ (8000d80 <process_time+0x254>)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2202      	movs	r2, #2
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	f000 ffc1 	bl	8001c78 <strncasecmp>
 8000cf6:	1e03      	subs	r3, r0, #0
 8000cf8:	d113      	bne.n	8000d22 <process_time+0x1f6>
            if (hours < 1 || hours > 12) {
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	dd02      	ble.n	8000d06 <process_time+0x1da>
 8000d00:	69fb      	ldr	r3, [r7, #28]
 8000d02:	2b0c      	cmp	r3, #12
 8000d04:	dd06      	ble.n	8000d14 <process_time+0x1e8>
                printf("Error: Invalid hours for 12-hour format\r\n");
 8000d06:	4b1d      	ldr	r3, [pc, #116]	@ (8000d7c <process_time+0x250>)
 8000d08:	0018      	movs	r0, r3
 8000d0a:	f000 fdf7 	bl	80018fc <puts>
                return -1;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	425b      	negs	r3, r3
 8000d12:	e01e      	b.n	8000d52 <process_time+0x226>
            }
            if (hours != 12) hours += 12; // Convert PM hours to 24-hour format
 8000d14:	69fb      	ldr	r3, [r7, #28]
 8000d16:	2b0c      	cmp	r3, #12
 8000d18:	d00a      	beq.n	8000d30 <process_time+0x204>
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	330c      	adds	r3, #12
 8000d1e:	61fb      	str	r3, [r7, #28]
 8000d20:	e006      	b.n	8000d30 <process_time+0x204>
        } else {
            printf("Error: Invalid AM/PM format\r\n");
 8000d22:	4b18      	ldr	r3, [pc, #96]	@ (8000d84 <process_time+0x258>)
 8000d24:	0018      	movs	r0, r3
 8000d26:	f000 fde9 	bl	80018fc <puts>
            return -1;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	425b      	negs	r3, r3
 8000d2e:	e010      	b.n	8000d52 <process_time+0x226>
        }
    }

    // Calculate total seconds since midnight
    total_seconds = hours * 3600 + minutes * 60;
 8000d30:	69fa      	ldr	r2, [r7, #28]
 8000d32:	0013      	movs	r3, r2
 8000d34:	011b      	lsls	r3, r3, #4
 8000d36:	1a9b      	subs	r3, r3, r2
 8000d38:	011a      	lsls	r2, r3, #4
 8000d3a:	1ad2      	subs	r2, r2, r3
 8000d3c:	0113      	lsls	r3, r2, #4
 8000d3e:	001a      	movs	r2, r3
 8000d40:	0011      	movs	r1, r2
 8000d42:	69ba      	ldr	r2, [r7, #24]
 8000d44:	0013      	movs	r3, r2
 8000d46:	011b      	lsls	r3, r3, #4
 8000d48:	1a9b      	subs	r3, r3, r2
 8000d4a:	009b      	lsls	r3, r3, #2
 8000d4c:	18cb      	adds	r3, r1, r3
 8000d4e:	617b      	str	r3, [r7, #20]

    return total_seconds;
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	0018      	movs	r0, r3
 8000d54:	46bd      	mov	sp, r7
 8000d56:	b008      	add	sp, #32
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	46c0      	nop			@ (mov r8, r8)
 8000d5c:	0800297c 	.word	0x0800297c
 8000d60:	08002878 	.word	0x08002878
 8000d64:	0800288c 	.word	0x0800288c
 8000d68:	080028ac 	.word	0x080028ac
 8000d6c:	080028c8 	.word	0x080028c8
 8000d70:	080028e8 	.word	0x080028e8
 8000d74:	08002900 	.word	0x08002900
 8000d78:	08002918 	.word	0x08002918
 8000d7c:	0800291c 	.word	0x0800291c
 8000d80:	08002948 	.word	0x08002948
 8000d84:	0800294c 	.word	0x0800294c

08000d88 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b086      	sub	sp, #24
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	60f8      	str	r0, [r7, #12]
 8000d90:	60b9      	str	r1, [r7, #8]
 8000d92:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d94:	2300      	movs	r3, #0
 8000d96:	617b      	str	r3, [r7, #20]
 8000d98:	e00a      	b.n	8000db0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d9a:	f000 faa0 	bl	80012de <__io_getchar>
 8000d9e:	0001      	movs	r1, r0
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	1c5a      	adds	r2, r3, #1
 8000da4:	60ba      	str	r2, [r7, #8]
 8000da6:	b2ca      	uxtb	r2, r1
 8000da8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	3301      	adds	r3, #1
 8000dae:	617b      	str	r3, [r7, #20]
 8000db0:	697a      	ldr	r2, [r7, #20]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	dbf0      	blt.n	8000d9a <_read+0x12>
  }

  return len;
 8000db8:	687b      	ldr	r3, [r7, #4]
}
 8000dba:	0018      	movs	r0, r3
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	b006      	add	sp, #24
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b086      	sub	sp, #24
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	60f8      	str	r0, [r7, #12]
 8000dca:	60b9      	str	r1, [r7, #8]
 8000dcc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dce:	2300      	movs	r3, #0
 8000dd0:	617b      	str	r3, [r7, #20]
 8000dd2:	e009      	b.n	8000de8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	1c5a      	adds	r2, r3, #1
 8000dd8:	60ba      	str	r2, [r7, #8]
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	0018      	movs	r0, r3
 8000dde:	f000 fa6b 	bl	80012b8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	3301      	adds	r3, #1
 8000de6:	617b      	str	r3, [r7, #20]
 8000de8:	697a      	ldr	r2, [r7, #20]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	dbf1      	blt.n	8000dd4 <_write+0x12>
  }
  return len;
 8000df0:	687b      	ldr	r3, [r7, #4]
}
 8000df2:	0018      	movs	r0, r3
 8000df4:	46bd      	mov	sp, r7
 8000df6:	b006      	add	sp, #24
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <_close>:

int _close(int file)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b082      	sub	sp, #8
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e02:	2301      	movs	r3, #1
 8000e04:	425b      	negs	r3, r3
}
 8000e06:	0018      	movs	r0, r3
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	b002      	add	sp, #8
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	b082      	sub	sp, #8
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	6078      	str	r0, [r7, #4]
 8000e16:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	2280      	movs	r2, #128	@ 0x80
 8000e1c:	0192      	lsls	r2, r2, #6
 8000e1e:	605a      	str	r2, [r3, #4]
  return 0;
 8000e20:	2300      	movs	r3, #0
}
 8000e22:	0018      	movs	r0, r3
 8000e24:	46bd      	mov	sp, r7
 8000e26:	b002      	add	sp, #8
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <_isatty>:

int _isatty(int file)
{
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b082      	sub	sp, #8
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e32:	2301      	movs	r3, #1
}
 8000e34:	0018      	movs	r0, r3
 8000e36:	46bd      	mov	sp, r7
 8000e38:	b002      	add	sp, #8
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	60f8      	str	r0, [r7, #12]
 8000e44:	60b9      	str	r1, [r7, #8]
 8000e46:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e48:	2300      	movs	r3, #0
}
 8000e4a:	0018      	movs	r0, r3
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	b004      	add	sp, #16
 8000e50:	bd80      	pop	{r7, pc}
	...

08000e54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b086      	sub	sp, #24
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e5c:	4a14      	ldr	r2, [pc, #80]	@ (8000eb0 <_sbrk+0x5c>)
 8000e5e:	4b15      	ldr	r3, [pc, #84]	@ (8000eb4 <_sbrk+0x60>)
 8000e60:	1ad3      	subs	r3, r2, r3
 8000e62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e68:	4b13      	ldr	r3, [pc, #76]	@ (8000eb8 <_sbrk+0x64>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d102      	bne.n	8000e76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e70:	4b11      	ldr	r3, [pc, #68]	@ (8000eb8 <_sbrk+0x64>)
 8000e72:	4a12      	ldr	r2, [pc, #72]	@ (8000ebc <_sbrk+0x68>)
 8000e74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e76:	4b10      	ldr	r3, [pc, #64]	@ (8000eb8 <_sbrk+0x64>)
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	18d3      	adds	r3, r2, r3
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	429a      	cmp	r2, r3
 8000e82:	d207      	bcs.n	8000e94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e84:	f000 ff6a 	bl	8001d5c <__errno>
 8000e88:	0003      	movs	r3, r0
 8000e8a:	220c      	movs	r2, #12
 8000e8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	425b      	negs	r3, r3
 8000e92:	e009      	b.n	8000ea8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e94:	4b08      	ldr	r3, [pc, #32]	@ (8000eb8 <_sbrk+0x64>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e9a:	4b07      	ldr	r3, [pc, #28]	@ (8000eb8 <_sbrk+0x64>)
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	18d2      	adds	r2, r2, r3
 8000ea2:	4b05      	ldr	r3, [pc, #20]	@ (8000eb8 <_sbrk+0x64>)
 8000ea4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000ea6:	68fb      	ldr	r3, [r7, #12]
}
 8000ea8:	0018      	movs	r0, r3
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	b006      	add	sp, #24
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	20008000 	.word	0x20008000
 8000eb4:	00000400 	.word	0x00000400
 8000eb8:	2000108c 	.word	0x2000108c
 8000ebc:	200012f0 	.word	0x200012f0

08000ec0 <uled_init>:
//#include "log.h"
#include <stm32f091xc.h>
#include "uled.h"
#include "utilities.h"

int uled_init(void) {
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0

	// This section of code was taken from Alex Dean's Github
	// https://github.com/alexander-g-dean/ESF/blob/master/ST/Code/ch2/Basic-LED/main.c
	// Enable peripheral clock of GPIOA (for LD2)
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8000ec4:	4b0f      	ldr	r3, [pc, #60]	@ (8000f04 <uled_init+0x44>)
 8000ec6:	695a      	ldr	r2, [r3, #20]
 8000ec8:	4b0e      	ldr	r3, [pc, #56]	@ (8000f04 <uled_init+0x44>)
 8000eca:	2180      	movs	r1, #128	@ 0x80
 8000ecc:	0289      	lsls	r1, r1, #10
 8000ece:	430a      	orrs	r2, r1
 8000ed0:	615a      	str	r2, [r3, #20]
	// Configure PA5 in output mode (01=1)
	MODIFY_FIELD(GPIOA->MODER, GPIO_MODER_MODER5, ESF_GPIO_MODER_OUTPUT);
 8000ed2:	2390      	movs	r3, #144	@ 0x90
 8000ed4:	05db      	lsls	r3, r3, #23
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a0b      	ldr	r2, [pc, #44]	@ (8000f08 <uled_init+0x48>)
 8000eda:	401a      	ands	r2, r3
 8000edc:	2390      	movs	r3, #144	@ 0x90
 8000ede:	05db      	lsls	r3, r3, #23
 8000ee0:	2180      	movs	r1, #128	@ 0x80
 8000ee2:	00c9      	lsls	r1, r1, #3
 8000ee4:	430a      	orrs	r2, r1
 8000ee6:	601a      	str	r2, [r3, #0]
	// Turn off LD2
	GPIOA->BSRR |= LD2_OFF_MSK;
 8000ee8:	2390      	movs	r3, #144	@ 0x90
 8000eea:	05db      	lsls	r3, r3, #23
 8000eec:	699a      	ldr	r2, [r3, #24]
 8000eee:	2390      	movs	r3, #144	@ 0x90
 8000ef0:	05db      	lsls	r3, r3, #23
 8000ef2:	2180      	movs	r1, #128	@ 0x80
 8000ef4:	0389      	lsls	r1, r1, #14
 8000ef6:	430a      	orrs	r2, r1
 8000ef8:	619a      	str	r2, [r3, #24]
	// End of Alex Dean Code

	return 0;
 8000efa:	2300      	movs	r3, #0

}
 8000efc:	0018      	movs	r0, r3
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	46c0      	nop			@ (mov r8, r8)
 8000f04:	40021000 	.word	0x40021000
 8000f08:	fffff3ff 	.word	0xfffff3ff

08000f0c <__NVIC_EnableIRQ>:
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	0002      	movs	r2, r0
 8000f14:	1dfb      	adds	r3, r7, #7
 8000f16:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f18:	1dfb      	adds	r3, r7, #7
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	2b7f      	cmp	r3, #127	@ 0x7f
 8000f1e:	d809      	bhi.n	8000f34 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f20:	1dfb      	adds	r3, r7, #7
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	001a      	movs	r2, r3
 8000f26:	231f      	movs	r3, #31
 8000f28:	401a      	ands	r2, r3
 8000f2a:	4b04      	ldr	r3, [pc, #16]	@ (8000f3c <__NVIC_EnableIRQ+0x30>)
 8000f2c:	2101      	movs	r1, #1
 8000f2e:	4091      	lsls	r1, r2
 8000f30:	000a      	movs	r2, r1
 8000f32:	601a      	str	r2, [r3, #0]
}
 8000f34:	46c0      	nop			@ (mov r8, r8)
 8000f36:	46bd      	mov	sp, r7
 8000f38:	b002      	add	sp, #8
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	e000e100 	.word	0xe000e100

08000f40 <__NVIC_ClearPendingIRQ>:
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	0002      	movs	r2, r0
 8000f48:	1dfb      	adds	r3, r7, #7
 8000f4a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f4c:	1dfb      	adds	r3, r7, #7
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	2b7f      	cmp	r3, #127	@ 0x7f
 8000f52:	d80a      	bhi.n	8000f6a <__NVIC_ClearPendingIRQ+0x2a>
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f54:	1dfb      	adds	r3, r7, #7
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	001a      	movs	r2, r3
 8000f5a:	231f      	movs	r3, #31
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	4905      	ldr	r1, [pc, #20]	@ (8000f74 <__NVIC_ClearPendingIRQ+0x34>)
 8000f60:	2201      	movs	r2, #1
 8000f62:	409a      	lsls	r2, r3
 8000f64:	23c0      	movs	r3, #192	@ 0xc0
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	50ca      	str	r2, [r1, r3]
}
 8000f6a:	46c0      	nop			@ (mov r8, r8)
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	b002      	add	sp, #8
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	46c0      	nop			@ (mov r8, r8)
 8000f74:	e000e100 	.word	0xe000e100

08000f78 <__NVIC_SetPriority>:
{
 8000f78:	b590      	push	{r4, r7, lr}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	0002      	movs	r2, r0
 8000f80:	6039      	str	r1, [r7, #0]
 8000f82:	1dfb      	adds	r3, r7, #7
 8000f84:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f86:	1dfb      	adds	r3, r7, #7
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	2b7f      	cmp	r3, #127	@ 0x7f
 8000f8c:	d828      	bhi.n	8000fe0 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f8e:	4a2f      	ldr	r2, [pc, #188]	@ (800104c <__NVIC_SetPriority+0xd4>)
 8000f90:	1dfb      	adds	r3, r7, #7
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	b25b      	sxtb	r3, r3
 8000f96:	089b      	lsrs	r3, r3, #2
 8000f98:	33c0      	adds	r3, #192	@ 0xc0
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	589b      	ldr	r3, [r3, r2]
 8000f9e:	1dfa      	adds	r2, r7, #7
 8000fa0:	7812      	ldrb	r2, [r2, #0]
 8000fa2:	0011      	movs	r1, r2
 8000fa4:	2203      	movs	r2, #3
 8000fa6:	400a      	ands	r2, r1
 8000fa8:	00d2      	lsls	r2, r2, #3
 8000faa:	21ff      	movs	r1, #255	@ 0xff
 8000fac:	4091      	lsls	r1, r2
 8000fae:	000a      	movs	r2, r1
 8000fb0:	43d2      	mvns	r2, r2
 8000fb2:	401a      	ands	r2, r3
 8000fb4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	019b      	lsls	r3, r3, #6
 8000fba:	22ff      	movs	r2, #255	@ 0xff
 8000fbc:	401a      	ands	r2, r3
 8000fbe:	1dfb      	adds	r3, r7, #7
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	0018      	movs	r0, r3
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	4003      	ands	r3, r0
 8000fc8:	00db      	lsls	r3, r3, #3
 8000fca:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fcc:	481f      	ldr	r0, [pc, #124]	@ (800104c <__NVIC_SetPriority+0xd4>)
 8000fce:	1dfb      	adds	r3, r7, #7
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	b25b      	sxtb	r3, r3
 8000fd4:	089b      	lsrs	r3, r3, #2
 8000fd6:	430a      	orrs	r2, r1
 8000fd8:	33c0      	adds	r3, #192	@ 0xc0
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	501a      	str	r2, [r3, r0]
}
 8000fde:	e031      	b.n	8001044 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fe0:	4a1b      	ldr	r2, [pc, #108]	@ (8001050 <__NVIC_SetPriority+0xd8>)
 8000fe2:	1dfb      	adds	r3, r7, #7
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	0019      	movs	r1, r3
 8000fe8:	230f      	movs	r3, #15
 8000fea:	400b      	ands	r3, r1
 8000fec:	3b08      	subs	r3, #8
 8000fee:	089b      	lsrs	r3, r3, #2
 8000ff0:	3306      	adds	r3, #6
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	18d3      	adds	r3, r2, r3
 8000ff6:	3304      	adds	r3, #4
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	1dfa      	adds	r2, r7, #7
 8000ffc:	7812      	ldrb	r2, [r2, #0]
 8000ffe:	0011      	movs	r1, r2
 8001000:	2203      	movs	r2, #3
 8001002:	400a      	ands	r2, r1
 8001004:	00d2      	lsls	r2, r2, #3
 8001006:	21ff      	movs	r1, #255	@ 0xff
 8001008:	4091      	lsls	r1, r2
 800100a:	000a      	movs	r2, r1
 800100c:	43d2      	mvns	r2, r2
 800100e:	401a      	ands	r2, r3
 8001010:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	019b      	lsls	r3, r3, #6
 8001016:	22ff      	movs	r2, #255	@ 0xff
 8001018:	401a      	ands	r2, r3
 800101a:	1dfb      	adds	r3, r7, #7
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	0018      	movs	r0, r3
 8001020:	2303      	movs	r3, #3
 8001022:	4003      	ands	r3, r0
 8001024:	00db      	lsls	r3, r3, #3
 8001026:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001028:	4809      	ldr	r0, [pc, #36]	@ (8001050 <__NVIC_SetPriority+0xd8>)
 800102a:	1dfb      	adds	r3, r7, #7
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	001c      	movs	r4, r3
 8001030:	230f      	movs	r3, #15
 8001032:	4023      	ands	r3, r4
 8001034:	3b08      	subs	r3, #8
 8001036:	089b      	lsrs	r3, r3, #2
 8001038:	430a      	orrs	r2, r1
 800103a:	3306      	adds	r3, #6
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	18c3      	adds	r3, r0, r3
 8001040:	3304      	adds	r3, #4
 8001042:	601a      	str	r2, [r3, #0]
}
 8001044:	46c0      	nop			@ (mov r8, r8)
 8001046:	46bd      	mov	sp, r7
 8001048:	b003      	add	sp, #12
 800104a:	bd90      	pop	{r4, r7, pc}
 800104c:	e000e100 	.word	0xe000e100
 8001050:	e000ed00 	.word	0xe000ed00

08001054 <usart_init>:
cbfifo tx_cb = {
    .write = 0,
    .read = 0,
    .is_full = 0};

int usart_init() {
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0

    // This code was taken from Alex Dean's Github: https://github.com/alexander-g-dean/ESF.git
    RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8001058:	4b40      	ldr	r3, [pc, #256]	@ (800115c <usart_init+0x108>)
 800105a:	69da      	ldr	r2, [r3, #28]
 800105c:	4b3f      	ldr	r3, [pc, #252]	@ (800115c <usart_init+0x108>)
 800105e:	2180      	movs	r1, #128	@ 0x80
 8001060:	0289      	lsls	r1, r1, #10
 8001062:	430a      	orrs	r2, r1
 8001064:	61da      	str	r2, [r3, #28]
    RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8001066:	4b3d      	ldr	r3, [pc, #244]	@ (800115c <usart_init+0x108>)
 8001068:	695a      	ldr	r2, [r3, #20]
 800106a:	4b3c      	ldr	r3, [pc, #240]	@ (800115c <usart_init+0x108>)
 800106c:	2180      	movs	r1, #128	@ 0x80
 800106e:	0289      	lsls	r1, r1, #10
 8001070:	430a      	orrs	r2, r1
 8001072:	615a      	str	r2, [r3, #20]

    // GPIO A pin 2 and 3 in alternate function 1 (USART2)
    // Set mode field to 2 for alternate function
    MODIFY_FIELD(GPIOA->MODER, GPIO_MODER_MODER2, ESF_GPIO_MODER_ALT_FUNC);
 8001074:	2390      	movs	r3, #144	@ 0x90
 8001076:	05db      	lsls	r3, r3, #23
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	2230      	movs	r2, #48	@ 0x30
 800107c:	4393      	bics	r3, r2
 800107e:	001a      	movs	r2, r3
 8001080:	2390      	movs	r3, #144	@ 0x90
 8001082:	05db      	lsls	r3, r3, #23
 8001084:	2120      	movs	r1, #32
 8001086:	430a      	orrs	r2, r1
 8001088:	601a      	str	r2, [r3, #0]
    MODIFY_FIELD(GPIOA->MODER, GPIO_MODER_MODER3, ESF_GPIO_MODER_ALT_FUNC);
 800108a:	2390      	movs	r3, #144	@ 0x90
 800108c:	05db      	lsls	r3, r3, #23
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	22c0      	movs	r2, #192	@ 0xc0
 8001092:	4393      	bics	r3, r2
 8001094:	001a      	movs	r2, r3
 8001096:	2390      	movs	r3, #144	@ 0x90
 8001098:	05db      	lsls	r3, r3, #23
 800109a:	2180      	movs	r1, #128	@ 0x80
 800109c:	430a      	orrs	r2, r1
 800109e:	601a      	str	r2, [r3, #0]
    // Select USART2 (AF = 1) as alternate function
    MODIFY_FIELD(GPIOA->AFR[0], GPIO_AFRL_AFSEL2, 1);
 80010a0:	2390      	movs	r3, #144	@ 0x90
 80010a2:	05db      	lsls	r3, r3, #23
 80010a4:	6a1b      	ldr	r3, [r3, #32]
 80010a6:	4a2e      	ldr	r2, [pc, #184]	@ (8001160 <usart_init+0x10c>)
 80010a8:	401a      	ands	r2, r3
 80010aa:	2390      	movs	r3, #144	@ 0x90
 80010ac:	05db      	lsls	r3, r3, #23
 80010ae:	2180      	movs	r1, #128	@ 0x80
 80010b0:	0049      	lsls	r1, r1, #1
 80010b2:	430a      	orrs	r2, r1
 80010b4:	621a      	str	r2, [r3, #32]
    MODIFY_FIELD(GPIOA->AFR[0], GPIO_AFRL_AFSEL3, 1);
 80010b6:	2390      	movs	r3, #144	@ 0x90
 80010b8:	05db      	lsls	r3, r3, #23
 80010ba:	6a1b      	ldr	r3, [r3, #32]
 80010bc:	4a29      	ldr	r2, [pc, #164]	@ (8001164 <usart_init+0x110>)
 80010be:	401a      	ands	r2, r3
 80010c0:	2390      	movs	r3, #144	@ 0x90
 80010c2:	05db      	lsls	r3, r3, #23
 80010c4:	2180      	movs	r1, #128	@ 0x80
 80010c6:	0149      	lsls	r1, r1, #5
 80010c8:	430a      	orrs	r2, r1
 80010ca:	621a      	str	r2, [r3, #32]
    // End of Alex Dean Code


    // Set baud rate
    USART2->BRR = USART_BRR;
 80010cc:	4b26      	ldr	r3, [pc, #152]	@ (8001168 <usart_init+0x114>)
 80010ce:	4a27      	ldr	r2, [pc, #156]	@ (800116c <usart_init+0x118>)
 80010d0:	60da      	str	r2, [r3, #12]
    // set M0 and M1 fields based on data size
    MODIFY_FIELD(USART2->CR1, USART_CR1_M, USART_M_VAL);
 80010d2:	4b25      	ldr	r3, [pc, #148]	@ (8001168 <usart_init+0x114>)
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	4b24      	ldr	r3, [pc, #144]	@ (8001168 <usart_init+0x114>)
 80010d8:	4925      	ldr	r1, [pc, #148]	@ (8001170 <usart_init+0x11c>)
 80010da:	400a      	ands	r2, r1
 80010dc:	601a      	str	r2, [r3, #0]
    // Set parity generation and checking
    MODIFY_FIELD(USART2->CR1, USART_CR1_PCE, USART_PCE_VAL);
 80010de:	4b22      	ldr	r3, [pc, #136]	@ (8001168 <usart_init+0x114>)
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	4b21      	ldr	r3, [pc, #132]	@ (8001168 <usart_init+0x114>)
 80010e4:	4923      	ldr	r1, [pc, #140]	@ (8001174 <usart_init+0x120>)
 80010e6:	400a      	ands	r2, r1
 80010e8:	601a      	str	r2, [r3, #0]
    MODIFY_FIELD(USART2->CR1, USART_CR1_PS, USART_PS_VAL);
 80010ea:	4b1f      	ldr	r3, [pc, #124]	@ (8001168 <usart_init+0x114>)
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	4b1e      	ldr	r3, [pc, #120]	@ (8001168 <usart_init+0x114>)
 80010f0:	4921      	ldr	r1, [pc, #132]	@ (8001178 <usart_init+0x124>)
 80010f2:	400a      	ands	r2, r1
 80010f4:	601a      	str	r2, [r3, #0]
    // Number of stop bits
    MODIFY_FIELD(USART2->CR2, USART_CR2_STOP, STOP_BITS);
 80010f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001168 <usart_init+0x114>)
 80010f8:	685a      	ldr	r2, [r3, #4]
 80010fa:	4b1b      	ldr	r3, [pc, #108]	@ (8001168 <usart_init+0x114>)
 80010fc:	491f      	ldr	r1, [pc, #124]	@ (800117c <usart_init+0x128>)
 80010fe:	400a      	ands	r2, r1
 8001100:	605a      	str	r2, [r3, #4]

    // Enable transmitter and receiver and USART
    MODIFY_FIELD(USART2->CR1, USART_CR1_TE, 1);
 8001102:	4b19      	ldr	r3, [pc, #100]	@ (8001168 <usart_init+0x114>)
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	4b18      	ldr	r3, [pc, #96]	@ (8001168 <usart_init+0x114>)
 8001108:	2108      	movs	r1, #8
 800110a:	430a      	orrs	r2, r1
 800110c:	601a      	str	r2, [r3, #0]
    MODIFY_FIELD(USART2->CR1, USART_CR1_RE, 1);
 800110e:	4b16      	ldr	r3, [pc, #88]	@ (8001168 <usart_init+0x114>)
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	4b15      	ldr	r3, [pc, #84]	@ (8001168 <usart_init+0x114>)
 8001114:	2104      	movs	r1, #4
 8001116:	430a      	orrs	r2, r1
 8001118:	601a      	str	r2, [r3, #0]
    MODIFY_FIELD(USART2->CR1, USART_CR1_UE, 1);
 800111a:	4b13      	ldr	r3, [pc, #76]	@ (8001168 <usart_init+0x114>)
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	4b12      	ldr	r3, [pc, #72]	@ (8001168 <usart_init+0x114>)
 8001120:	2101      	movs	r1, #1
 8001122:	430a      	orrs	r2, r1
 8001124:	601a      	str	r2, [r3, #0]

    // Enable RX interrupts
    MODIFY_FIELD(USART2->CR1, USART_CR1_RXNEIE, 1);
 8001126:	4b10      	ldr	r3, [pc, #64]	@ (8001168 <usart_init+0x114>)
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	4b0f      	ldr	r3, [pc, #60]	@ (8001168 <usart_init+0x114>)
 800112c:	2120      	movs	r1, #32
 800112e:	430a      	orrs	r2, r1
 8001130:	601a      	str	r2, [r3, #0]

    // Enable USART2 interrupts in NVIC
    NVIC_SetPriority(USART2_IRQn, 2);
 8001132:	2102      	movs	r1, #2
 8001134:	201c      	movs	r0, #28
 8001136:	f7ff ff1f 	bl	8000f78 <__NVIC_SetPriority>
    NVIC_ClearPendingIRQ(USART2_IRQn);
 800113a:	201c      	movs	r0, #28
 800113c:	f7ff ff00 	bl	8000f40 <__NVIC_ClearPendingIRQ>
    NVIC_EnableIRQ(USART2_IRQn);
 8001140:	201c      	movs	r0, #28
 8001142:	f7ff fee3 	bl	8000f0c <__NVIC_EnableIRQ>

    setbuf(stdout, NULL); // Necessary to remove printf buffering that causes issues
 8001146:	4b0e      	ldr	r3, [pc, #56]	@ (8001180 <usart_init+0x12c>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	689b      	ldr	r3, [r3, #8]
 800114c:	2100      	movs	r1, #0
 800114e:	0018      	movs	r0, r3
 8001150:	f000 fbde 	bl	8001910 <setbuf>

    return 0;
 8001154:	2300      	movs	r3, #0
}
 8001156:	0018      	movs	r0, r3
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	40021000 	.word	0x40021000
 8001160:	fffff0ff 	.word	0xfffff0ff
 8001164:	ffff0fff 	.word	0xffff0fff
 8001168:	40004400 	.word	0x40004400
 800116c:	000009c4 	.word	0x000009c4
 8001170:	efffefff 	.word	0xefffefff
 8001174:	fffffbff 	.word	0xfffffbff
 8001178:	fffffdff 	.word	0xfffffdff
 800117c:	ffffcfff 	.word	0xffffcfff
 8001180:	20000010 	.word	0x20000010

08001184 <USART2_IRQHandler>:

// This code was copied from Alex Dean and modified by Matt Hartnett
void USART2_IRQHandler(void) {
 8001184:	b590      	push	{r4, r7, lr}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
    uint8_t ch;
    if (USART2->ISR & USART_ISR_RXNE) { // Receive buffer not empty
 800118a:	4b1e      	ldr	r3, [pc, #120]	@ (8001204 <USART2_IRQHandler+0x80>)
 800118c:	69db      	ldr	r3, [r3, #28]
 800118e:	2220      	movs	r2, #32
 8001190:	4013      	ands	r3, r2
 8001192:	d017      	beq.n	80011c4 <USART2_IRQHandler+0x40>
        // Reading from RDR will clear RXNE
        ch = USART2->RDR;
 8001194:	4b1b      	ldr	r3, [pc, #108]	@ (8001204 <USART2_IRQHandler+0x80>)
 8001196:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001198:	b29b      	uxth	r3, r3
 800119a:	b2da      	uxtb	r2, r3
 800119c:	1dfb      	adds	r3, r7, #7
 800119e:	701a      	strb	r2, [r3, #0]
        if (cbfifo_length(&rx_cb) != cbfifo_capacity(&rx_cb)) {
 80011a0:	4b19      	ldr	r3, [pc, #100]	@ (8001208 <USART2_IRQHandler+0x84>)
 80011a2:	0018      	movs	r0, r3
 80011a4:	f7ff fb5c 	bl	8000860 <cbfifo_length>
 80011a8:	0004      	movs	r4, r0
 80011aa:	4b17      	ldr	r3, [pc, #92]	@ (8001208 <USART2_IRQHandler+0x84>)
 80011ac:	0018      	movs	r0, r3
 80011ae:	f7ff fb81 	bl	80008b4 <cbfifo_capacity>
 80011b2:	0003      	movs	r3, r0
 80011b4:	429c      	cmp	r4, r3
 80011b6:	d005      	beq.n	80011c4 <USART2_IRQHandler+0x40>
            cbfifo_enqueue(&rx_cb, &ch, sizeof(ch));
 80011b8:	1df9      	adds	r1, r7, #7
 80011ba:	4b13      	ldr	r3, [pc, #76]	@ (8001208 <USART2_IRQHandler+0x84>)
 80011bc:	2201      	movs	r2, #1
 80011be:	0018      	movs	r0, r3
 80011c0:	f7ff fab3 	bl	800072a <cbfifo_enqueue>
        }
    }
    if (USART2->ISR & USART_ISR_TXE) { // Transmit buffer empty
 80011c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001204 <USART2_IRQHandler+0x80>)
 80011c6:	69db      	ldr	r3, [r3, #28]
 80011c8:	2280      	movs	r2, #128	@ 0x80
 80011ca:	4013      	ands	r3, r2
 80011cc:	d016      	beq.n	80011fc <USART2_IRQHandler+0x78>
        // Writing to TDR will clear TXE
        if (cbfifo_length(&tx_cb) != 0) { // More data to send
 80011ce:	4b0f      	ldr	r3, [pc, #60]	@ (800120c <USART2_IRQHandler+0x88>)
 80011d0:	0018      	movs	r0, r3
 80011d2:	f7ff fb45 	bl	8000860 <cbfifo_length>
 80011d6:	1e03      	subs	r3, r0, #0
 80011d8:	d00a      	beq.n	80011f0 <USART2_IRQHandler+0x6c>
            cbfifo_dequeue(&tx_cb, &ch, sizeof(ch));
 80011da:	1df9      	adds	r1, r7, #7
 80011dc:	4b0b      	ldr	r3, [pc, #44]	@ (800120c <USART2_IRQHandler+0x88>)
 80011de:	2201      	movs	r2, #1
 80011e0:	0018      	movs	r0, r3
 80011e2:	f7ff faf5 	bl	80007d0 <cbfifo_dequeue>
            USART2->TDR = ch;
 80011e6:	1dfb      	adds	r3, r7, #7
 80011e8:	781a      	ldrb	r2, [r3, #0]
 80011ea:	4b06      	ldr	r3, [pc, #24]	@ (8001204 <USART2_IRQHandler+0x80>)
 80011ec:	851a      	strh	r2, [r3, #40]	@ 0x28
        } else { // Disable transmitter interrupt
            MODIFY_FIELD(USART2->CR1, USART_CR1_TXEIE, 0);
        }
    }
}
 80011ee:	e005      	b.n	80011fc <USART2_IRQHandler+0x78>
            MODIFY_FIELD(USART2->CR1, USART_CR1_TXEIE, 0);
 80011f0:	4b04      	ldr	r3, [pc, #16]	@ (8001204 <USART2_IRQHandler+0x80>)
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	4b03      	ldr	r3, [pc, #12]	@ (8001204 <USART2_IRQHandler+0x80>)
 80011f6:	2180      	movs	r1, #128	@ 0x80
 80011f8:	438a      	bics	r2, r1
 80011fa:	601a      	str	r2, [r3, #0]
}
 80011fc:	46c0      	nop			@ (mov r8, r8)
 80011fe:	46bd      	mov	sp, r7
 8001200:	b003      	add	sp, #12
 8001202:	bd90      	pop	{r4, r7, pc}
 8001204:	40004400 	.word	0x40004400
 8001208:	20001090 	.word	0x20001090
 800120c:	20001118 	.word	0x20001118

08001210 <usart_transmit>:


void usart_transmit(char *buf, int nbyte) {
 8001210:	b590      	push	{r4, r7, lr}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	6039      	str	r1, [r7, #0]
    while (nbyte > 0) {
 800121a:	e018      	b.n	800124e <usart_transmit+0x3e>
        while (cbfifo_length(&tx_cb) == cbfifo_capacity(&tx_cb))
 800121c:	46c0      	nop			@ (mov r8, r8)
 800121e:	4b12      	ldr	r3, [pc, #72]	@ (8001268 <usart_transmit+0x58>)
 8001220:	0018      	movs	r0, r3
 8001222:	f7ff fb1d 	bl	8000860 <cbfifo_length>
 8001226:	0004      	movs	r4, r0
 8001228:	4b0f      	ldr	r3, [pc, #60]	@ (8001268 <usart_transmit+0x58>)
 800122a:	0018      	movs	r0, r3
 800122c:	f7ff fb42 	bl	80008b4 <cbfifo_capacity>
 8001230:	0003      	movs	r3, r0
 8001232:	429c      	cmp	r4, r3
 8001234:	d0f3      	beq.n	800121e <usart_transmit+0xe>
            ; // Wait until TX CB is not full
        cbfifo_enqueue(&tx_cb, buf, 1);
 8001236:	6879      	ldr	r1, [r7, #4]
 8001238:	4b0b      	ldr	r3, [pc, #44]	@ (8001268 <usart_transmit+0x58>)
 800123a:	2201      	movs	r2, #1
 800123c:	0018      	movs	r0, r3
 800123e:	f7ff fa74 	bl	800072a <cbfifo_enqueue>
        buf++;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	3301      	adds	r3, #1
 8001246:	607b      	str	r3, [r7, #4]
        nbyte--;
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	3b01      	subs	r3, #1
 800124c:	603b      	str	r3, [r7, #0]
    while (nbyte > 0) {
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	2b00      	cmp	r3, #0
 8001252:	dce3      	bgt.n	800121c <usart_transmit+0xc>
    }
    MODIFY_FIELD(USART2->CR1, USART_CR1_TXEIE, 1); // Enable TXE interrupt
 8001254:	4b05      	ldr	r3, [pc, #20]	@ (800126c <usart_transmit+0x5c>)
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	4b04      	ldr	r3, [pc, #16]	@ (800126c <usart_transmit+0x5c>)
 800125a:	2180      	movs	r1, #128	@ 0x80
 800125c:	430a      	orrs	r2, r1
 800125e:	601a      	str	r2, [r3, #0]
}
 8001260:	46c0      	nop			@ (mov r8, r8)
 8001262:	46bd      	mov	sp, r7
 8001264:	b003      	add	sp, #12
 8001266:	bd90      	pop	{r4, r7, pc}
 8001268:	20001118 	.word	0x20001118
 800126c:	40004400 	.word	0x40004400

08001270 <usart_receive_blocking>:

void usart_receive_blocking(char *buf, int num_chars) {
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	6039      	str	r1, [r7, #0]
    // This function gets num_chars, blocking if they aren't all ready yet
    while (num_chars > 0) {
 800127a:	e012      	b.n	80012a2 <usart_receive_blocking+0x32>
        while (cbfifo_length(&rx_cb) == 0) // Block until some data is received
 800127c:	46c0      	nop			@ (mov r8, r8)
 800127e:	4b0d      	ldr	r3, [pc, #52]	@ (80012b4 <usart_receive_blocking+0x44>)
 8001280:	0018      	movs	r0, r3
 8001282:	f7ff faed 	bl	8000860 <cbfifo_length>
 8001286:	1e03      	subs	r3, r0, #0
 8001288:	d0f9      	beq.n	800127e <usart_receive_blocking+0xe>
            ;
        cbfifo_dequeue(&rx_cb, buf, 1);
 800128a:	6879      	ldr	r1, [r7, #4]
 800128c:	4b09      	ldr	r3, [pc, #36]	@ (80012b4 <usart_receive_blocking+0x44>)
 800128e:	2201      	movs	r2, #1
 8001290:	0018      	movs	r0, r3
 8001292:	f7ff fa9d 	bl	80007d0 <cbfifo_dequeue>
        num_chars--; // Got another character
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	3b01      	subs	r3, #1
 800129a:	603b      	str	r3, [r7, #0]
        buf++;       // Advance buffer pointer to space for next character
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	3301      	adds	r3, #1
 80012a0:	607b      	str	r3, [r7, #4]
    while (num_chars > 0) {
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	dce9      	bgt.n	800127c <usart_receive_blocking+0xc>
    }
}
 80012a8:	46c0      	nop			@ (mov r8, r8)
 80012aa:	46c0      	nop			@ (mov r8, r8)
 80012ac:	46bd      	mov	sp, r7
 80012ae:	b002      	add	sp, #8
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	46c0      	nop			@ (mov r8, r8)
 80012b4:	20001090 	.word	0x20001090

080012b8 <__io_putchar>:
    while ((USART2->ISR & USART_ISR_RXNE) == 0)
        ;
    return USART2->RDR;
}

int __io_putchar(int ch) {
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
    char buf = (char)ch;  // Convert int to char for transmission
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	b2da      	uxtb	r2, r3
 80012c4:	210f      	movs	r1, #15
 80012c6:	187b      	adds	r3, r7, r1
 80012c8:	701a      	strb	r2, [r3, #0]
    usart_transmit(&buf, 1);  // Send one character
 80012ca:	187b      	adds	r3, r7, r1
 80012cc:	2101      	movs	r1, #1
 80012ce:	0018      	movs	r0, r3
 80012d0:	f7ff ff9e 	bl	8001210 <usart_transmit>
    return 1;  // Indicate success
 80012d4:	2301      	movs	r3, #1
}
 80012d6:	0018      	movs	r0, r3
 80012d8:	46bd      	mov	sp, r7
 80012da:	b004      	add	sp, #16
 80012dc:	bd80      	pop	{r7, pc}

080012de <__io_getchar>:

int __io_getchar(void) {
 80012de:	b580      	push	{r7, lr}
 80012e0:	b082      	sub	sp, #8
 80012e2:	af00      	add	r7, sp, #0
    char buf;
    usart_receive_blocking(&buf, 1);  // Receive one character in blocking mode
 80012e4:	1dfb      	adds	r3, r7, #7
 80012e6:	2101      	movs	r1, #1
 80012e8:	0018      	movs	r0, r3
 80012ea:	f7ff ffc1 	bl	8001270 <usart_receive_blocking>
    return (int)buf;  // Return the received character
 80012ee:	1dfb      	adds	r3, r7, #7
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	0018      	movs	r0, r3
 80012f4:	46bd      	mov	sp, r7
 80012f6:	b002      	add	sp, #8
 80012f8:	bd80      	pop	{r7, pc}
	...

080012fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80012fc:	480e      	ldr	r0, [pc, #56]	@ (8001338 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80012fe:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001300:	f000 f866 	bl	80013d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001304:	480d      	ldr	r0, [pc, #52]	@ (800133c <LoopForever+0x6>)
  ldr r1, =_edata
 8001306:	490e      	ldr	r1, [pc, #56]	@ (8001340 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001308:	4a0e      	ldr	r2, [pc, #56]	@ (8001344 <LoopForever+0xe>)
  movs r3, #0
 800130a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800130c:	e002      	b.n	8001314 <LoopCopyDataInit>

0800130e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800130e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001310:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001312:	3304      	adds	r3, #4

08001314 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001314:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001316:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001318:	d3f9      	bcc.n	800130e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800131a:	4a0b      	ldr	r2, [pc, #44]	@ (8001348 <LoopForever+0x12>)
  ldr r4, =_ebss
 800131c:	4c0b      	ldr	r4, [pc, #44]	@ (800134c <LoopForever+0x16>)
  movs r3, #0
 800131e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001320:	e001      	b.n	8001326 <LoopFillZerobss>

08001322 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001322:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001324:	3204      	adds	r2, #4

08001326 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001326:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001328:	d3fb      	bcc.n	8001322 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800132a:	f000 fd1d 	bl	8001d68 <__libc_init_array>
/* LP - Update system core clocks */
  bl SystemCoreClockUpdate
 800132e:	f000 f895 	bl	800145c <SystemCoreClockUpdate>
/* Call the application's entry point.*/
  bl main
 8001332:	f7ff fb71 	bl	8000a18 <main>

08001336 <LoopForever>:

LoopForever:
  b LoopForever
 8001336:	e7fe      	b.n	8001336 <LoopForever>
  ldr   r0, =_estack
 8001338:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800133c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001340:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001344:	08002ab8 	.word	0x08002ab8
  ldr r2, =_sbss
 8001348:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800134c:	200012ec 	.word	0x200012ec

08001350 <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001350:	e7fe      	b.n	8001350 <ADC_COMP_IRQHandler>
	...

08001354 <Set_Clocks_To_48MHz>:
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
 8001358:	4b1a      	ldr	r3, [pc, #104]	@ (80013c4 <Set_Clocks_To_48MHz+0x70>)
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	4b19      	ldr	r3, [pc, #100]	@ (80013c4 <Set_Clocks_To_48MHz+0x70>)
 800135e:	2101      	movs	r1, #1
 8001360:	430a      	orrs	r2, r1
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	4b18      	ldr	r3, [pc, #96]	@ (80013c8 <Set_Clocks_To_48MHz+0x74>)
 8001366:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001368:	4b17      	ldr	r3, [pc, #92]	@ (80013c8 <Set_Clocks_To_48MHz+0x74>)
 800136a:	2180      	movs	r1, #128	@ 0x80
 800136c:	0249      	lsls	r1, r1, #9
 800136e:	430a      	orrs	r2, r1
 8001370:	635a      	str	r2, [r3, #52]	@ 0x34
 8001372:	46c0      	nop			@ (mov r8, r8)
 8001374:	4b14      	ldr	r3, [pc, #80]	@ (80013c8 <Set_Clocks_To_48MHz+0x74>)
 8001376:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001378:	2380      	movs	r3, #128	@ 0x80
 800137a:	029b      	lsls	r3, r3, #10
 800137c:	4013      	ands	r3, r2
 800137e:	d0f9      	beq.n	8001374 <Set_Clocks_To_48MHz+0x20>
 8001380:	4b11      	ldr	r3, [pc, #68]	@ (80013c8 <Set_Clocks_To_48MHz+0x74>)
 8001382:	685a      	ldr	r2, [r3, #4]
 8001384:	4b10      	ldr	r3, [pc, #64]	@ (80013c8 <Set_Clocks_To_48MHz+0x74>)
 8001386:	21f0      	movs	r1, #240	@ 0xf0
 8001388:	438a      	bics	r2, r1
 800138a:	605a      	str	r2, [r3, #4]
 800138c:	4b0e      	ldr	r3, [pc, #56]	@ (80013c8 <Set_Clocks_To_48MHz+0x74>)
 800138e:	685a      	ldr	r2, [r3, #4]
 8001390:	4b0d      	ldr	r3, [pc, #52]	@ (80013c8 <Set_Clocks_To_48MHz+0x74>)
 8001392:	2103      	movs	r1, #3
 8001394:	430a      	orrs	r2, r1
 8001396:	605a      	str	r2, [r3, #4]
 8001398:	46c0      	nop			@ (mov r8, r8)
 800139a:	4b0b      	ldr	r3, [pc, #44]	@ (80013c8 <Set_Clocks_To_48MHz+0x74>)
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	089a      	lsrs	r2, r3, #2
 80013a0:	4b09      	ldr	r3, [pc, #36]	@ (80013c8 <Set_Clocks_To_48MHz+0x74>)
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	4053      	eors	r3, r2
 80013a6:	2203      	movs	r2, #3
 80013a8:	4013      	ands	r3, r2
 80013aa:	d1f6      	bne.n	800139a <Set_Clocks_To_48MHz+0x46>
 80013ac:	4b06      	ldr	r3, [pc, #24]	@ (80013c8 <Set_Clocks_To_48MHz+0x74>)
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	4a06      	ldr	r2, [pc, #24]	@ (80013cc <Set_Clocks_To_48MHz+0x78>)
 80013b2:	401a      	ands	r2, r3
 80013b4:	4b04      	ldr	r3, [pc, #16]	@ (80013c8 <Set_Clocks_To_48MHz+0x74>)
 80013b6:	2180      	movs	r1, #128	@ 0x80
 80013b8:	00c9      	lsls	r1, r1, #3
 80013ba:	430a      	orrs	r2, r1
 80013bc:	605a      	str	r2, [r3, #4]
 80013be:	46c0      	nop			@ (mov r8, r8)
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	40022000 	.word	0x40022000
 80013c8:	40021000 	.word	0x40021000
 80013cc:	fffff8ff 	.word	0xfffff8ff

080013d0 <SystemInit>:
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001444 <SystemInit+0x74>)
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001444 <SystemInit+0x74>)
 80013da:	2101      	movs	r1, #1
 80013dc:	430a      	orrs	r2, r1
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	4b18      	ldr	r3, [pc, #96]	@ (8001444 <SystemInit+0x74>)
 80013e2:	685a      	ldr	r2, [r3, #4]
 80013e4:	4b17      	ldr	r3, [pc, #92]	@ (8001444 <SystemInit+0x74>)
 80013e6:	4918      	ldr	r1, [pc, #96]	@ (8001448 <SystemInit+0x78>)
 80013e8:	400a      	ands	r2, r1
 80013ea:	605a      	str	r2, [r3, #4]
 80013ec:	4b15      	ldr	r3, [pc, #84]	@ (8001444 <SystemInit+0x74>)
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	4b14      	ldr	r3, [pc, #80]	@ (8001444 <SystemInit+0x74>)
 80013f2:	4916      	ldr	r1, [pc, #88]	@ (800144c <SystemInit+0x7c>)
 80013f4:	400a      	ands	r2, r1
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	4b12      	ldr	r3, [pc, #72]	@ (8001444 <SystemInit+0x74>)
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	4b11      	ldr	r3, [pc, #68]	@ (8001444 <SystemInit+0x74>)
 80013fe:	4914      	ldr	r1, [pc, #80]	@ (8001450 <SystemInit+0x80>)
 8001400:	400a      	ands	r2, r1
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	4b0f      	ldr	r3, [pc, #60]	@ (8001444 <SystemInit+0x74>)
 8001406:	685a      	ldr	r2, [r3, #4]
 8001408:	4b0e      	ldr	r3, [pc, #56]	@ (8001444 <SystemInit+0x74>)
 800140a:	4912      	ldr	r1, [pc, #72]	@ (8001454 <SystemInit+0x84>)
 800140c:	400a      	ands	r2, r1
 800140e:	605a      	str	r2, [r3, #4]
 8001410:	4b0c      	ldr	r3, [pc, #48]	@ (8001444 <SystemInit+0x74>)
 8001412:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001414:	4b0b      	ldr	r3, [pc, #44]	@ (8001444 <SystemInit+0x74>)
 8001416:	210f      	movs	r1, #15
 8001418:	438a      	bics	r2, r1
 800141a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800141c:	4b09      	ldr	r3, [pc, #36]	@ (8001444 <SystemInit+0x74>)
 800141e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001420:	4b08      	ldr	r3, [pc, #32]	@ (8001444 <SystemInit+0x74>)
 8001422:	490d      	ldr	r1, [pc, #52]	@ (8001458 <SystemInit+0x88>)
 8001424:	400a      	ands	r2, r1
 8001426:	631a      	str	r2, [r3, #48]	@ 0x30
 8001428:	4b06      	ldr	r3, [pc, #24]	@ (8001444 <SystemInit+0x74>)
 800142a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800142c:	4b05      	ldr	r3, [pc, #20]	@ (8001444 <SystemInit+0x74>)
 800142e:	2101      	movs	r1, #1
 8001430:	438a      	bics	r2, r1
 8001432:	635a      	str	r2, [r3, #52]	@ 0x34
 8001434:	4b03      	ldr	r3, [pc, #12]	@ (8001444 <SystemInit+0x74>)
 8001436:	2200      	movs	r2, #0
 8001438:	609a      	str	r2, [r3, #8]
 800143a:	f7ff ff8b 	bl	8001354 <Set_Clocks_To_48MHz>
 800143e:	46c0      	nop			@ (mov r8, r8)
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	40021000 	.word	0x40021000
 8001448:	08ffb80c 	.word	0x08ffb80c
 800144c:	fef6ffff 	.word	0xfef6ffff
 8001450:	fffbffff 	.word	0xfffbffff
 8001454:	ffc0ffff 	.word	0xffc0ffff
 8001458:	fff0feac 	.word	0xfff0feac

0800145c <SystemCoreClockUpdate>:
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	2300      	movs	r3, #0
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	2300      	movs	r3, #0
 8001468:	60bb      	str	r3, [r7, #8]
 800146a:	2300      	movs	r3, #0
 800146c:	607b      	str	r3, [r7, #4]
 800146e:	2300      	movs	r3, #0
 8001470:	603b      	str	r3, [r7, #0]
 8001472:	4b3d      	ldr	r3, [pc, #244]	@ (8001568 <SystemCoreClockUpdate+0x10c>)
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	220c      	movs	r2, #12
 8001478:	4013      	ands	r3, r2
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	2b0c      	cmp	r3, #12
 8001480:	d00f      	beq.n	80014a2 <SystemCoreClockUpdate+0x46>
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	2b0c      	cmp	r3, #12
 8001486:	d859      	bhi.n	800153c <SystemCoreClockUpdate+0xe0>
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	2b08      	cmp	r3, #8
 800148c:	d015      	beq.n	80014ba <SystemCoreClockUpdate+0x5e>
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	2b08      	cmp	r3, #8
 8001492:	d853      	bhi.n	800153c <SystemCoreClockUpdate+0xe0>
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d007      	beq.n	80014aa <SystemCoreClockUpdate+0x4e>
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	2b04      	cmp	r3, #4
 800149e:	d008      	beq.n	80014b2 <SystemCoreClockUpdate+0x56>
 80014a0:	e04c      	b.n	800153c <SystemCoreClockUpdate+0xe0>
 80014a2:	4b32      	ldr	r3, [pc, #200]	@ (800156c <SystemCoreClockUpdate+0x110>)
 80014a4:	4a32      	ldr	r2, [pc, #200]	@ (8001570 <SystemCoreClockUpdate+0x114>)
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	e04c      	b.n	8001544 <SystemCoreClockUpdate+0xe8>
 80014aa:	4b30      	ldr	r3, [pc, #192]	@ (800156c <SystemCoreClockUpdate+0x110>)
 80014ac:	4a31      	ldr	r2, [pc, #196]	@ (8001574 <SystemCoreClockUpdate+0x118>)
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	e048      	b.n	8001544 <SystemCoreClockUpdate+0xe8>
 80014b2:	4b2e      	ldr	r3, [pc, #184]	@ (800156c <SystemCoreClockUpdate+0x110>)
 80014b4:	4a2f      	ldr	r2, [pc, #188]	@ (8001574 <SystemCoreClockUpdate+0x118>)
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	e044      	b.n	8001544 <SystemCoreClockUpdate+0xe8>
 80014ba:	4b2b      	ldr	r3, [pc, #172]	@ (8001568 <SystemCoreClockUpdate+0x10c>)
 80014bc:	685a      	ldr	r2, [r3, #4]
 80014be:	23f0      	movs	r3, #240	@ 0xf0
 80014c0:	039b      	lsls	r3, r3, #14
 80014c2:	4013      	ands	r3, r2
 80014c4:	60bb      	str	r3, [r7, #8]
 80014c6:	4b28      	ldr	r3, [pc, #160]	@ (8001568 <SystemCoreClockUpdate+0x10c>)
 80014c8:	685a      	ldr	r2, [r3, #4]
 80014ca:	23c0      	movs	r3, #192	@ 0xc0
 80014cc:	025b      	lsls	r3, r3, #9
 80014ce:	4013      	ands	r3, r2
 80014d0:	607b      	str	r3, [r7, #4]
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	0c9b      	lsrs	r3, r3, #18
 80014d6:	3302      	adds	r3, #2
 80014d8:	60bb      	str	r3, [r7, #8]
 80014da:	4b23      	ldr	r3, [pc, #140]	@ (8001568 <SystemCoreClockUpdate+0x10c>)
 80014dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014de:	220f      	movs	r2, #15
 80014e0:	4013      	ands	r3, r2
 80014e2:	3301      	adds	r3, #1
 80014e4:	603b      	str	r3, [r7, #0]
 80014e6:	687a      	ldr	r2, [r7, #4]
 80014e8:	2380      	movs	r3, #128	@ 0x80
 80014ea:	025b      	lsls	r3, r3, #9
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d10a      	bne.n	8001506 <SystemCoreClockUpdate+0xaa>
 80014f0:	6839      	ldr	r1, [r7, #0]
 80014f2:	4820      	ldr	r0, [pc, #128]	@ (8001574 <SystemCoreClockUpdate+0x118>)
 80014f4:	f7fe fe12 	bl	800011c <__udivsi3>
 80014f8:	0003      	movs	r3, r0
 80014fa:	001a      	movs	r2, r3
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	435a      	muls	r2, r3
 8001500:	4b1a      	ldr	r3, [pc, #104]	@ (800156c <SystemCoreClockUpdate+0x110>)
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	e01e      	b.n	8001544 <SystemCoreClockUpdate+0xe8>
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	23c0      	movs	r3, #192	@ 0xc0
 800150a:	025b      	lsls	r3, r3, #9
 800150c:	429a      	cmp	r2, r3
 800150e:	d10a      	bne.n	8001526 <SystemCoreClockUpdate+0xca>
 8001510:	6839      	ldr	r1, [r7, #0]
 8001512:	4817      	ldr	r0, [pc, #92]	@ (8001570 <SystemCoreClockUpdate+0x114>)
 8001514:	f7fe fe02 	bl	800011c <__udivsi3>
 8001518:	0003      	movs	r3, r0
 800151a:	001a      	movs	r2, r3
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	435a      	muls	r2, r3
 8001520:	4b12      	ldr	r3, [pc, #72]	@ (800156c <SystemCoreClockUpdate+0x110>)
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	e00e      	b.n	8001544 <SystemCoreClockUpdate+0xe8>
 8001526:	6839      	ldr	r1, [r7, #0]
 8001528:	4812      	ldr	r0, [pc, #72]	@ (8001574 <SystemCoreClockUpdate+0x118>)
 800152a:	f7fe fdf7 	bl	800011c <__udivsi3>
 800152e:	0003      	movs	r3, r0
 8001530:	001a      	movs	r2, r3
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	435a      	muls	r2, r3
 8001536:	4b0d      	ldr	r3, [pc, #52]	@ (800156c <SystemCoreClockUpdate+0x110>)
 8001538:	601a      	str	r2, [r3, #0]
 800153a:	e003      	b.n	8001544 <SystemCoreClockUpdate+0xe8>
 800153c:	4b0b      	ldr	r3, [pc, #44]	@ (800156c <SystemCoreClockUpdate+0x110>)
 800153e:	4a0d      	ldr	r2, [pc, #52]	@ (8001574 <SystemCoreClockUpdate+0x118>)
 8001540:	601a      	str	r2, [r3, #0]
 8001542:	46c0      	nop			@ (mov r8, r8)
 8001544:	4b08      	ldr	r3, [pc, #32]	@ (8001568 <SystemCoreClockUpdate+0x10c>)
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	091b      	lsrs	r3, r3, #4
 800154a:	220f      	movs	r2, #15
 800154c:	4013      	ands	r3, r2
 800154e:	4a0a      	ldr	r2, [pc, #40]	@ (8001578 <SystemCoreClockUpdate+0x11c>)
 8001550:	5cd3      	ldrb	r3, [r2, r3]
 8001552:	60fb      	str	r3, [r7, #12]
 8001554:	4b05      	ldr	r3, [pc, #20]	@ (800156c <SystemCoreClockUpdate+0x110>)
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	40da      	lsrs	r2, r3
 800155c:	4b03      	ldr	r3, [pc, #12]	@ (800156c <SystemCoreClockUpdate+0x110>)
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	46c0      	nop			@ (mov r8, r8)
 8001562:	46bd      	mov	sp, r7
 8001564:	b004      	add	sp, #16
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40021000 	.word	0x40021000
 800156c:	20000000 	.word	0x20000000
 8001570:	02dc6c00 	.word	0x02dc6c00
 8001574:	007a1200 	.word	0x007a1200
 8001578:	0800296c 	.word	0x0800296c

0800157c <_strtol_l.constprop.0>:
 800157c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800157e:	b085      	sub	sp, #20
 8001580:	0017      	movs	r7, r2
 8001582:	001e      	movs	r6, r3
 8001584:	9003      	str	r0, [sp, #12]
 8001586:	9101      	str	r1, [sp, #4]
 8001588:	2b24      	cmp	r3, #36	@ 0x24
 800158a:	d844      	bhi.n	8001616 <_strtol_l.constprop.0+0x9a>
 800158c:	000c      	movs	r4, r1
 800158e:	2b01      	cmp	r3, #1
 8001590:	d041      	beq.n	8001616 <_strtol_l.constprop.0+0x9a>
 8001592:	4b3d      	ldr	r3, [pc, #244]	@ (8001688 <_strtol_l.constprop.0+0x10c>)
 8001594:	2208      	movs	r2, #8
 8001596:	469c      	mov	ip, r3
 8001598:	0023      	movs	r3, r4
 800159a:	4661      	mov	r1, ip
 800159c:	781d      	ldrb	r5, [r3, #0]
 800159e:	3401      	adds	r4, #1
 80015a0:	5d48      	ldrb	r0, [r1, r5]
 80015a2:	0001      	movs	r1, r0
 80015a4:	4011      	ands	r1, r2
 80015a6:	4210      	tst	r0, r2
 80015a8:	d1f6      	bne.n	8001598 <_strtol_l.constprop.0+0x1c>
 80015aa:	2d2d      	cmp	r5, #45	@ 0x2d
 80015ac:	d13a      	bne.n	8001624 <_strtol_l.constprop.0+0xa8>
 80015ae:	7825      	ldrb	r5, [r4, #0]
 80015b0:	1c9c      	adds	r4, r3, #2
 80015b2:	2301      	movs	r3, #1
 80015b4:	9300      	str	r3, [sp, #0]
 80015b6:	2210      	movs	r2, #16
 80015b8:	0033      	movs	r3, r6
 80015ba:	4393      	bics	r3, r2
 80015bc:	d109      	bne.n	80015d2 <_strtol_l.constprop.0+0x56>
 80015be:	2d30      	cmp	r5, #48	@ 0x30
 80015c0:	d136      	bne.n	8001630 <_strtol_l.constprop.0+0xb4>
 80015c2:	2120      	movs	r1, #32
 80015c4:	7823      	ldrb	r3, [r4, #0]
 80015c6:	438b      	bics	r3, r1
 80015c8:	2b58      	cmp	r3, #88	@ 0x58
 80015ca:	d131      	bne.n	8001630 <_strtol_l.constprop.0+0xb4>
 80015cc:	0016      	movs	r6, r2
 80015ce:	7865      	ldrb	r5, [r4, #1]
 80015d0:	3402      	adds	r4, #2
 80015d2:	4a2e      	ldr	r2, [pc, #184]	@ (800168c <_strtol_l.constprop.0+0x110>)
 80015d4:	9b00      	ldr	r3, [sp, #0]
 80015d6:	4694      	mov	ip, r2
 80015d8:	4463      	add	r3, ip
 80015da:	0031      	movs	r1, r6
 80015dc:	0018      	movs	r0, r3
 80015de:	9302      	str	r3, [sp, #8]
 80015e0:	f7fe fe22 	bl	8000228 <__aeabi_uidivmod>
 80015e4:	2200      	movs	r2, #0
 80015e6:	4684      	mov	ip, r0
 80015e8:	0010      	movs	r0, r2
 80015ea:	002b      	movs	r3, r5
 80015ec:	3b30      	subs	r3, #48	@ 0x30
 80015ee:	2b09      	cmp	r3, #9
 80015f0:	d825      	bhi.n	800163e <_strtol_l.constprop.0+0xc2>
 80015f2:	001d      	movs	r5, r3
 80015f4:	42ae      	cmp	r6, r5
 80015f6:	dd31      	ble.n	800165c <_strtol_l.constprop.0+0xe0>
 80015f8:	1c53      	adds	r3, r2, #1
 80015fa:	d009      	beq.n	8001610 <_strtol_l.constprop.0+0x94>
 80015fc:	2201      	movs	r2, #1
 80015fe:	4252      	negs	r2, r2
 8001600:	4584      	cmp	ip, r0
 8001602:	d305      	bcc.n	8001610 <_strtol_l.constprop.0+0x94>
 8001604:	d101      	bne.n	800160a <_strtol_l.constprop.0+0x8e>
 8001606:	42a9      	cmp	r1, r5
 8001608:	db25      	blt.n	8001656 <_strtol_l.constprop.0+0xda>
 800160a:	2201      	movs	r2, #1
 800160c:	4370      	muls	r0, r6
 800160e:	1828      	adds	r0, r5, r0
 8001610:	7825      	ldrb	r5, [r4, #0]
 8001612:	3401      	adds	r4, #1
 8001614:	e7e9      	b.n	80015ea <_strtol_l.constprop.0+0x6e>
 8001616:	f000 fba1 	bl	8001d5c <__errno>
 800161a:	2316      	movs	r3, #22
 800161c:	6003      	str	r3, [r0, #0]
 800161e:	2000      	movs	r0, #0
 8001620:	b005      	add	sp, #20
 8001622:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001624:	9100      	str	r1, [sp, #0]
 8001626:	2d2b      	cmp	r5, #43	@ 0x2b
 8001628:	d1c5      	bne.n	80015b6 <_strtol_l.constprop.0+0x3a>
 800162a:	7825      	ldrb	r5, [r4, #0]
 800162c:	1c9c      	adds	r4, r3, #2
 800162e:	e7c2      	b.n	80015b6 <_strtol_l.constprop.0+0x3a>
 8001630:	2e00      	cmp	r6, #0
 8001632:	d1ce      	bne.n	80015d2 <_strtol_l.constprop.0+0x56>
 8001634:	3608      	adds	r6, #8
 8001636:	2d30      	cmp	r5, #48	@ 0x30
 8001638:	d0cb      	beq.n	80015d2 <_strtol_l.constprop.0+0x56>
 800163a:	3602      	adds	r6, #2
 800163c:	e7c9      	b.n	80015d2 <_strtol_l.constprop.0+0x56>
 800163e:	002b      	movs	r3, r5
 8001640:	3b41      	subs	r3, #65	@ 0x41
 8001642:	2b19      	cmp	r3, #25
 8001644:	d801      	bhi.n	800164a <_strtol_l.constprop.0+0xce>
 8001646:	3d37      	subs	r5, #55	@ 0x37
 8001648:	e7d4      	b.n	80015f4 <_strtol_l.constprop.0+0x78>
 800164a:	002b      	movs	r3, r5
 800164c:	3b61      	subs	r3, #97	@ 0x61
 800164e:	2b19      	cmp	r3, #25
 8001650:	d804      	bhi.n	800165c <_strtol_l.constprop.0+0xe0>
 8001652:	3d57      	subs	r5, #87	@ 0x57
 8001654:	e7ce      	b.n	80015f4 <_strtol_l.constprop.0+0x78>
 8001656:	2201      	movs	r2, #1
 8001658:	4252      	negs	r2, r2
 800165a:	e7d9      	b.n	8001610 <_strtol_l.constprop.0+0x94>
 800165c:	1c53      	adds	r3, r2, #1
 800165e:	d108      	bne.n	8001672 <_strtol_l.constprop.0+0xf6>
 8001660:	2322      	movs	r3, #34	@ 0x22
 8001662:	9a03      	ldr	r2, [sp, #12]
 8001664:	9802      	ldr	r0, [sp, #8]
 8001666:	6013      	str	r3, [r2, #0]
 8001668:	2f00      	cmp	r7, #0
 800166a:	d0d9      	beq.n	8001620 <_strtol_l.constprop.0+0xa4>
 800166c:	1e63      	subs	r3, r4, #1
 800166e:	9301      	str	r3, [sp, #4]
 8001670:	e007      	b.n	8001682 <_strtol_l.constprop.0+0x106>
 8001672:	9b00      	ldr	r3, [sp, #0]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d000      	beq.n	800167a <_strtol_l.constprop.0+0xfe>
 8001678:	4240      	negs	r0, r0
 800167a:	2f00      	cmp	r7, #0
 800167c:	d0d0      	beq.n	8001620 <_strtol_l.constprop.0+0xa4>
 800167e:	2a00      	cmp	r2, #0
 8001680:	d1f4      	bne.n	800166c <_strtol_l.constprop.0+0xf0>
 8001682:	9b01      	ldr	r3, [sp, #4]
 8001684:	603b      	str	r3, [r7, #0]
 8001686:	e7cb      	b.n	8001620 <_strtol_l.constprop.0+0xa4>
 8001688:	0800297d 	.word	0x0800297d
 800168c:	7fffffff 	.word	0x7fffffff

08001690 <strtol>:
 8001690:	b510      	push	{r4, lr}
 8001692:	4c04      	ldr	r4, [pc, #16]	@ (80016a4 <strtol+0x14>)
 8001694:	0013      	movs	r3, r2
 8001696:	000a      	movs	r2, r1
 8001698:	0001      	movs	r1, r0
 800169a:	6820      	ldr	r0, [r4, #0]
 800169c:	f7ff ff6e 	bl	800157c <_strtol_l.constprop.0>
 80016a0:	bd10      	pop	{r4, pc}
 80016a2:	46c0      	nop			@ (mov r8, r8)
 80016a4:	20000010 	.word	0x20000010

080016a8 <std>:
 80016a8:	2300      	movs	r3, #0
 80016aa:	b510      	push	{r4, lr}
 80016ac:	0004      	movs	r4, r0
 80016ae:	6003      	str	r3, [r0, #0]
 80016b0:	6043      	str	r3, [r0, #4]
 80016b2:	6083      	str	r3, [r0, #8]
 80016b4:	8181      	strh	r1, [r0, #12]
 80016b6:	6643      	str	r3, [r0, #100]	@ 0x64
 80016b8:	81c2      	strh	r2, [r0, #14]
 80016ba:	6103      	str	r3, [r0, #16]
 80016bc:	6143      	str	r3, [r0, #20]
 80016be:	6183      	str	r3, [r0, #24]
 80016c0:	0019      	movs	r1, r3
 80016c2:	2208      	movs	r2, #8
 80016c4:	305c      	adds	r0, #92	@ 0x5c
 80016c6:	f000 facf 	bl	8001c68 <memset>
 80016ca:	4b0b      	ldr	r3, [pc, #44]	@ (80016f8 <std+0x50>)
 80016cc:	6224      	str	r4, [r4, #32]
 80016ce:	6263      	str	r3, [r4, #36]	@ 0x24
 80016d0:	4b0a      	ldr	r3, [pc, #40]	@ (80016fc <std+0x54>)
 80016d2:	62a3      	str	r3, [r4, #40]	@ 0x28
 80016d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001700 <std+0x58>)
 80016d6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80016d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001704 <std+0x5c>)
 80016da:	6323      	str	r3, [r4, #48]	@ 0x30
 80016dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001708 <std+0x60>)
 80016de:	429c      	cmp	r4, r3
 80016e0:	d005      	beq.n	80016ee <std+0x46>
 80016e2:	4b0a      	ldr	r3, [pc, #40]	@ (800170c <std+0x64>)
 80016e4:	429c      	cmp	r4, r3
 80016e6:	d002      	beq.n	80016ee <std+0x46>
 80016e8:	4b09      	ldr	r3, [pc, #36]	@ (8001710 <std+0x68>)
 80016ea:	429c      	cmp	r4, r3
 80016ec:	d103      	bne.n	80016f6 <std+0x4e>
 80016ee:	0020      	movs	r0, r4
 80016f0:	3058      	adds	r0, #88	@ 0x58
 80016f2:	f000 fb5d 	bl	8001db0 <__retarget_lock_init_recursive>
 80016f6:	bd10      	pop	{r4, pc}
 80016f8:	08001a91 	.word	0x08001a91
 80016fc:	08001ab9 	.word	0x08001ab9
 8001700:	08001af1 	.word	0x08001af1
 8001704:	08001b1d 	.word	0x08001b1d
 8001708:	200011a0 	.word	0x200011a0
 800170c:	20001208 	.word	0x20001208
 8001710:	20001270 	.word	0x20001270

08001714 <stdio_exit_handler>:
 8001714:	b510      	push	{r4, lr}
 8001716:	4a03      	ldr	r2, [pc, #12]	@ (8001724 <stdio_exit_handler+0x10>)
 8001718:	4903      	ldr	r1, [pc, #12]	@ (8001728 <stdio_exit_handler+0x14>)
 800171a:	4804      	ldr	r0, [pc, #16]	@ (800172c <stdio_exit_handler+0x18>)
 800171c:	f000 f86c 	bl	80017f8 <_fwalk_sglue>
 8001720:	bd10      	pop	{r4, pc}
 8001722:	46c0      	nop			@ (mov r8, r8)
 8001724:	20000004 	.word	0x20000004
 8001728:	08002655 	.word	0x08002655
 800172c:	20000014 	.word	0x20000014

08001730 <cleanup_stdio>:
 8001730:	6841      	ldr	r1, [r0, #4]
 8001732:	4b0b      	ldr	r3, [pc, #44]	@ (8001760 <cleanup_stdio+0x30>)
 8001734:	b510      	push	{r4, lr}
 8001736:	0004      	movs	r4, r0
 8001738:	4299      	cmp	r1, r3
 800173a:	d001      	beq.n	8001740 <cleanup_stdio+0x10>
 800173c:	f000 ff8a 	bl	8002654 <_fflush_r>
 8001740:	68a1      	ldr	r1, [r4, #8]
 8001742:	4b08      	ldr	r3, [pc, #32]	@ (8001764 <cleanup_stdio+0x34>)
 8001744:	4299      	cmp	r1, r3
 8001746:	d002      	beq.n	800174e <cleanup_stdio+0x1e>
 8001748:	0020      	movs	r0, r4
 800174a:	f000 ff83 	bl	8002654 <_fflush_r>
 800174e:	68e1      	ldr	r1, [r4, #12]
 8001750:	4b05      	ldr	r3, [pc, #20]	@ (8001768 <cleanup_stdio+0x38>)
 8001752:	4299      	cmp	r1, r3
 8001754:	d002      	beq.n	800175c <cleanup_stdio+0x2c>
 8001756:	0020      	movs	r0, r4
 8001758:	f000 ff7c 	bl	8002654 <_fflush_r>
 800175c:	bd10      	pop	{r4, pc}
 800175e:	46c0      	nop			@ (mov r8, r8)
 8001760:	200011a0 	.word	0x200011a0
 8001764:	20001208 	.word	0x20001208
 8001768:	20001270 	.word	0x20001270

0800176c <global_stdio_init.part.0>:
 800176c:	b510      	push	{r4, lr}
 800176e:	4b09      	ldr	r3, [pc, #36]	@ (8001794 <global_stdio_init.part.0+0x28>)
 8001770:	4a09      	ldr	r2, [pc, #36]	@ (8001798 <global_stdio_init.part.0+0x2c>)
 8001772:	2104      	movs	r1, #4
 8001774:	601a      	str	r2, [r3, #0]
 8001776:	4809      	ldr	r0, [pc, #36]	@ (800179c <global_stdio_init.part.0+0x30>)
 8001778:	2200      	movs	r2, #0
 800177a:	f7ff ff95 	bl	80016a8 <std>
 800177e:	2201      	movs	r2, #1
 8001780:	2109      	movs	r1, #9
 8001782:	4807      	ldr	r0, [pc, #28]	@ (80017a0 <global_stdio_init.part.0+0x34>)
 8001784:	f7ff ff90 	bl	80016a8 <std>
 8001788:	2202      	movs	r2, #2
 800178a:	2112      	movs	r1, #18
 800178c:	4805      	ldr	r0, [pc, #20]	@ (80017a4 <global_stdio_init.part.0+0x38>)
 800178e:	f7ff ff8b 	bl	80016a8 <std>
 8001792:	bd10      	pop	{r4, pc}
 8001794:	200012d8 	.word	0x200012d8
 8001798:	08001715 	.word	0x08001715
 800179c:	200011a0 	.word	0x200011a0
 80017a0:	20001208 	.word	0x20001208
 80017a4:	20001270 	.word	0x20001270

080017a8 <__sfp_lock_acquire>:
 80017a8:	b510      	push	{r4, lr}
 80017aa:	4802      	ldr	r0, [pc, #8]	@ (80017b4 <__sfp_lock_acquire+0xc>)
 80017ac:	f000 fb01 	bl	8001db2 <__retarget_lock_acquire_recursive>
 80017b0:	bd10      	pop	{r4, pc}
 80017b2:	46c0      	nop			@ (mov r8, r8)
 80017b4:	200012e1 	.word	0x200012e1

080017b8 <__sfp_lock_release>:
 80017b8:	b510      	push	{r4, lr}
 80017ba:	4802      	ldr	r0, [pc, #8]	@ (80017c4 <__sfp_lock_release+0xc>)
 80017bc:	f000 fafa 	bl	8001db4 <__retarget_lock_release_recursive>
 80017c0:	bd10      	pop	{r4, pc}
 80017c2:	46c0      	nop			@ (mov r8, r8)
 80017c4:	200012e1 	.word	0x200012e1

080017c8 <__sinit>:
 80017c8:	b510      	push	{r4, lr}
 80017ca:	0004      	movs	r4, r0
 80017cc:	f7ff ffec 	bl	80017a8 <__sfp_lock_acquire>
 80017d0:	6a23      	ldr	r3, [r4, #32]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d002      	beq.n	80017dc <__sinit+0x14>
 80017d6:	f7ff ffef 	bl	80017b8 <__sfp_lock_release>
 80017da:	bd10      	pop	{r4, pc}
 80017dc:	4b04      	ldr	r3, [pc, #16]	@ (80017f0 <__sinit+0x28>)
 80017de:	6223      	str	r3, [r4, #32]
 80017e0:	4b04      	ldr	r3, [pc, #16]	@ (80017f4 <__sinit+0x2c>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d1f6      	bne.n	80017d6 <__sinit+0xe>
 80017e8:	f7ff ffc0 	bl	800176c <global_stdio_init.part.0>
 80017ec:	e7f3      	b.n	80017d6 <__sinit+0xe>
 80017ee:	46c0      	nop			@ (mov r8, r8)
 80017f0:	08001731 	.word	0x08001731
 80017f4:	200012d8 	.word	0x200012d8

080017f8 <_fwalk_sglue>:
 80017f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80017fa:	0014      	movs	r4, r2
 80017fc:	2600      	movs	r6, #0
 80017fe:	9000      	str	r0, [sp, #0]
 8001800:	9101      	str	r1, [sp, #4]
 8001802:	68a5      	ldr	r5, [r4, #8]
 8001804:	6867      	ldr	r7, [r4, #4]
 8001806:	3f01      	subs	r7, #1
 8001808:	d504      	bpl.n	8001814 <_fwalk_sglue+0x1c>
 800180a:	6824      	ldr	r4, [r4, #0]
 800180c:	2c00      	cmp	r4, #0
 800180e:	d1f8      	bne.n	8001802 <_fwalk_sglue+0xa>
 8001810:	0030      	movs	r0, r6
 8001812:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001814:	89ab      	ldrh	r3, [r5, #12]
 8001816:	2b01      	cmp	r3, #1
 8001818:	d908      	bls.n	800182c <_fwalk_sglue+0x34>
 800181a:	220e      	movs	r2, #14
 800181c:	5eab      	ldrsh	r3, [r5, r2]
 800181e:	3301      	adds	r3, #1
 8001820:	d004      	beq.n	800182c <_fwalk_sglue+0x34>
 8001822:	0029      	movs	r1, r5
 8001824:	9800      	ldr	r0, [sp, #0]
 8001826:	9b01      	ldr	r3, [sp, #4]
 8001828:	4798      	blx	r3
 800182a:	4306      	orrs	r6, r0
 800182c:	3568      	adds	r5, #104	@ 0x68
 800182e:	e7ea      	b.n	8001806 <_fwalk_sglue+0xe>

08001830 <iprintf>:
 8001830:	b40f      	push	{r0, r1, r2, r3}
 8001832:	b507      	push	{r0, r1, r2, lr}
 8001834:	4905      	ldr	r1, [pc, #20]	@ (800184c <iprintf+0x1c>)
 8001836:	ab04      	add	r3, sp, #16
 8001838:	6808      	ldr	r0, [r1, #0]
 800183a:	cb04      	ldmia	r3!, {r2}
 800183c:	6881      	ldr	r1, [r0, #8]
 800183e:	9301      	str	r3, [sp, #4]
 8001840:	f000 fbe8 	bl	8002014 <_vfiprintf_r>
 8001844:	b003      	add	sp, #12
 8001846:	bc08      	pop	{r3}
 8001848:	b004      	add	sp, #16
 800184a:	4718      	bx	r3
 800184c:	20000010 	.word	0x20000010

08001850 <_puts_r>:
 8001850:	6a03      	ldr	r3, [r0, #32]
 8001852:	b570      	push	{r4, r5, r6, lr}
 8001854:	0005      	movs	r5, r0
 8001856:	000e      	movs	r6, r1
 8001858:	6884      	ldr	r4, [r0, #8]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d101      	bne.n	8001862 <_puts_r+0x12>
 800185e:	f7ff ffb3 	bl	80017c8 <__sinit>
 8001862:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001864:	07db      	lsls	r3, r3, #31
 8001866:	d405      	bmi.n	8001874 <_puts_r+0x24>
 8001868:	89a3      	ldrh	r3, [r4, #12]
 800186a:	059b      	lsls	r3, r3, #22
 800186c:	d402      	bmi.n	8001874 <_puts_r+0x24>
 800186e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001870:	f000 fa9f 	bl	8001db2 <__retarget_lock_acquire_recursive>
 8001874:	89a3      	ldrh	r3, [r4, #12]
 8001876:	071b      	lsls	r3, r3, #28
 8001878:	d502      	bpl.n	8001880 <_puts_r+0x30>
 800187a:	6923      	ldr	r3, [r4, #16]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d11f      	bne.n	80018c0 <_puts_r+0x70>
 8001880:	0021      	movs	r1, r4
 8001882:	0028      	movs	r0, r5
 8001884:	f000 f992 	bl	8001bac <__swsetup_r>
 8001888:	2800      	cmp	r0, #0
 800188a:	d019      	beq.n	80018c0 <_puts_r+0x70>
 800188c:	2501      	movs	r5, #1
 800188e:	426d      	negs	r5, r5
 8001890:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001892:	07db      	lsls	r3, r3, #31
 8001894:	d405      	bmi.n	80018a2 <_puts_r+0x52>
 8001896:	89a3      	ldrh	r3, [r4, #12]
 8001898:	059b      	lsls	r3, r3, #22
 800189a:	d402      	bmi.n	80018a2 <_puts_r+0x52>
 800189c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800189e:	f000 fa89 	bl	8001db4 <__retarget_lock_release_recursive>
 80018a2:	0028      	movs	r0, r5
 80018a4:	bd70      	pop	{r4, r5, r6, pc}
 80018a6:	3601      	adds	r6, #1
 80018a8:	60a3      	str	r3, [r4, #8]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	da04      	bge.n	80018b8 <_puts_r+0x68>
 80018ae:	69a2      	ldr	r2, [r4, #24]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	dc16      	bgt.n	80018e2 <_puts_r+0x92>
 80018b4:	290a      	cmp	r1, #10
 80018b6:	d014      	beq.n	80018e2 <_puts_r+0x92>
 80018b8:	6823      	ldr	r3, [r4, #0]
 80018ba:	1c5a      	adds	r2, r3, #1
 80018bc:	6022      	str	r2, [r4, #0]
 80018be:	7019      	strb	r1, [r3, #0]
 80018c0:	68a3      	ldr	r3, [r4, #8]
 80018c2:	7831      	ldrb	r1, [r6, #0]
 80018c4:	3b01      	subs	r3, #1
 80018c6:	2900      	cmp	r1, #0
 80018c8:	d1ed      	bne.n	80018a6 <_puts_r+0x56>
 80018ca:	60a3      	str	r3, [r4, #8]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	da0f      	bge.n	80018f0 <_puts_r+0xa0>
 80018d0:	0022      	movs	r2, r4
 80018d2:	0028      	movs	r0, r5
 80018d4:	310a      	adds	r1, #10
 80018d6:	f000 f927 	bl	8001b28 <__swbuf_r>
 80018da:	3001      	adds	r0, #1
 80018dc:	d0d6      	beq.n	800188c <_puts_r+0x3c>
 80018de:	250a      	movs	r5, #10
 80018e0:	e7d6      	b.n	8001890 <_puts_r+0x40>
 80018e2:	0022      	movs	r2, r4
 80018e4:	0028      	movs	r0, r5
 80018e6:	f000 f91f 	bl	8001b28 <__swbuf_r>
 80018ea:	3001      	adds	r0, #1
 80018ec:	d1e8      	bne.n	80018c0 <_puts_r+0x70>
 80018ee:	e7cd      	b.n	800188c <_puts_r+0x3c>
 80018f0:	6823      	ldr	r3, [r4, #0]
 80018f2:	1c5a      	adds	r2, r3, #1
 80018f4:	6022      	str	r2, [r4, #0]
 80018f6:	220a      	movs	r2, #10
 80018f8:	701a      	strb	r2, [r3, #0]
 80018fa:	e7f0      	b.n	80018de <_puts_r+0x8e>

080018fc <puts>:
 80018fc:	b510      	push	{r4, lr}
 80018fe:	4b03      	ldr	r3, [pc, #12]	@ (800190c <puts+0x10>)
 8001900:	0001      	movs	r1, r0
 8001902:	6818      	ldr	r0, [r3, #0]
 8001904:	f7ff ffa4 	bl	8001850 <_puts_r>
 8001908:	bd10      	pop	{r4, pc}
 800190a:	46c0      	nop			@ (mov r8, r8)
 800190c:	20000010 	.word	0x20000010

08001910 <setbuf>:
 8001910:	b510      	push	{r4, lr}
 8001912:	2380      	movs	r3, #128	@ 0x80
 8001914:	424a      	negs	r2, r1
 8001916:	414a      	adcs	r2, r1
 8001918:	00db      	lsls	r3, r3, #3
 800191a:	0052      	lsls	r2, r2, #1
 800191c:	f000 f802 	bl	8001924 <setvbuf>
 8001920:	bd10      	pop	{r4, pc}
	...

08001924 <setvbuf>:
 8001924:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001926:	001d      	movs	r5, r3
 8001928:	4b57      	ldr	r3, [pc, #348]	@ (8001a88 <setvbuf+0x164>)
 800192a:	b085      	sub	sp, #20
 800192c:	681e      	ldr	r6, [r3, #0]
 800192e:	0004      	movs	r4, r0
 8001930:	000f      	movs	r7, r1
 8001932:	9200      	str	r2, [sp, #0]
 8001934:	2e00      	cmp	r6, #0
 8001936:	d005      	beq.n	8001944 <setvbuf+0x20>
 8001938:	6a33      	ldr	r3, [r6, #32]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d102      	bne.n	8001944 <setvbuf+0x20>
 800193e:	0030      	movs	r0, r6
 8001940:	f7ff ff42 	bl	80017c8 <__sinit>
 8001944:	9b00      	ldr	r3, [sp, #0]
 8001946:	2b02      	cmp	r3, #2
 8001948:	d005      	beq.n	8001956 <setvbuf+0x32>
 800194a:	2b01      	cmp	r3, #1
 800194c:	d900      	bls.n	8001950 <setvbuf+0x2c>
 800194e:	e097      	b.n	8001a80 <setvbuf+0x15c>
 8001950:	2d00      	cmp	r5, #0
 8001952:	da00      	bge.n	8001956 <setvbuf+0x32>
 8001954:	e094      	b.n	8001a80 <setvbuf+0x15c>
 8001956:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001958:	07db      	lsls	r3, r3, #31
 800195a:	d405      	bmi.n	8001968 <setvbuf+0x44>
 800195c:	89a3      	ldrh	r3, [r4, #12]
 800195e:	059b      	lsls	r3, r3, #22
 8001960:	d402      	bmi.n	8001968 <setvbuf+0x44>
 8001962:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001964:	f000 fa25 	bl	8001db2 <__retarget_lock_acquire_recursive>
 8001968:	0021      	movs	r1, r4
 800196a:	0030      	movs	r0, r6
 800196c:	f000 fe72 	bl	8002654 <_fflush_r>
 8001970:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001972:	2900      	cmp	r1, #0
 8001974:	d008      	beq.n	8001988 <setvbuf+0x64>
 8001976:	0023      	movs	r3, r4
 8001978:	3344      	adds	r3, #68	@ 0x44
 800197a:	4299      	cmp	r1, r3
 800197c:	d002      	beq.n	8001984 <setvbuf+0x60>
 800197e:	0030      	movs	r0, r6
 8001980:	f000 fa1a 	bl	8001db8 <_free_r>
 8001984:	2300      	movs	r3, #0
 8001986:	6363      	str	r3, [r4, #52]	@ 0x34
 8001988:	2300      	movs	r3, #0
 800198a:	61a3      	str	r3, [r4, #24]
 800198c:	6063      	str	r3, [r4, #4]
 800198e:	89a3      	ldrh	r3, [r4, #12]
 8001990:	061b      	lsls	r3, r3, #24
 8001992:	d503      	bpl.n	800199c <setvbuf+0x78>
 8001994:	0030      	movs	r0, r6
 8001996:	6921      	ldr	r1, [r4, #16]
 8001998:	f000 fa0e 	bl	8001db8 <_free_r>
 800199c:	89a3      	ldrh	r3, [r4, #12]
 800199e:	4a3b      	ldr	r2, [pc, #236]	@ (8001a8c <setvbuf+0x168>)
 80019a0:	4013      	ands	r3, r2
 80019a2:	81a3      	strh	r3, [r4, #12]
 80019a4:	9b00      	ldr	r3, [sp, #0]
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d060      	beq.n	8001a6c <setvbuf+0x148>
 80019aa:	ab03      	add	r3, sp, #12
 80019ac:	0021      	movs	r1, r4
 80019ae:	0030      	movs	r0, r6
 80019b0:	aa02      	add	r2, sp, #8
 80019b2:	f000 fe7b 	bl	80026ac <__swhatbuf_r>
 80019b6:	89a3      	ldrh	r3, [r4, #12]
 80019b8:	4303      	orrs	r3, r0
 80019ba:	81a3      	strh	r3, [r4, #12]
 80019bc:	2d00      	cmp	r5, #0
 80019be:	d124      	bne.n	8001a0a <setvbuf+0xe6>
 80019c0:	9d02      	ldr	r5, [sp, #8]
 80019c2:	0028      	movs	r0, r5
 80019c4:	f000 fa42 	bl	8001e4c <malloc>
 80019c8:	9501      	str	r5, [sp, #4]
 80019ca:	1e07      	subs	r7, r0, #0
 80019cc:	d148      	bne.n	8001a60 <setvbuf+0x13c>
 80019ce:	9b02      	ldr	r3, [sp, #8]
 80019d0:	9301      	str	r3, [sp, #4]
 80019d2:	42ab      	cmp	r3, r5
 80019d4:	d13f      	bne.n	8001a56 <setvbuf+0x132>
 80019d6:	2501      	movs	r5, #1
 80019d8:	426d      	negs	r5, r5
 80019da:	220c      	movs	r2, #12
 80019dc:	5ea3      	ldrsh	r3, [r4, r2]
 80019de:	2202      	movs	r2, #2
 80019e0:	431a      	orrs	r2, r3
 80019e2:	81a2      	strh	r2, [r4, #12]
 80019e4:	2200      	movs	r2, #0
 80019e6:	60a2      	str	r2, [r4, #8]
 80019e8:	0022      	movs	r2, r4
 80019ea:	3247      	adds	r2, #71	@ 0x47
 80019ec:	6022      	str	r2, [r4, #0]
 80019ee:	6122      	str	r2, [r4, #16]
 80019f0:	2201      	movs	r2, #1
 80019f2:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 80019f4:	6162      	str	r2, [r4, #20]
 80019f6:	4211      	tst	r1, r2
 80019f8:	d104      	bne.n	8001a04 <setvbuf+0xe0>
 80019fa:	059b      	lsls	r3, r3, #22
 80019fc:	d402      	bmi.n	8001a04 <setvbuf+0xe0>
 80019fe:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001a00:	f000 f9d8 	bl	8001db4 <__retarget_lock_release_recursive>
 8001a04:	0028      	movs	r0, r5
 8001a06:	b005      	add	sp, #20
 8001a08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a0a:	2f00      	cmp	r7, #0
 8001a0c:	d0d9      	beq.n	80019c2 <setvbuf+0x9e>
 8001a0e:	6a33      	ldr	r3, [r6, #32]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d102      	bne.n	8001a1a <setvbuf+0xf6>
 8001a14:	0030      	movs	r0, r6
 8001a16:	f7ff fed7 	bl	80017c8 <__sinit>
 8001a1a:	9b00      	ldr	r3, [sp, #0]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d103      	bne.n	8001a28 <setvbuf+0x104>
 8001a20:	89a3      	ldrh	r3, [r4, #12]
 8001a22:	9a00      	ldr	r2, [sp, #0]
 8001a24:	431a      	orrs	r2, r3
 8001a26:	81a2      	strh	r2, [r4, #12]
 8001a28:	220c      	movs	r2, #12
 8001a2a:	5ea3      	ldrsh	r3, [r4, r2]
 8001a2c:	2208      	movs	r2, #8
 8001a2e:	0019      	movs	r1, r3
 8001a30:	6027      	str	r7, [r4, #0]
 8001a32:	6127      	str	r7, [r4, #16]
 8001a34:	6165      	str	r5, [r4, #20]
 8001a36:	4011      	ands	r1, r2
 8001a38:	4213      	tst	r3, r2
 8001a3a:	d01b      	beq.n	8001a74 <setvbuf+0x150>
 8001a3c:	07da      	lsls	r2, r3, #31
 8001a3e:	d517      	bpl.n	8001a70 <setvbuf+0x14c>
 8001a40:	2200      	movs	r2, #0
 8001a42:	426d      	negs	r5, r5
 8001a44:	60a2      	str	r2, [r4, #8]
 8001a46:	61a5      	str	r5, [r4, #24]
 8001a48:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001a4a:	07d2      	lsls	r2, r2, #31
 8001a4c:	d401      	bmi.n	8001a52 <setvbuf+0x12e>
 8001a4e:	059b      	lsls	r3, r3, #22
 8001a50:	d512      	bpl.n	8001a78 <setvbuf+0x154>
 8001a52:	2500      	movs	r5, #0
 8001a54:	e7d6      	b.n	8001a04 <setvbuf+0xe0>
 8001a56:	9801      	ldr	r0, [sp, #4]
 8001a58:	f000 f9f8 	bl	8001e4c <malloc>
 8001a5c:	1e07      	subs	r7, r0, #0
 8001a5e:	d0ba      	beq.n	80019d6 <setvbuf+0xb2>
 8001a60:	2380      	movs	r3, #128	@ 0x80
 8001a62:	89a2      	ldrh	r2, [r4, #12]
 8001a64:	9d01      	ldr	r5, [sp, #4]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	81a3      	strh	r3, [r4, #12]
 8001a6a:	e7d0      	b.n	8001a0e <setvbuf+0xea>
 8001a6c:	2500      	movs	r5, #0
 8001a6e:	e7b4      	b.n	80019da <setvbuf+0xb6>
 8001a70:	60a5      	str	r5, [r4, #8]
 8001a72:	e7e9      	b.n	8001a48 <setvbuf+0x124>
 8001a74:	60a1      	str	r1, [r4, #8]
 8001a76:	e7e7      	b.n	8001a48 <setvbuf+0x124>
 8001a78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001a7a:	f000 f99b 	bl	8001db4 <__retarget_lock_release_recursive>
 8001a7e:	e7e8      	b.n	8001a52 <setvbuf+0x12e>
 8001a80:	2501      	movs	r5, #1
 8001a82:	426d      	negs	r5, r5
 8001a84:	e7be      	b.n	8001a04 <setvbuf+0xe0>
 8001a86:	46c0      	nop			@ (mov r8, r8)
 8001a88:	20000010 	.word	0x20000010
 8001a8c:	fffff35c 	.word	0xfffff35c

08001a90 <__sread>:
 8001a90:	b570      	push	{r4, r5, r6, lr}
 8001a92:	000c      	movs	r4, r1
 8001a94:	250e      	movs	r5, #14
 8001a96:	5f49      	ldrsh	r1, [r1, r5]
 8001a98:	f000 f938 	bl	8001d0c <_read_r>
 8001a9c:	2800      	cmp	r0, #0
 8001a9e:	db03      	blt.n	8001aa8 <__sread+0x18>
 8001aa0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001aa2:	181b      	adds	r3, r3, r0
 8001aa4:	6563      	str	r3, [r4, #84]	@ 0x54
 8001aa6:	bd70      	pop	{r4, r5, r6, pc}
 8001aa8:	89a3      	ldrh	r3, [r4, #12]
 8001aaa:	4a02      	ldr	r2, [pc, #8]	@ (8001ab4 <__sread+0x24>)
 8001aac:	4013      	ands	r3, r2
 8001aae:	81a3      	strh	r3, [r4, #12]
 8001ab0:	e7f9      	b.n	8001aa6 <__sread+0x16>
 8001ab2:	46c0      	nop			@ (mov r8, r8)
 8001ab4:	ffffefff 	.word	0xffffefff

08001ab8 <__swrite>:
 8001ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001aba:	001f      	movs	r7, r3
 8001abc:	898b      	ldrh	r3, [r1, #12]
 8001abe:	0005      	movs	r5, r0
 8001ac0:	000c      	movs	r4, r1
 8001ac2:	0016      	movs	r6, r2
 8001ac4:	05db      	lsls	r3, r3, #23
 8001ac6:	d505      	bpl.n	8001ad4 <__swrite+0x1c>
 8001ac8:	230e      	movs	r3, #14
 8001aca:	5ec9      	ldrsh	r1, [r1, r3]
 8001acc:	2200      	movs	r2, #0
 8001ace:	2302      	movs	r3, #2
 8001ad0:	f000 f908 	bl	8001ce4 <_lseek_r>
 8001ad4:	89a3      	ldrh	r3, [r4, #12]
 8001ad6:	4a05      	ldr	r2, [pc, #20]	@ (8001aec <__swrite+0x34>)
 8001ad8:	0028      	movs	r0, r5
 8001ada:	4013      	ands	r3, r2
 8001adc:	81a3      	strh	r3, [r4, #12]
 8001ade:	0032      	movs	r2, r6
 8001ae0:	230e      	movs	r3, #14
 8001ae2:	5ee1      	ldrsh	r1, [r4, r3]
 8001ae4:	003b      	movs	r3, r7
 8001ae6:	f000 f925 	bl	8001d34 <_write_r>
 8001aea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001aec:	ffffefff 	.word	0xffffefff

08001af0 <__sseek>:
 8001af0:	b570      	push	{r4, r5, r6, lr}
 8001af2:	000c      	movs	r4, r1
 8001af4:	250e      	movs	r5, #14
 8001af6:	5f49      	ldrsh	r1, [r1, r5]
 8001af8:	f000 f8f4 	bl	8001ce4 <_lseek_r>
 8001afc:	89a3      	ldrh	r3, [r4, #12]
 8001afe:	1c42      	adds	r2, r0, #1
 8001b00:	d103      	bne.n	8001b0a <__sseek+0x1a>
 8001b02:	4a05      	ldr	r2, [pc, #20]	@ (8001b18 <__sseek+0x28>)
 8001b04:	4013      	ands	r3, r2
 8001b06:	81a3      	strh	r3, [r4, #12]
 8001b08:	bd70      	pop	{r4, r5, r6, pc}
 8001b0a:	2280      	movs	r2, #128	@ 0x80
 8001b0c:	0152      	lsls	r2, r2, #5
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	81a3      	strh	r3, [r4, #12]
 8001b12:	6560      	str	r0, [r4, #84]	@ 0x54
 8001b14:	e7f8      	b.n	8001b08 <__sseek+0x18>
 8001b16:	46c0      	nop			@ (mov r8, r8)
 8001b18:	ffffefff 	.word	0xffffefff

08001b1c <__sclose>:
 8001b1c:	b510      	push	{r4, lr}
 8001b1e:	230e      	movs	r3, #14
 8001b20:	5ec9      	ldrsh	r1, [r1, r3]
 8001b22:	f000 f8cd 	bl	8001cc0 <_close_r>
 8001b26:	bd10      	pop	{r4, pc}

08001b28 <__swbuf_r>:
 8001b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b2a:	0006      	movs	r6, r0
 8001b2c:	000d      	movs	r5, r1
 8001b2e:	0014      	movs	r4, r2
 8001b30:	2800      	cmp	r0, #0
 8001b32:	d004      	beq.n	8001b3e <__swbuf_r+0x16>
 8001b34:	6a03      	ldr	r3, [r0, #32]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d101      	bne.n	8001b3e <__swbuf_r+0x16>
 8001b3a:	f7ff fe45 	bl	80017c8 <__sinit>
 8001b3e:	69a3      	ldr	r3, [r4, #24]
 8001b40:	60a3      	str	r3, [r4, #8]
 8001b42:	89a3      	ldrh	r3, [r4, #12]
 8001b44:	071b      	lsls	r3, r3, #28
 8001b46:	d502      	bpl.n	8001b4e <__swbuf_r+0x26>
 8001b48:	6923      	ldr	r3, [r4, #16]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d109      	bne.n	8001b62 <__swbuf_r+0x3a>
 8001b4e:	0021      	movs	r1, r4
 8001b50:	0030      	movs	r0, r6
 8001b52:	f000 f82b 	bl	8001bac <__swsetup_r>
 8001b56:	2800      	cmp	r0, #0
 8001b58:	d003      	beq.n	8001b62 <__swbuf_r+0x3a>
 8001b5a:	2501      	movs	r5, #1
 8001b5c:	426d      	negs	r5, r5
 8001b5e:	0028      	movs	r0, r5
 8001b60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b62:	6923      	ldr	r3, [r4, #16]
 8001b64:	6820      	ldr	r0, [r4, #0]
 8001b66:	b2ef      	uxtb	r7, r5
 8001b68:	1ac0      	subs	r0, r0, r3
 8001b6a:	6963      	ldr	r3, [r4, #20]
 8001b6c:	b2ed      	uxtb	r5, r5
 8001b6e:	4283      	cmp	r3, r0
 8001b70:	dc05      	bgt.n	8001b7e <__swbuf_r+0x56>
 8001b72:	0021      	movs	r1, r4
 8001b74:	0030      	movs	r0, r6
 8001b76:	f000 fd6d 	bl	8002654 <_fflush_r>
 8001b7a:	2800      	cmp	r0, #0
 8001b7c:	d1ed      	bne.n	8001b5a <__swbuf_r+0x32>
 8001b7e:	68a3      	ldr	r3, [r4, #8]
 8001b80:	3001      	adds	r0, #1
 8001b82:	3b01      	subs	r3, #1
 8001b84:	60a3      	str	r3, [r4, #8]
 8001b86:	6823      	ldr	r3, [r4, #0]
 8001b88:	1c5a      	adds	r2, r3, #1
 8001b8a:	6022      	str	r2, [r4, #0]
 8001b8c:	701f      	strb	r7, [r3, #0]
 8001b8e:	6963      	ldr	r3, [r4, #20]
 8001b90:	4283      	cmp	r3, r0
 8001b92:	d004      	beq.n	8001b9e <__swbuf_r+0x76>
 8001b94:	89a3      	ldrh	r3, [r4, #12]
 8001b96:	07db      	lsls	r3, r3, #31
 8001b98:	d5e1      	bpl.n	8001b5e <__swbuf_r+0x36>
 8001b9a:	2d0a      	cmp	r5, #10
 8001b9c:	d1df      	bne.n	8001b5e <__swbuf_r+0x36>
 8001b9e:	0021      	movs	r1, r4
 8001ba0:	0030      	movs	r0, r6
 8001ba2:	f000 fd57 	bl	8002654 <_fflush_r>
 8001ba6:	2800      	cmp	r0, #0
 8001ba8:	d0d9      	beq.n	8001b5e <__swbuf_r+0x36>
 8001baa:	e7d6      	b.n	8001b5a <__swbuf_r+0x32>

08001bac <__swsetup_r>:
 8001bac:	4b2d      	ldr	r3, [pc, #180]	@ (8001c64 <__swsetup_r+0xb8>)
 8001bae:	b570      	push	{r4, r5, r6, lr}
 8001bb0:	0005      	movs	r5, r0
 8001bb2:	6818      	ldr	r0, [r3, #0]
 8001bb4:	000c      	movs	r4, r1
 8001bb6:	2800      	cmp	r0, #0
 8001bb8:	d004      	beq.n	8001bc4 <__swsetup_r+0x18>
 8001bba:	6a03      	ldr	r3, [r0, #32]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d101      	bne.n	8001bc4 <__swsetup_r+0x18>
 8001bc0:	f7ff fe02 	bl	80017c8 <__sinit>
 8001bc4:	230c      	movs	r3, #12
 8001bc6:	5ee2      	ldrsh	r2, [r4, r3]
 8001bc8:	0713      	lsls	r3, r2, #28
 8001bca:	d423      	bmi.n	8001c14 <__swsetup_r+0x68>
 8001bcc:	06d3      	lsls	r3, r2, #27
 8001bce:	d407      	bmi.n	8001be0 <__swsetup_r+0x34>
 8001bd0:	2309      	movs	r3, #9
 8001bd2:	602b      	str	r3, [r5, #0]
 8001bd4:	2340      	movs	r3, #64	@ 0x40
 8001bd6:	2001      	movs	r0, #1
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	81a3      	strh	r3, [r4, #12]
 8001bdc:	4240      	negs	r0, r0
 8001bde:	e03a      	b.n	8001c56 <__swsetup_r+0xaa>
 8001be0:	0752      	lsls	r2, r2, #29
 8001be2:	d513      	bpl.n	8001c0c <__swsetup_r+0x60>
 8001be4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001be6:	2900      	cmp	r1, #0
 8001be8:	d008      	beq.n	8001bfc <__swsetup_r+0x50>
 8001bea:	0023      	movs	r3, r4
 8001bec:	3344      	adds	r3, #68	@ 0x44
 8001bee:	4299      	cmp	r1, r3
 8001bf0:	d002      	beq.n	8001bf8 <__swsetup_r+0x4c>
 8001bf2:	0028      	movs	r0, r5
 8001bf4:	f000 f8e0 	bl	8001db8 <_free_r>
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	6363      	str	r3, [r4, #52]	@ 0x34
 8001bfc:	2224      	movs	r2, #36	@ 0x24
 8001bfe:	89a3      	ldrh	r3, [r4, #12]
 8001c00:	4393      	bics	r3, r2
 8001c02:	81a3      	strh	r3, [r4, #12]
 8001c04:	2300      	movs	r3, #0
 8001c06:	6063      	str	r3, [r4, #4]
 8001c08:	6923      	ldr	r3, [r4, #16]
 8001c0a:	6023      	str	r3, [r4, #0]
 8001c0c:	2308      	movs	r3, #8
 8001c0e:	89a2      	ldrh	r2, [r4, #12]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	81a3      	strh	r3, [r4, #12]
 8001c14:	6923      	ldr	r3, [r4, #16]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d10b      	bne.n	8001c32 <__swsetup_r+0x86>
 8001c1a:	21a0      	movs	r1, #160	@ 0xa0
 8001c1c:	2280      	movs	r2, #128	@ 0x80
 8001c1e:	89a3      	ldrh	r3, [r4, #12]
 8001c20:	0089      	lsls	r1, r1, #2
 8001c22:	0092      	lsls	r2, r2, #2
 8001c24:	400b      	ands	r3, r1
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d003      	beq.n	8001c32 <__swsetup_r+0x86>
 8001c2a:	0021      	movs	r1, r4
 8001c2c:	0028      	movs	r0, r5
 8001c2e:	f000 fd67 	bl	8002700 <__smakebuf_r>
 8001c32:	230c      	movs	r3, #12
 8001c34:	5ee2      	ldrsh	r2, [r4, r3]
 8001c36:	2101      	movs	r1, #1
 8001c38:	0013      	movs	r3, r2
 8001c3a:	400b      	ands	r3, r1
 8001c3c:	420a      	tst	r2, r1
 8001c3e:	d00b      	beq.n	8001c58 <__swsetup_r+0xac>
 8001c40:	2300      	movs	r3, #0
 8001c42:	60a3      	str	r3, [r4, #8]
 8001c44:	6963      	ldr	r3, [r4, #20]
 8001c46:	425b      	negs	r3, r3
 8001c48:	61a3      	str	r3, [r4, #24]
 8001c4a:	2000      	movs	r0, #0
 8001c4c:	6923      	ldr	r3, [r4, #16]
 8001c4e:	4283      	cmp	r3, r0
 8001c50:	d101      	bne.n	8001c56 <__swsetup_r+0xaa>
 8001c52:	0613      	lsls	r3, r2, #24
 8001c54:	d4be      	bmi.n	8001bd4 <__swsetup_r+0x28>
 8001c56:	bd70      	pop	{r4, r5, r6, pc}
 8001c58:	0791      	lsls	r1, r2, #30
 8001c5a:	d400      	bmi.n	8001c5e <__swsetup_r+0xb2>
 8001c5c:	6963      	ldr	r3, [r4, #20]
 8001c5e:	60a3      	str	r3, [r4, #8]
 8001c60:	e7f3      	b.n	8001c4a <__swsetup_r+0x9e>
 8001c62:	46c0      	nop			@ (mov r8, r8)
 8001c64:	20000010 	.word	0x20000010

08001c68 <memset>:
 8001c68:	0003      	movs	r3, r0
 8001c6a:	1882      	adds	r2, r0, r2
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d100      	bne.n	8001c72 <memset+0xa>
 8001c70:	4770      	bx	lr
 8001c72:	7019      	strb	r1, [r3, #0]
 8001c74:	3301      	adds	r3, #1
 8001c76:	e7f9      	b.n	8001c6c <memset+0x4>

08001c78 <strncasecmp>:
 8001c78:	2303      	movs	r3, #3
 8001c7a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001c7c:	469c      	mov	ip, r3
 8001c7e:	0006      	movs	r6, r0
 8001c80:	2400      	movs	r4, #0
 8001c82:	4f0e      	ldr	r7, [pc, #56]	@ (8001cbc <strncasecmp+0x44>)
 8001c84:	9201      	str	r2, [sp, #4]
 8001c86:	9b01      	ldr	r3, [sp, #4]
 8001c88:	429c      	cmp	r4, r3
 8001c8a:	d101      	bne.n	8001c90 <strncasecmp+0x18>
 8001c8c:	2000      	movs	r0, #0
 8001c8e:	e013      	b.n	8001cb8 <strncasecmp+0x40>
 8001c90:	4660      	mov	r0, ip
 8001c92:	5d35      	ldrb	r5, [r6, r4]
 8001c94:	5d7b      	ldrb	r3, [r7, r5]
 8001c96:	4003      	ands	r3, r0
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d100      	bne.n	8001c9e <strncasecmp+0x26>
 8001c9c:	3520      	adds	r5, #32
 8001c9e:	4662      	mov	r2, ip
 8001ca0:	5d0b      	ldrb	r3, [r1, r4]
 8001ca2:	5cf8      	ldrb	r0, [r7, r3]
 8001ca4:	4010      	ands	r0, r2
 8001ca6:	2801      	cmp	r0, #1
 8001ca8:	d100      	bne.n	8001cac <strncasecmp+0x34>
 8001caa:	3320      	adds	r3, #32
 8001cac:	1ae8      	subs	r0, r5, r3
 8001cae:	429d      	cmp	r5, r3
 8001cb0:	d102      	bne.n	8001cb8 <strncasecmp+0x40>
 8001cb2:	3401      	adds	r4, #1
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d1e6      	bne.n	8001c86 <strncasecmp+0xe>
 8001cb8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001cba:	46c0      	nop			@ (mov r8, r8)
 8001cbc:	0800297d 	.word	0x0800297d

08001cc0 <_close_r>:
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	b570      	push	{r4, r5, r6, lr}
 8001cc4:	4d06      	ldr	r5, [pc, #24]	@ (8001ce0 <_close_r+0x20>)
 8001cc6:	0004      	movs	r4, r0
 8001cc8:	0008      	movs	r0, r1
 8001cca:	602b      	str	r3, [r5, #0]
 8001ccc:	f7ff f895 	bl	8000dfa <_close>
 8001cd0:	1c43      	adds	r3, r0, #1
 8001cd2:	d103      	bne.n	8001cdc <_close_r+0x1c>
 8001cd4:	682b      	ldr	r3, [r5, #0]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d000      	beq.n	8001cdc <_close_r+0x1c>
 8001cda:	6023      	str	r3, [r4, #0]
 8001cdc:	bd70      	pop	{r4, r5, r6, pc}
 8001cde:	46c0      	nop			@ (mov r8, r8)
 8001ce0:	200012dc 	.word	0x200012dc

08001ce4 <_lseek_r>:
 8001ce4:	b570      	push	{r4, r5, r6, lr}
 8001ce6:	0004      	movs	r4, r0
 8001ce8:	0008      	movs	r0, r1
 8001cea:	0011      	movs	r1, r2
 8001cec:	001a      	movs	r2, r3
 8001cee:	2300      	movs	r3, #0
 8001cf0:	4d05      	ldr	r5, [pc, #20]	@ (8001d08 <_lseek_r+0x24>)
 8001cf2:	602b      	str	r3, [r5, #0]
 8001cf4:	f7ff f8a2 	bl	8000e3c <_lseek>
 8001cf8:	1c43      	adds	r3, r0, #1
 8001cfa:	d103      	bne.n	8001d04 <_lseek_r+0x20>
 8001cfc:	682b      	ldr	r3, [r5, #0]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d000      	beq.n	8001d04 <_lseek_r+0x20>
 8001d02:	6023      	str	r3, [r4, #0]
 8001d04:	bd70      	pop	{r4, r5, r6, pc}
 8001d06:	46c0      	nop			@ (mov r8, r8)
 8001d08:	200012dc 	.word	0x200012dc

08001d0c <_read_r>:
 8001d0c:	b570      	push	{r4, r5, r6, lr}
 8001d0e:	0004      	movs	r4, r0
 8001d10:	0008      	movs	r0, r1
 8001d12:	0011      	movs	r1, r2
 8001d14:	001a      	movs	r2, r3
 8001d16:	2300      	movs	r3, #0
 8001d18:	4d05      	ldr	r5, [pc, #20]	@ (8001d30 <_read_r+0x24>)
 8001d1a:	602b      	str	r3, [r5, #0]
 8001d1c:	f7ff f834 	bl	8000d88 <_read>
 8001d20:	1c43      	adds	r3, r0, #1
 8001d22:	d103      	bne.n	8001d2c <_read_r+0x20>
 8001d24:	682b      	ldr	r3, [r5, #0]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d000      	beq.n	8001d2c <_read_r+0x20>
 8001d2a:	6023      	str	r3, [r4, #0]
 8001d2c:	bd70      	pop	{r4, r5, r6, pc}
 8001d2e:	46c0      	nop			@ (mov r8, r8)
 8001d30:	200012dc 	.word	0x200012dc

08001d34 <_write_r>:
 8001d34:	b570      	push	{r4, r5, r6, lr}
 8001d36:	0004      	movs	r4, r0
 8001d38:	0008      	movs	r0, r1
 8001d3a:	0011      	movs	r1, r2
 8001d3c:	001a      	movs	r2, r3
 8001d3e:	2300      	movs	r3, #0
 8001d40:	4d05      	ldr	r5, [pc, #20]	@ (8001d58 <_write_r+0x24>)
 8001d42:	602b      	str	r3, [r5, #0]
 8001d44:	f7ff f83d 	bl	8000dc2 <_write>
 8001d48:	1c43      	adds	r3, r0, #1
 8001d4a:	d103      	bne.n	8001d54 <_write_r+0x20>
 8001d4c:	682b      	ldr	r3, [r5, #0]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d000      	beq.n	8001d54 <_write_r+0x20>
 8001d52:	6023      	str	r3, [r4, #0]
 8001d54:	bd70      	pop	{r4, r5, r6, pc}
 8001d56:	46c0      	nop			@ (mov r8, r8)
 8001d58:	200012dc 	.word	0x200012dc

08001d5c <__errno>:
 8001d5c:	4b01      	ldr	r3, [pc, #4]	@ (8001d64 <__errno+0x8>)
 8001d5e:	6818      	ldr	r0, [r3, #0]
 8001d60:	4770      	bx	lr
 8001d62:	46c0      	nop			@ (mov r8, r8)
 8001d64:	20000010 	.word	0x20000010

08001d68 <__libc_init_array>:
 8001d68:	b570      	push	{r4, r5, r6, lr}
 8001d6a:	2600      	movs	r6, #0
 8001d6c:	4c0c      	ldr	r4, [pc, #48]	@ (8001da0 <__libc_init_array+0x38>)
 8001d6e:	4d0d      	ldr	r5, [pc, #52]	@ (8001da4 <__libc_init_array+0x3c>)
 8001d70:	1b64      	subs	r4, r4, r5
 8001d72:	10a4      	asrs	r4, r4, #2
 8001d74:	42a6      	cmp	r6, r4
 8001d76:	d109      	bne.n	8001d8c <__libc_init_array+0x24>
 8001d78:	2600      	movs	r6, #0
 8001d7a:	f000 fd45 	bl	8002808 <_init>
 8001d7e:	4c0a      	ldr	r4, [pc, #40]	@ (8001da8 <__libc_init_array+0x40>)
 8001d80:	4d0a      	ldr	r5, [pc, #40]	@ (8001dac <__libc_init_array+0x44>)
 8001d82:	1b64      	subs	r4, r4, r5
 8001d84:	10a4      	asrs	r4, r4, #2
 8001d86:	42a6      	cmp	r6, r4
 8001d88:	d105      	bne.n	8001d96 <__libc_init_array+0x2e>
 8001d8a:	bd70      	pop	{r4, r5, r6, pc}
 8001d8c:	00b3      	lsls	r3, r6, #2
 8001d8e:	58eb      	ldr	r3, [r5, r3]
 8001d90:	4798      	blx	r3
 8001d92:	3601      	adds	r6, #1
 8001d94:	e7ee      	b.n	8001d74 <__libc_init_array+0xc>
 8001d96:	00b3      	lsls	r3, r6, #2
 8001d98:	58eb      	ldr	r3, [r5, r3]
 8001d9a:	4798      	blx	r3
 8001d9c:	3601      	adds	r6, #1
 8001d9e:	e7f2      	b.n	8001d86 <__libc_init_array+0x1e>
 8001da0:	08002ab0 	.word	0x08002ab0
 8001da4:	08002ab0 	.word	0x08002ab0
 8001da8:	08002ab4 	.word	0x08002ab4
 8001dac:	08002ab0 	.word	0x08002ab0

08001db0 <__retarget_lock_init_recursive>:
 8001db0:	4770      	bx	lr

08001db2 <__retarget_lock_acquire_recursive>:
 8001db2:	4770      	bx	lr

08001db4 <__retarget_lock_release_recursive>:
 8001db4:	4770      	bx	lr
	...

08001db8 <_free_r>:
 8001db8:	b570      	push	{r4, r5, r6, lr}
 8001dba:	0005      	movs	r5, r0
 8001dbc:	1e0c      	subs	r4, r1, #0
 8001dbe:	d010      	beq.n	8001de2 <_free_r+0x2a>
 8001dc0:	3c04      	subs	r4, #4
 8001dc2:	6823      	ldr	r3, [r4, #0]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	da00      	bge.n	8001dca <_free_r+0x12>
 8001dc8:	18e4      	adds	r4, r4, r3
 8001dca:	0028      	movs	r0, r5
 8001dcc:	f000 f8ea 	bl	8001fa4 <__malloc_lock>
 8001dd0:	4a1d      	ldr	r2, [pc, #116]	@ (8001e48 <_free_r+0x90>)
 8001dd2:	6813      	ldr	r3, [r2, #0]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d105      	bne.n	8001de4 <_free_r+0x2c>
 8001dd8:	6063      	str	r3, [r4, #4]
 8001dda:	6014      	str	r4, [r2, #0]
 8001ddc:	0028      	movs	r0, r5
 8001dde:	f000 f8e9 	bl	8001fb4 <__malloc_unlock>
 8001de2:	bd70      	pop	{r4, r5, r6, pc}
 8001de4:	42a3      	cmp	r3, r4
 8001de6:	d908      	bls.n	8001dfa <_free_r+0x42>
 8001de8:	6820      	ldr	r0, [r4, #0]
 8001dea:	1821      	adds	r1, r4, r0
 8001dec:	428b      	cmp	r3, r1
 8001dee:	d1f3      	bne.n	8001dd8 <_free_r+0x20>
 8001df0:	6819      	ldr	r1, [r3, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	1809      	adds	r1, r1, r0
 8001df6:	6021      	str	r1, [r4, #0]
 8001df8:	e7ee      	b.n	8001dd8 <_free_r+0x20>
 8001dfa:	001a      	movs	r2, r3
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <_free_r+0x4e>
 8001e02:	42a3      	cmp	r3, r4
 8001e04:	d9f9      	bls.n	8001dfa <_free_r+0x42>
 8001e06:	6811      	ldr	r1, [r2, #0]
 8001e08:	1850      	adds	r0, r2, r1
 8001e0a:	42a0      	cmp	r0, r4
 8001e0c:	d10b      	bne.n	8001e26 <_free_r+0x6e>
 8001e0e:	6820      	ldr	r0, [r4, #0]
 8001e10:	1809      	adds	r1, r1, r0
 8001e12:	1850      	adds	r0, r2, r1
 8001e14:	6011      	str	r1, [r2, #0]
 8001e16:	4283      	cmp	r3, r0
 8001e18:	d1e0      	bne.n	8001ddc <_free_r+0x24>
 8001e1a:	6818      	ldr	r0, [r3, #0]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	1841      	adds	r1, r0, r1
 8001e20:	6011      	str	r1, [r2, #0]
 8001e22:	6053      	str	r3, [r2, #4]
 8001e24:	e7da      	b.n	8001ddc <_free_r+0x24>
 8001e26:	42a0      	cmp	r0, r4
 8001e28:	d902      	bls.n	8001e30 <_free_r+0x78>
 8001e2a:	230c      	movs	r3, #12
 8001e2c:	602b      	str	r3, [r5, #0]
 8001e2e:	e7d5      	b.n	8001ddc <_free_r+0x24>
 8001e30:	6820      	ldr	r0, [r4, #0]
 8001e32:	1821      	adds	r1, r4, r0
 8001e34:	428b      	cmp	r3, r1
 8001e36:	d103      	bne.n	8001e40 <_free_r+0x88>
 8001e38:	6819      	ldr	r1, [r3, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	1809      	adds	r1, r1, r0
 8001e3e:	6021      	str	r1, [r4, #0]
 8001e40:	6063      	str	r3, [r4, #4]
 8001e42:	6054      	str	r4, [r2, #4]
 8001e44:	e7ca      	b.n	8001ddc <_free_r+0x24>
 8001e46:	46c0      	nop			@ (mov r8, r8)
 8001e48:	200012e8 	.word	0x200012e8

08001e4c <malloc>:
 8001e4c:	b510      	push	{r4, lr}
 8001e4e:	4b03      	ldr	r3, [pc, #12]	@ (8001e5c <malloc+0x10>)
 8001e50:	0001      	movs	r1, r0
 8001e52:	6818      	ldr	r0, [r3, #0]
 8001e54:	f000 f826 	bl	8001ea4 <_malloc_r>
 8001e58:	bd10      	pop	{r4, pc}
 8001e5a:	46c0      	nop			@ (mov r8, r8)
 8001e5c:	20000010 	.word	0x20000010

08001e60 <sbrk_aligned>:
 8001e60:	b570      	push	{r4, r5, r6, lr}
 8001e62:	4e0f      	ldr	r6, [pc, #60]	@ (8001ea0 <sbrk_aligned+0x40>)
 8001e64:	000d      	movs	r5, r1
 8001e66:	6831      	ldr	r1, [r6, #0]
 8001e68:	0004      	movs	r4, r0
 8001e6a:	2900      	cmp	r1, #0
 8001e6c:	d102      	bne.n	8001e74 <sbrk_aligned+0x14>
 8001e6e:	f000 fcad 	bl	80027cc <_sbrk_r>
 8001e72:	6030      	str	r0, [r6, #0]
 8001e74:	0029      	movs	r1, r5
 8001e76:	0020      	movs	r0, r4
 8001e78:	f000 fca8 	bl	80027cc <_sbrk_r>
 8001e7c:	1c43      	adds	r3, r0, #1
 8001e7e:	d103      	bne.n	8001e88 <sbrk_aligned+0x28>
 8001e80:	2501      	movs	r5, #1
 8001e82:	426d      	negs	r5, r5
 8001e84:	0028      	movs	r0, r5
 8001e86:	bd70      	pop	{r4, r5, r6, pc}
 8001e88:	2303      	movs	r3, #3
 8001e8a:	1cc5      	adds	r5, r0, #3
 8001e8c:	439d      	bics	r5, r3
 8001e8e:	42a8      	cmp	r0, r5
 8001e90:	d0f8      	beq.n	8001e84 <sbrk_aligned+0x24>
 8001e92:	1a29      	subs	r1, r5, r0
 8001e94:	0020      	movs	r0, r4
 8001e96:	f000 fc99 	bl	80027cc <_sbrk_r>
 8001e9a:	3001      	adds	r0, #1
 8001e9c:	d1f2      	bne.n	8001e84 <sbrk_aligned+0x24>
 8001e9e:	e7ef      	b.n	8001e80 <sbrk_aligned+0x20>
 8001ea0:	200012e4 	.word	0x200012e4

08001ea4 <_malloc_r>:
 8001ea4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001ea6:	2203      	movs	r2, #3
 8001ea8:	1ccb      	adds	r3, r1, #3
 8001eaa:	4393      	bics	r3, r2
 8001eac:	3308      	adds	r3, #8
 8001eae:	0005      	movs	r5, r0
 8001eb0:	001f      	movs	r7, r3
 8001eb2:	2b0c      	cmp	r3, #12
 8001eb4:	d234      	bcs.n	8001f20 <_malloc_r+0x7c>
 8001eb6:	270c      	movs	r7, #12
 8001eb8:	42b9      	cmp	r1, r7
 8001eba:	d833      	bhi.n	8001f24 <_malloc_r+0x80>
 8001ebc:	0028      	movs	r0, r5
 8001ebe:	f000 f871 	bl	8001fa4 <__malloc_lock>
 8001ec2:	4e37      	ldr	r6, [pc, #220]	@ (8001fa0 <_malloc_r+0xfc>)
 8001ec4:	6833      	ldr	r3, [r6, #0]
 8001ec6:	001c      	movs	r4, r3
 8001ec8:	2c00      	cmp	r4, #0
 8001eca:	d12f      	bne.n	8001f2c <_malloc_r+0x88>
 8001ecc:	0039      	movs	r1, r7
 8001ece:	0028      	movs	r0, r5
 8001ed0:	f7ff ffc6 	bl	8001e60 <sbrk_aligned>
 8001ed4:	0004      	movs	r4, r0
 8001ed6:	1c43      	adds	r3, r0, #1
 8001ed8:	d15f      	bne.n	8001f9a <_malloc_r+0xf6>
 8001eda:	6834      	ldr	r4, [r6, #0]
 8001edc:	9400      	str	r4, [sp, #0]
 8001ede:	9b00      	ldr	r3, [sp, #0]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d14a      	bne.n	8001f7a <_malloc_r+0xd6>
 8001ee4:	2c00      	cmp	r4, #0
 8001ee6:	d052      	beq.n	8001f8e <_malloc_r+0xea>
 8001ee8:	6823      	ldr	r3, [r4, #0]
 8001eea:	0028      	movs	r0, r5
 8001eec:	18e3      	adds	r3, r4, r3
 8001eee:	9900      	ldr	r1, [sp, #0]
 8001ef0:	9301      	str	r3, [sp, #4]
 8001ef2:	f000 fc6b 	bl	80027cc <_sbrk_r>
 8001ef6:	9b01      	ldr	r3, [sp, #4]
 8001ef8:	4283      	cmp	r3, r0
 8001efa:	d148      	bne.n	8001f8e <_malloc_r+0xea>
 8001efc:	6823      	ldr	r3, [r4, #0]
 8001efe:	0028      	movs	r0, r5
 8001f00:	1aff      	subs	r7, r7, r3
 8001f02:	0039      	movs	r1, r7
 8001f04:	f7ff ffac 	bl	8001e60 <sbrk_aligned>
 8001f08:	3001      	adds	r0, #1
 8001f0a:	d040      	beq.n	8001f8e <_malloc_r+0xea>
 8001f0c:	6823      	ldr	r3, [r4, #0]
 8001f0e:	19db      	adds	r3, r3, r7
 8001f10:	6023      	str	r3, [r4, #0]
 8001f12:	6833      	ldr	r3, [r6, #0]
 8001f14:	685a      	ldr	r2, [r3, #4]
 8001f16:	2a00      	cmp	r2, #0
 8001f18:	d133      	bne.n	8001f82 <_malloc_r+0xde>
 8001f1a:	9b00      	ldr	r3, [sp, #0]
 8001f1c:	6033      	str	r3, [r6, #0]
 8001f1e:	e019      	b.n	8001f54 <_malloc_r+0xb0>
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	dac9      	bge.n	8001eb8 <_malloc_r+0x14>
 8001f24:	230c      	movs	r3, #12
 8001f26:	602b      	str	r3, [r5, #0]
 8001f28:	2000      	movs	r0, #0
 8001f2a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001f2c:	6821      	ldr	r1, [r4, #0]
 8001f2e:	1bc9      	subs	r1, r1, r7
 8001f30:	d420      	bmi.n	8001f74 <_malloc_r+0xd0>
 8001f32:	290b      	cmp	r1, #11
 8001f34:	d90a      	bls.n	8001f4c <_malloc_r+0xa8>
 8001f36:	19e2      	adds	r2, r4, r7
 8001f38:	6027      	str	r7, [r4, #0]
 8001f3a:	42a3      	cmp	r3, r4
 8001f3c:	d104      	bne.n	8001f48 <_malloc_r+0xa4>
 8001f3e:	6032      	str	r2, [r6, #0]
 8001f40:	6863      	ldr	r3, [r4, #4]
 8001f42:	6011      	str	r1, [r2, #0]
 8001f44:	6053      	str	r3, [r2, #4]
 8001f46:	e005      	b.n	8001f54 <_malloc_r+0xb0>
 8001f48:	605a      	str	r2, [r3, #4]
 8001f4a:	e7f9      	b.n	8001f40 <_malloc_r+0x9c>
 8001f4c:	6862      	ldr	r2, [r4, #4]
 8001f4e:	42a3      	cmp	r3, r4
 8001f50:	d10e      	bne.n	8001f70 <_malloc_r+0xcc>
 8001f52:	6032      	str	r2, [r6, #0]
 8001f54:	0028      	movs	r0, r5
 8001f56:	f000 f82d 	bl	8001fb4 <__malloc_unlock>
 8001f5a:	0020      	movs	r0, r4
 8001f5c:	2207      	movs	r2, #7
 8001f5e:	300b      	adds	r0, #11
 8001f60:	1d23      	adds	r3, r4, #4
 8001f62:	4390      	bics	r0, r2
 8001f64:	1ac2      	subs	r2, r0, r3
 8001f66:	4298      	cmp	r0, r3
 8001f68:	d0df      	beq.n	8001f2a <_malloc_r+0x86>
 8001f6a:	1a1b      	subs	r3, r3, r0
 8001f6c:	50a3      	str	r3, [r4, r2]
 8001f6e:	e7dc      	b.n	8001f2a <_malloc_r+0x86>
 8001f70:	605a      	str	r2, [r3, #4]
 8001f72:	e7ef      	b.n	8001f54 <_malloc_r+0xb0>
 8001f74:	0023      	movs	r3, r4
 8001f76:	6864      	ldr	r4, [r4, #4]
 8001f78:	e7a6      	b.n	8001ec8 <_malloc_r+0x24>
 8001f7a:	9c00      	ldr	r4, [sp, #0]
 8001f7c:	6863      	ldr	r3, [r4, #4]
 8001f7e:	9300      	str	r3, [sp, #0]
 8001f80:	e7ad      	b.n	8001ede <_malloc_r+0x3a>
 8001f82:	001a      	movs	r2, r3
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	42a3      	cmp	r3, r4
 8001f88:	d1fb      	bne.n	8001f82 <_malloc_r+0xde>
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	e7da      	b.n	8001f44 <_malloc_r+0xa0>
 8001f8e:	230c      	movs	r3, #12
 8001f90:	0028      	movs	r0, r5
 8001f92:	602b      	str	r3, [r5, #0]
 8001f94:	f000 f80e 	bl	8001fb4 <__malloc_unlock>
 8001f98:	e7c6      	b.n	8001f28 <_malloc_r+0x84>
 8001f9a:	6007      	str	r7, [r0, #0]
 8001f9c:	e7da      	b.n	8001f54 <_malloc_r+0xb0>
 8001f9e:	46c0      	nop			@ (mov r8, r8)
 8001fa0:	200012e8 	.word	0x200012e8

08001fa4 <__malloc_lock>:
 8001fa4:	b510      	push	{r4, lr}
 8001fa6:	4802      	ldr	r0, [pc, #8]	@ (8001fb0 <__malloc_lock+0xc>)
 8001fa8:	f7ff ff03 	bl	8001db2 <__retarget_lock_acquire_recursive>
 8001fac:	bd10      	pop	{r4, pc}
 8001fae:	46c0      	nop			@ (mov r8, r8)
 8001fb0:	200012e0 	.word	0x200012e0

08001fb4 <__malloc_unlock>:
 8001fb4:	b510      	push	{r4, lr}
 8001fb6:	4802      	ldr	r0, [pc, #8]	@ (8001fc0 <__malloc_unlock+0xc>)
 8001fb8:	f7ff fefc 	bl	8001db4 <__retarget_lock_release_recursive>
 8001fbc:	bd10      	pop	{r4, pc}
 8001fbe:	46c0      	nop			@ (mov r8, r8)
 8001fc0:	200012e0 	.word	0x200012e0

08001fc4 <__sfputc_r>:
 8001fc4:	6893      	ldr	r3, [r2, #8]
 8001fc6:	b510      	push	{r4, lr}
 8001fc8:	3b01      	subs	r3, #1
 8001fca:	6093      	str	r3, [r2, #8]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	da04      	bge.n	8001fda <__sfputc_r+0x16>
 8001fd0:	6994      	ldr	r4, [r2, #24]
 8001fd2:	42a3      	cmp	r3, r4
 8001fd4:	db07      	blt.n	8001fe6 <__sfputc_r+0x22>
 8001fd6:	290a      	cmp	r1, #10
 8001fd8:	d005      	beq.n	8001fe6 <__sfputc_r+0x22>
 8001fda:	6813      	ldr	r3, [r2, #0]
 8001fdc:	1c58      	adds	r0, r3, #1
 8001fde:	6010      	str	r0, [r2, #0]
 8001fe0:	7019      	strb	r1, [r3, #0]
 8001fe2:	0008      	movs	r0, r1
 8001fe4:	bd10      	pop	{r4, pc}
 8001fe6:	f7ff fd9f 	bl	8001b28 <__swbuf_r>
 8001fea:	0001      	movs	r1, r0
 8001fec:	e7f9      	b.n	8001fe2 <__sfputc_r+0x1e>

08001fee <__sfputs_r>:
 8001fee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ff0:	0006      	movs	r6, r0
 8001ff2:	000f      	movs	r7, r1
 8001ff4:	0014      	movs	r4, r2
 8001ff6:	18d5      	adds	r5, r2, r3
 8001ff8:	42ac      	cmp	r4, r5
 8001ffa:	d101      	bne.n	8002000 <__sfputs_r+0x12>
 8001ffc:	2000      	movs	r0, #0
 8001ffe:	e007      	b.n	8002010 <__sfputs_r+0x22>
 8002000:	7821      	ldrb	r1, [r4, #0]
 8002002:	003a      	movs	r2, r7
 8002004:	0030      	movs	r0, r6
 8002006:	f7ff ffdd 	bl	8001fc4 <__sfputc_r>
 800200a:	3401      	adds	r4, #1
 800200c:	1c43      	adds	r3, r0, #1
 800200e:	d1f3      	bne.n	8001ff8 <__sfputs_r+0xa>
 8002010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002014 <_vfiprintf_r>:
 8002014:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002016:	b0a1      	sub	sp, #132	@ 0x84
 8002018:	000f      	movs	r7, r1
 800201a:	0015      	movs	r5, r2
 800201c:	001e      	movs	r6, r3
 800201e:	9003      	str	r0, [sp, #12]
 8002020:	2800      	cmp	r0, #0
 8002022:	d004      	beq.n	800202e <_vfiprintf_r+0x1a>
 8002024:	6a03      	ldr	r3, [r0, #32]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d101      	bne.n	800202e <_vfiprintf_r+0x1a>
 800202a:	f7ff fbcd 	bl	80017c8 <__sinit>
 800202e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002030:	07db      	lsls	r3, r3, #31
 8002032:	d405      	bmi.n	8002040 <_vfiprintf_r+0x2c>
 8002034:	89bb      	ldrh	r3, [r7, #12]
 8002036:	059b      	lsls	r3, r3, #22
 8002038:	d402      	bmi.n	8002040 <_vfiprintf_r+0x2c>
 800203a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800203c:	f7ff feb9 	bl	8001db2 <__retarget_lock_acquire_recursive>
 8002040:	89bb      	ldrh	r3, [r7, #12]
 8002042:	071b      	lsls	r3, r3, #28
 8002044:	d502      	bpl.n	800204c <_vfiprintf_r+0x38>
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d113      	bne.n	8002074 <_vfiprintf_r+0x60>
 800204c:	0039      	movs	r1, r7
 800204e:	9803      	ldr	r0, [sp, #12]
 8002050:	f7ff fdac 	bl	8001bac <__swsetup_r>
 8002054:	2800      	cmp	r0, #0
 8002056:	d00d      	beq.n	8002074 <_vfiprintf_r+0x60>
 8002058:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800205a:	07db      	lsls	r3, r3, #31
 800205c:	d503      	bpl.n	8002066 <_vfiprintf_r+0x52>
 800205e:	2001      	movs	r0, #1
 8002060:	4240      	negs	r0, r0
 8002062:	b021      	add	sp, #132	@ 0x84
 8002064:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002066:	89bb      	ldrh	r3, [r7, #12]
 8002068:	059b      	lsls	r3, r3, #22
 800206a:	d4f8      	bmi.n	800205e <_vfiprintf_r+0x4a>
 800206c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800206e:	f7ff fea1 	bl	8001db4 <__retarget_lock_release_recursive>
 8002072:	e7f4      	b.n	800205e <_vfiprintf_r+0x4a>
 8002074:	2300      	movs	r3, #0
 8002076:	ac08      	add	r4, sp, #32
 8002078:	6163      	str	r3, [r4, #20]
 800207a:	3320      	adds	r3, #32
 800207c:	7663      	strb	r3, [r4, #25]
 800207e:	3310      	adds	r3, #16
 8002080:	76a3      	strb	r3, [r4, #26]
 8002082:	9607      	str	r6, [sp, #28]
 8002084:	002e      	movs	r6, r5
 8002086:	7833      	ldrb	r3, [r6, #0]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <_vfiprintf_r+0x7c>
 800208c:	2b25      	cmp	r3, #37	@ 0x25
 800208e:	d148      	bne.n	8002122 <_vfiprintf_r+0x10e>
 8002090:	1b73      	subs	r3, r6, r5
 8002092:	9305      	str	r3, [sp, #20]
 8002094:	42ae      	cmp	r6, r5
 8002096:	d00b      	beq.n	80020b0 <_vfiprintf_r+0x9c>
 8002098:	002a      	movs	r2, r5
 800209a:	0039      	movs	r1, r7
 800209c:	9803      	ldr	r0, [sp, #12]
 800209e:	f7ff ffa6 	bl	8001fee <__sfputs_r>
 80020a2:	3001      	adds	r0, #1
 80020a4:	d100      	bne.n	80020a8 <_vfiprintf_r+0x94>
 80020a6:	e0ae      	b.n	8002206 <_vfiprintf_r+0x1f2>
 80020a8:	6963      	ldr	r3, [r4, #20]
 80020aa:	9a05      	ldr	r2, [sp, #20]
 80020ac:	189b      	adds	r3, r3, r2
 80020ae:	6163      	str	r3, [r4, #20]
 80020b0:	7833      	ldrb	r3, [r6, #0]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d100      	bne.n	80020b8 <_vfiprintf_r+0xa4>
 80020b6:	e0a6      	b.n	8002206 <_vfiprintf_r+0x1f2>
 80020b8:	2201      	movs	r2, #1
 80020ba:	2300      	movs	r3, #0
 80020bc:	4252      	negs	r2, r2
 80020be:	6062      	str	r2, [r4, #4]
 80020c0:	a904      	add	r1, sp, #16
 80020c2:	3254      	adds	r2, #84	@ 0x54
 80020c4:	1852      	adds	r2, r2, r1
 80020c6:	1c75      	adds	r5, r6, #1
 80020c8:	6023      	str	r3, [r4, #0]
 80020ca:	60e3      	str	r3, [r4, #12]
 80020cc:	60a3      	str	r3, [r4, #8]
 80020ce:	7013      	strb	r3, [r2, #0]
 80020d0:	65a3      	str	r3, [r4, #88]	@ 0x58
 80020d2:	4b59      	ldr	r3, [pc, #356]	@ (8002238 <_vfiprintf_r+0x224>)
 80020d4:	2205      	movs	r2, #5
 80020d6:	0018      	movs	r0, r3
 80020d8:	7829      	ldrb	r1, [r5, #0]
 80020da:	9305      	str	r3, [sp, #20]
 80020dc:	f000 fb88 	bl	80027f0 <memchr>
 80020e0:	1c6e      	adds	r6, r5, #1
 80020e2:	2800      	cmp	r0, #0
 80020e4:	d11f      	bne.n	8002126 <_vfiprintf_r+0x112>
 80020e6:	6822      	ldr	r2, [r4, #0]
 80020e8:	06d3      	lsls	r3, r2, #27
 80020ea:	d504      	bpl.n	80020f6 <_vfiprintf_r+0xe2>
 80020ec:	2353      	movs	r3, #83	@ 0x53
 80020ee:	a904      	add	r1, sp, #16
 80020f0:	185b      	adds	r3, r3, r1
 80020f2:	2120      	movs	r1, #32
 80020f4:	7019      	strb	r1, [r3, #0]
 80020f6:	0713      	lsls	r3, r2, #28
 80020f8:	d504      	bpl.n	8002104 <_vfiprintf_r+0xf0>
 80020fa:	2353      	movs	r3, #83	@ 0x53
 80020fc:	a904      	add	r1, sp, #16
 80020fe:	185b      	adds	r3, r3, r1
 8002100:	212b      	movs	r1, #43	@ 0x2b
 8002102:	7019      	strb	r1, [r3, #0]
 8002104:	782b      	ldrb	r3, [r5, #0]
 8002106:	2b2a      	cmp	r3, #42	@ 0x2a
 8002108:	d016      	beq.n	8002138 <_vfiprintf_r+0x124>
 800210a:	002e      	movs	r6, r5
 800210c:	2100      	movs	r1, #0
 800210e:	200a      	movs	r0, #10
 8002110:	68e3      	ldr	r3, [r4, #12]
 8002112:	7832      	ldrb	r2, [r6, #0]
 8002114:	1c75      	adds	r5, r6, #1
 8002116:	3a30      	subs	r2, #48	@ 0x30
 8002118:	2a09      	cmp	r2, #9
 800211a:	d950      	bls.n	80021be <_vfiprintf_r+0x1aa>
 800211c:	2900      	cmp	r1, #0
 800211e:	d111      	bne.n	8002144 <_vfiprintf_r+0x130>
 8002120:	e017      	b.n	8002152 <_vfiprintf_r+0x13e>
 8002122:	3601      	adds	r6, #1
 8002124:	e7af      	b.n	8002086 <_vfiprintf_r+0x72>
 8002126:	9b05      	ldr	r3, [sp, #20]
 8002128:	6822      	ldr	r2, [r4, #0]
 800212a:	1ac0      	subs	r0, r0, r3
 800212c:	2301      	movs	r3, #1
 800212e:	4083      	lsls	r3, r0
 8002130:	4313      	orrs	r3, r2
 8002132:	0035      	movs	r5, r6
 8002134:	6023      	str	r3, [r4, #0]
 8002136:	e7cc      	b.n	80020d2 <_vfiprintf_r+0xbe>
 8002138:	9b07      	ldr	r3, [sp, #28]
 800213a:	1d19      	adds	r1, r3, #4
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	9107      	str	r1, [sp, #28]
 8002140:	2b00      	cmp	r3, #0
 8002142:	db01      	blt.n	8002148 <_vfiprintf_r+0x134>
 8002144:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002146:	e004      	b.n	8002152 <_vfiprintf_r+0x13e>
 8002148:	425b      	negs	r3, r3
 800214a:	60e3      	str	r3, [r4, #12]
 800214c:	2302      	movs	r3, #2
 800214e:	4313      	orrs	r3, r2
 8002150:	6023      	str	r3, [r4, #0]
 8002152:	7833      	ldrb	r3, [r6, #0]
 8002154:	2b2e      	cmp	r3, #46	@ 0x2e
 8002156:	d10c      	bne.n	8002172 <_vfiprintf_r+0x15e>
 8002158:	7873      	ldrb	r3, [r6, #1]
 800215a:	2b2a      	cmp	r3, #42	@ 0x2a
 800215c:	d134      	bne.n	80021c8 <_vfiprintf_r+0x1b4>
 800215e:	9b07      	ldr	r3, [sp, #28]
 8002160:	3602      	adds	r6, #2
 8002162:	1d1a      	adds	r2, r3, #4
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	9207      	str	r2, [sp, #28]
 8002168:	2b00      	cmp	r3, #0
 800216a:	da01      	bge.n	8002170 <_vfiprintf_r+0x15c>
 800216c:	2301      	movs	r3, #1
 800216e:	425b      	negs	r3, r3
 8002170:	9309      	str	r3, [sp, #36]	@ 0x24
 8002172:	4d32      	ldr	r5, [pc, #200]	@ (800223c <_vfiprintf_r+0x228>)
 8002174:	2203      	movs	r2, #3
 8002176:	0028      	movs	r0, r5
 8002178:	7831      	ldrb	r1, [r6, #0]
 800217a:	f000 fb39 	bl	80027f0 <memchr>
 800217e:	2800      	cmp	r0, #0
 8002180:	d006      	beq.n	8002190 <_vfiprintf_r+0x17c>
 8002182:	2340      	movs	r3, #64	@ 0x40
 8002184:	1b40      	subs	r0, r0, r5
 8002186:	4083      	lsls	r3, r0
 8002188:	6822      	ldr	r2, [r4, #0]
 800218a:	3601      	adds	r6, #1
 800218c:	4313      	orrs	r3, r2
 800218e:	6023      	str	r3, [r4, #0]
 8002190:	7831      	ldrb	r1, [r6, #0]
 8002192:	2206      	movs	r2, #6
 8002194:	482a      	ldr	r0, [pc, #168]	@ (8002240 <_vfiprintf_r+0x22c>)
 8002196:	1c75      	adds	r5, r6, #1
 8002198:	7621      	strb	r1, [r4, #24]
 800219a:	f000 fb29 	bl	80027f0 <memchr>
 800219e:	2800      	cmp	r0, #0
 80021a0:	d040      	beq.n	8002224 <_vfiprintf_r+0x210>
 80021a2:	4b28      	ldr	r3, [pc, #160]	@ (8002244 <_vfiprintf_r+0x230>)
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d122      	bne.n	80021ee <_vfiprintf_r+0x1da>
 80021a8:	2207      	movs	r2, #7
 80021aa:	9b07      	ldr	r3, [sp, #28]
 80021ac:	3307      	adds	r3, #7
 80021ae:	4393      	bics	r3, r2
 80021b0:	3308      	adds	r3, #8
 80021b2:	9307      	str	r3, [sp, #28]
 80021b4:	6963      	ldr	r3, [r4, #20]
 80021b6:	9a04      	ldr	r2, [sp, #16]
 80021b8:	189b      	adds	r3, r3, r2
 80021ba:	6163      	str	r3, [r4, #20]
 80021bc:	e762      	b.n	8002084 <_vfiprintf_r+0x70>
 80021be:	4343      	muls	r3, r0
 80021c0:	002e      	movs	r6, r5
 80021c2:	2101      	movs	r1, #1
 80021c4:	189b      	adds	r3, r3, r2
 80021c6:	e7a4      	b.n	8002112 <_vfiprintf_r+0xfe>
 80021c8:	2300      	movs	r3, #0
 80021ca:	200a      	movs	r0, #10
 80021cc:	0019      	movs	r1, r3
 80021ce:	3601      	adds	r6, #1
 80021d0:	6063      	str	r3, [r4, #4]
 80021d2:	7832      	ldrb	r2, [r6, #0]
 80021d4:	1c75      	adds	r5, r6, #1
 80021d6:	3a30      	subs	r2, #48	@ 0x30
 80021d8:	2a09      	cmp	r2, #9
 80021da:	d903      	bls.n	80021e4 <_vfiprintf_r+0x1d0>
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d0c8      	beq.n	8002172 <_vfiprintf_r+0x15e>
 80021e0:	9109      	str	r1, [sp, #36]	@ 0x24
 80021e2:	e7c6      	b.n	8002172 <_vfiprintf_r+0x15e>
 80021e4:	4341      	muls	r1, r0
 80021e6:	002e      	movs	r6, r5
 80021e8:	2301      	movs	r3, #1
 80021ea:	1889      	adds	r1, r1, r2
 80021ec:	e7f1      	b.n	80021d2 <_vfiprintf_r+0x1be>
 80021ee:	aa07      	add	r2, sp, #28
 80021f0:	9200      	str	r2, [sp, #0]
 80021f2:	0021      	movs	r1, r4
 80021f4:	003a      	movs	r2, r7
 80021f6:	4b14      	ldr	r3, [pc, #80]	@ (8002248 <_vfiprintf_r+0x234>)
 80021f8:	9803      	ldr	r0, [sp, #12]
 80021fa:	e000      	b.n	80021fe <_vfiprintf_r+0x1ea>
 80021fc:	bf00      	nop
 80021fe:	9004      	str	r0, [sp, #16]
 8002200:	9b04      	ldr	r3, [sp, #16]
 8002202:	3301      	adds	r3, #1
 8002204:	d1d6      	bne.n	80021b4 <_vfiprintf_r+0x1a0>
 8002206:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002208:	07db      	lsls	r3, r3, #31
 800220a:	d405      	bmi.n	8002218 <_vfiprintf_r+0x204>
 800220c:	89bb      	ldrh	r3, [r7, #12]
 800220e:	059b      	lsls	r3, r3, #22
 8002210:	d402      	bmi.n	8002218 <_vfiprintf_r+0x204>
 8002212:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002214:	f7ff fdce 	bl	8001db4 <__retarget_lock_release_recursive>
 8002218:	89bb      	ldrh	r3, [r7, #12]
 800221a:	065b      	lsls	r3, r3, #25
 800221c:	d500      	bpl.n	8002220 <_vfiprintf_r+0x20c>
 800221e:	e71e      	b.n	800205e <_vfiprintf_r+0x4a>
 8002220:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8002222:	e71e      	b.n	8002062 <_vfiprintf_r+0x4e>
 8002224:	aa07      	add	r2, sp, #28
 8002226:	9200      	str	r2, [sp, #0]
 8002228:	0021      	movs	r1, r4
 800222a:	003a      	movs	r2, r7
 800222c:	4b06      	ldr	r3, [pc, #24]	@ (8002248 <_vfiprintf_r+0x234>)
 800222e:	9803      	ldr	r0, [sp, #12]
 8002230:	f000 f87c 	bl	800232c <_printf_i>
 8002234:	e7e3      	b.n	80021fe <_vfiprintf_r+0x1ea>
 8002236:	46c0      	nop			@ (mov r8, r8)
 8002238:	08002a7d 	.word	0x08002a7d
 800223c:	08002a83 	.word	0x08002a83
 8002240:	08002a87 	.word	0x08002a87
 8002244:	00000000 	.word	0x00000000
 8002248:	08001fef 	.word	0x08001fef

0800224c <_printf_common>:
 800224c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800224e:	0016      	movs	r6, r2
 8002250:	9301      	str	r3, [sp, #4]
 8002252:	688a      	ldr	r2, [r1, #8]
 8002254:	690b      	ldr	r3, [r1, #16]
 8002256:	000c      	movs	r4, r1
 8002258:	9000      	str	r0, [sp, #0]
 800225a:	4293      	cmp	r3, r2
 800225c:	da00      	bge.n	8002260 <_printf_common+0x14>
 800225e:	0013      	movs	r3, r2
 8002260:	0022      	movs	r2, r4
 8002262:	6033      	str	r3, [r6, #0]
 8002264:	3243      	adds	r2, #67	@ 0x43
 8002266:	7812      	ldrb	r2, [r2, #0]
 8002268:	2a00      	cmp	r2, #0
 800226a:	d001      	beq.n	8002270 <_printf_common+0x24>
 800226c:	3301      	adds	r3, #1
 800226e:	6033      	str	r3, [r6, #0]
 8002270:	6823      	ldr	r3, [r4, #0]
 8002272:	069b      	lsls	r3, r3, #26
 8002274:	d502      	bpl.n	800227c <_printf_common+0x30>
 8002276:	6833      	ldr	r3, [r6, #0]
 8002278:	3302      	adds	r3, #2
 800227a:	6033      	str	r3, [r6, #0]
 800227c:	6822      	ldr	r2, [r4, #0]
 800227e:	2306      	movs	r3, #6
 8002280:	0015      	movs	r5, r2
 8002282:	401d      	ands	r5, r3
 8002284:	421a      	tst	r2, r3
 8002286:	d027      	beq.n	80022d8 <_printf_common+0x8c>
 8002288:	0023      	movs	r3, r4
 800228a:	3343      	adds	r3, #67	@ 0x43
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	1e5a      	subs	r2, r3, #1
 8002290:	4193      	sbcs	r3, r2
 8002292:	6822      	ldr	r2, [r4, #0]
 8002294:	0692      	lsls	r2, r2, #26
 8002296:	d430      	bmi.n	80022fa <_printf_common+0xae>
 8002298:	0022      	movs	r2, r4
 800229a:	9901      	ldr	r1, [sp, #4]
 800229c:	9800      	ldr	r0, [sp, #0]
 800229e:	9d08      	ldr	r5, [sp, #32]
 80022a0:	3243      	adds	r2, #67	@ 0x43
 80022a2:	47a8      	blx	r5
 80022a4:	3001      	adds	r0, #1
 80022a6:	d025      	beq.n	80022f4 <_printf_common+0xa8>
 80022a8:	2206      	movs	r2, #6
 80022aa:	6823      	ldr	r3, [r4, #0]
 80022ac:	2500      	movs	r5, #0
 80022ae:	4013      	ands	r3, r2
 80022b0:	2b04      	cmp	r3, #4
 80022b2:	d105      	bne.n	80022c0 <_printf_common+0x74>
 80022b4:	6833      	ldr	r3, [r6, #0]
 80022b6:	68e5      	ldr	r5, [r4, #12]
 80022b8:	1aed      	subs	r5, r5, r3
 80022ba:	43eb      	mvns	r3, r5
 80022bc:	17db      	asrs	r3, r3, #31
 80022be:	401d      	ands	r5, r3
 80022c0:	68a3      	ldr	r3, [r4, #8]
 80022c2:	6922      	ldr	r2, [r4, #16]
 80022c4:	4293      	cmp	r3, r2
 80022c6:	dd01      	ble.n	80022cc <_printf_common+0x80>
 80022c8:	1a9b      	subs	r3, r3, r2
 80022ca:	18ed      	adds	r5, r5, r3
 80022cc:	2600      	movs	r6, #0
 80022ce:	42b5      	cmp	r5, r6
 80022d0:	d120      	bne.n	8002314 <_printf_common+0xc8>
 80022d2:	2000      	movs	r0, #0
 80022d4:	e010      	b.n	80022f8 <_printf_common+0xac>
 80022d6:	3501      	adds	r5, #1
 80022d8:	68e3      	ldr	r3, [r4, #12]
 80022da:	6832      	ldr	r2, [r6, #0]
 80022dc:	1a9b      	subs	r3, r3, r2
 80022de:	42ab      	cmp	r3, r5
 80022e0:	ddd2      	ble.n	8002288 <_printf_common+0x3c>
 80022e2:	0022      	movs	r2, r4
 80022e4:	2301      	movs	r3, #1
 80022e6:	9901      	ldr	r1, [sp, #4]
 80022e8:	9800      	ldr	r0, [sp, #0]
 80022ea:	9f08      	ldr	r7, [sp, #32]
 80022ec:	3219      	adds	r2, #25
 80022ee:	47b8      	blx	r7
 80022f0:	3001      	adds	r0, #1
 80022f2:	d1f0      	bne.n	80022d6 <_printf_common+0x8a>
 80022f4:	2001      	movs	r0, #1
 80022f6:	4240      	negs	r0, r0
 80022f8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80022fa:	2030      	movs	r0, #48	@ 0x30
 80022fc:	18e1      	adds	r1, r4, r3
 80022fe:	3143      	adds	r1, #67	@ 0x43
 8002300:	7008      	strb	r0, [r1, #0]
 8002302:	0021      	movs	r1, r4
 8002304:	1c5a      	adds	r2, r3, #1
 8002306:	3145      	adds	r1, #69	@ 0x45
 8002308:	7809      	ldrb	r1, [r1, #0]
 800230a:	18a2      	adds	r2, r4, r2
 800230c:	3243      	adds	r2, #67	@ 0x43
 800230e:	3302      	adds	r3, #2
 8002310:	7011      	strb	r1, [r2, #0]
 8002312:	e7c1      	b.n	8002298 <_printf_common+0x4c>
 8002314:	0022      	movs	r2, r4
 8002316:	2301      	movs	r3, #1
 8002318:	9901      	ldr	r1, [sp, #4]
 800231a:	9800      	ldr	r0, [sp, #0]
 800231c:	9f08      	ldr	r7, [sp, #32]
 800231e:	321a      	adds	r2, #26
 8002320:	47b8      	blx	r7
 8002322:	3001      	adds	r0, #1
 8002324:	d0e6      	beq.n	80022f4 <_printf_common+0xa8>
 8002326:	3601      	adds	r6, #1
 8002328:	e7d1      	b.n	80022ce <_printf_common+0x82>
	...

0800232c <_printf_i>:
 800232c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800232e:	b08b      	sub	sp, #44	@ 0x2c
 8002330:	9206      	str	r2, [sp, #24]
 8002332:	000a      	movs	r2, r1
 8002334:	3243      	adds	r2, #67	@ 0x43
 8002336:	9307      	str	r3, [sp, #28]
 8002338:	9005      	str	r0, [sp, #20]
 800233a:	9203      	str	r2, [sp, #12]
 800233c:	7e0a      	ldrb	r2, [r1, #24]
 800233e:	000c      	movs	r4, r1
 8002340:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8002342:	2a78      	cmp	r2, #120	@ 0x78
 8002344:	d809      	bhi.n	800235a <_printf_i+0x2e>
 8002346:	2a62      	cmp	r2, #98	@ 0x62
 8002348:	d80b      	bhi.n	8002362 <_printf_i+0x36>
 800234a:	2a00      	cmp	r2, #0
 800234c:	d100      	bne.n	8002350 <_printf_i+0x24>
 800234e:	e0bc      	b.n	80024ca <_printf_i+0x19e>
 8002350:	497b      	ldr	r1, [pc, #492]	@ (8002540 <_printf_i+0x214>)
 8002352:	9104      	str	r1, [sp, #16]
 8002354:	2a58      	cmp	r2, #88	@ 0x58
 8002356:	d100      	bne.n	800235a <_printf_i+0x2e>
 8002358:	e090      	b.n	800247c <_printf_i+0x150>
 800235a:	0025      	movs	r5, r4
 800235c:	3542      	adds	r5, #66	@ 0x42
 800235e:	702a      	strb	r2, [r5, #0]
 8002360:	e022      	b.n	80023a8 <_printf_i+0x7c>
 8002362:	0010      	movs	r0, r2
 8002364:	3863      	subs	r0, #99	@ 0x63
 8002366:	2815      	cmp	r0, #21
 8002368:	d8f7      	bhi.n	800235a <_printf_i+0x2e>
 800236a:	f7fd fecd 	bl	8000108 <__gnu_thumb1_case_shi>
 800236e:	0016      	.short	0x0016
 8002370:	fff6001f 	.word	0xfff6001f
 8002374:	fff6fff6 	.word	0xfff6fff6
 8002378:	001ffff6 	.word	0x001ffff6
 800237c:	fff6fff6 	.word	0xfff6fff6
 8002380:	fff6fff6 	.word	0xfff6fff6
 8002384:	003600a1 	.word	0x003600a1
 8002388:	fff60080 	.word	0xfff60080
 800238c:	00b2fff6 	.word	0x00b2fff6
 8002390:	0036fff6 	.word	0x0036fff6
 8002394:	fff6fff6 	.word	0xfff6fff6
 8002398:	0084      	.short	0x0084
 800239a:	0025      	movs	r5, r4
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	3542      	adds	r5, #66	@ 0x42
 80023a0:	1d11      	adds	r1, r2, #4
 80023a2:	6019      	str	r1, [r3, #0]
 80023a4:	6813      	ldr	r3, [r2, #0]
 80023a6:	702b      	strb	r3, [r5, #0]
 80023a8:	2301      	movs	r3, #1
 80023aa:	e0a0      	b.n	80024ee <_printf_i+0x1c2>
 80023ac:	6818      	ldr	r0, [r3, #0]
 80023ae:	6809      	ldr	r1, [r1, #0]
 80023b0:	1d02      	adds	r2, r0, #4
 80023b2:	060d      	lsls	r5, r1, #24
 80023b4:	d50b      	bpl.n	80023ce <_printf_i+0xa2>
 80023b6:	6806      	ldr	r6, [r0, #0]
 80023b8:	601a      	str	r2, [r3, #0]
 80023ba:	2e00      	cmp	r6, #0
 80023bc:	da03      	bge.n	80023c6 <_printf_i+0x9a>
 80023be:	232d      	movs	r3, #45	@ 0x2d
 80023c0:	9a03      	ldr	r2, [sp, #12]
 80023c2:	4276      	negs	r6, r6
 80023c4:	7013      	strb	r3, [r2, #0]
 80023c6:	4b5e      	ldr	r3, [pc, #376]	@ (8002540 <_printf_i+0x214>)
 80023c8:	270a      	movs	r7, #10
 80023ca:	9304      	str	r3, [sp, #16]
 80023cc:	e018      	b.n	8002400 <_printf_i+0xd4>
 80023ce:	6806      	ldr	r6, [r0, #0]
 80023d0:	601a      	str	r2, [r3, #0]
 80023d2:	0649      	lsls	r1, r1, #25
 80023d4:	d5f1      	bpl.n	80023ba <_printf_i+0x8e>
 80023d6:	b236      	sxth	r6, r6
 80023d8:	e7ef      	b.n	80023ba <_printf_i+0x8e>
 80023da:	6808      	ldr	r0, [r1, #0]
 80023dc:	6819      	ldr	r1, [r3, #0]
 80023de:	c940      	ldmia	r1!, {r6}
 80023e0:	0605      	lsls	r5, r0, #24
 80023e2:	d402      	bmi.n	80023ea <_printf_i+0xbe>
 80023e4:	0640      	lsls	r0, r0, #25
 80023e6:	d500      	bpl.n	80023ea <_printf_i+0xbe>
 80023e8:	b2b6      	uxth	r6, r6
 80023ea:	6019      	str	r1, [r3, #0]
 80023ec:	4b54      	ldr	r3, [pc, #336]	@ (8002540 <_printf_i+0x214>)
 80023ee:	270a      	movs	r7, #10
 80023f0:	9304      	str	r3, [sp, #16]
 80023f2:	2a6f      	cmp	r2, #111	@ 0x6f
 80023f4:	d100      	bne.n	80023f8 <_printf_i+0xcc>
 80023f6:	3f02      	subs	r7, #2
 80023f8:	0023      	movs	r3, r4
 80023fa:	2200      	movs	r2, #0
 80023fc:	3343      	adds	r3, #67	@ 0x43
 80023fe:	701a      	strb	r2, [r3, #0]
 8002400:	6863      	ldr	r3, [r4, #4]
 8002402:	60a3      	str	r3, [r4, #8]
 8002404:	2b00      	cmp	r3, #0
 8002406:	db03      	blt.n	8002410 <_printf_i+0xe4>
 8002408:	2104      	movs	r1, #4
 800240a:	6822      	ldr	r2, [r4, #0]
 800240c:	438a      	bics	r2, r1
 800240e:	6022      	str	r2, [r4, #0]
 8002410:	2e00      	cmp	r6, #0
 8002412:	d102      	bne.n	800241a <_printf_i+0xee>
 8002414:	9d03      	ldr	r5, [sp, #12]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d00c      	beq.n	8002434 <_printf_i+0x108>
 800241a:	9d03      	ldr	r5, [sp, #12]
 800241c:	0030      	movs	r0, r6
 800241e:	0039      	movs	r1, r7
 8002420:	f7fd ff02 	bl	8000228 <__aeabi_uidivmod>
 8002424:	9b04      	ldr	r3, [sp, #16]
 8002426:	3d01      	subs	r5, #1
 8002428:	5c5b      	ldrb	r3, [r3, r1]
 800242a:	702b      	strb	r3, [r5, #0]
 800242c:	0033      	movs	r3, r6
 800242e:	0006      	movs	r6, r0
 8002430:	429f      	cmp	r7, r3
 8002432:	d9f3      	bls.n	800241c <_printf_i+0xf0>
 8002434:	2f08      	cmp	r7, #8
 8002436:	d109      	bne.n	800244c <_printf_i+0x120>
 8002438:	6823      	ldr	r3, [r4, #0]
 800243a:	07db      	lsls	r3, r3, #31
 800243c:	d506      	bpl.n	800244c <_printf_i+0x120>
 800243e:	6862      	ldr	r2, [r4, #4]
 8002440:	6923      	ldr	r3, [r4, #16]
 8002442:	429a      	cmp	r2, r3
 8002444:	dc02      	bgt.n	800244c <_printf_i+0x120>
 8002446:	2330      	movs	r3, #48	@ 0x30
 8002448:	3d01      	subs	r5, #1
 800244a:	702b      	strb	r3, [r5, #0]
 800244c:	9b03      	ldr	r3, [sp, #12]
 800244e:	1b5b      	subs	r3, r3, r5
 8002450:	6123      	str	r3, [r4, #16]
 8002452:	9b07      	ldr	r3, [sp, #28]
 8002454:	0021      	movs	r1, r4
 8002456:	9300      	str	r3, [sp, #0]
 8002458:	9805      	ldr	r0, [sp, #20]
 800245a:	9b06      	ldr	r3, [sp, #24]
 800245c:	aa09      	add	r2, sp, #36	@ 0x24
 800245e:	f7ff fef5 	bl	800224c <_printf_common>
 8002462:	3001      	adds	r0, #1
 8002464:	d148      	bne.n	80024f8 <_printf_i+0x1cc>
 8002466:	2001      	movs	r0, #1
 8002468:	4240      	negs	r0, r0
 800246a:	b00b      	add	sp, #44	@ 0x2c
 800246c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800246e:	2220      	movs	r2, #32
 8002470:	6809      	ldr	r1, [r1, #0]
 8002472:	430a      	orrs	r2, r1
 8002474:	6022      	str	r2, [r4, #0]
 8002476:	2278      	movs	r2, #120	@ 0x78
 8002478:	4932      	ldr	r1, [pc, #200]	@ (8002544 <_printf_i+0x218>)
 800247a:	9104      	str	r1, [sp, #16]
 800247c:	0021      	movs	r1, r4
 800247e:	3145      	adds	r1, #69	@ 0x45
 8002480:	700a      	strb	r2, [r1, #0]
 8002482:	6819      	ldr	r1, [r3, #0]
 8002484:	6822      	ldr	r2, [r4, #0]
 8002486:	c940      	ldmia	r1!, {r6}
 8002488:	0610      	lsls	r0, r2, #24
 800248a:	d402      	bmi.n	8002492 <_printf_i+0x166>
 800248c:	0650      	lsls	r0, r2, #25
 800248e:	d500      	bpl.n	8002492 <_printf_i+0x166>
 8002490:	b2b6      	uxth	r6, r6
 8002492:	6019      	str	r1, [r3, #0]
 8002494:	07d3      	lsls	r3, r2, #31
 8002496:	d502      	bpl.n	800249e <_printf_i+0x172>
 8002498:	2320      	movs	r3, #32
 800249a:	4313      	orrs	r3, r2
 800249c:	6023      	str	r3, [r4, #0]
 800249e:	2e00      	cmp	r6, #0
 80024a0:	d001      	beq.n	80024a6 <_printf_i+0x17a>
 80024a2:	2710      	movs	r7, #16
 80024a4:	e7a8      	b.n	80023f8 <_printf_i+0xcc>
 80024a6:	2220      	movs	r2, #32
 80024a8:	6823      	ldr	r3, [r4, #0]
 80024aa:	4393      	bics	r3, r2
 80024ac:	6023      	str	r3, [r4, #0]
 80024ae:	e7f8      	b.n	80024a2 <_printf_i+0x176>
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	680d      	ldr	r5, [r1, #0]
 80024b4:	1d10      	adds	r0, r2, #4
 80024b6:	6949      	ldr	r1, [r1, #20]
 80024b8:	6018      	str	r0, [r3, #0]
 80024ba:	6813      	ldr	r3, [r2, #0]
 80024bc:	062e      	lsls	r6, r5, #24
 80024be:	d501      	bpl.n	80024c4 <_printf_i+0x198>
 80024c0:	6019      	str	r1, [r3, #0]
 80024c2:	e002      	b.n	80024ca <_printf_i+0x19e>
 80024c4:	066d      	lsls	r5, r5, #25
 80024c6:	d5fb      	bpl.n	80024c0 <_printf_i+0x194>
 80024c8:	8019      	strh	r1, [r3, #0]
 80024ca:	2300      	movs	r3, #0
 80024cc:	9d03      	ldr	r5, [sp, #12]
 80024ce:	6123      	str	r3, [r4, #16]
 80024d0:	e7bf      	b.n	8002452 <_printf_i+0x126>
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	1d11      	adds	r1, r2, #4
 80024d6:	6019      	str	r1, [r3, #0]
 80024d8:	6815      	ldr	r5, [r2, #0]
 80024da:	2100      	movs	r1, #0
 80024dc:	0028      	movs	r0, r5
 80024de:	6862      	ldr	r2, [r4, #4]
 80024e0:	f000 f986 	bl	80027f0 <memchr>
 80024e4:	2800      	cmp	r0, #0
 80024e6:	d001      	beq.n	80024ec <_printf_i+0x1c0>
 80024e8:	1b40      	subs	r0, r0, r5
 80024ea:	6060      	str	r0, [r4, #4]
 80024ec:	6863      	ldr	r3, [r4, #4]
 80024ee:	6123      	str	r3, [r4, #16]
 80024f0:	2300      	movs	r3, #0
 80024f2:	9a03      	ldr	r2, [sp, #12]
 80024f4:	7013      	strb	r3, [r2, #0]
 80024f6:	e7ac      	b.n	8002452 <_printf_i+0x126>
 80024f8:	002a      	movs	r2, r5
 80024fa:	6923      	ldr	r3, [r4, #16]
 80024fc:	9906      	ldr	r1, [sp, #24]
 80024fe:	9805      	ldr	r0, [sp, #20]
 8002500:	9d07      	ldr	r5, [sp, #28]
 8002502:	47a8      	blx	r5
 8002504:	3001      	adds	r0, #1
 8002506:	d0ae      	beq.n	8002466 <_printf_i+0x13a>
 8002508:	6823      	ldr	r3, [r4, #0]
 800250a:	079b      	lsls	r3, r3, #30
 800250c:	d415      	bmi.n	800253a <_printf_i+0x20e>
 800250e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002510:	68e0      	ldr	r0, [r4, #12]
 8002512:	4298      	cmp	r0, r3
 8002514:	daa9      	bge.n	800246a <_printf_i+0x13e>
 8002516:	0018      	movs	r0, r3
 8002518:	e7a7      	b.n	800246a <_printf_i+0x13e>
 800251a:	0022      	movs	r2, r4
 800251c:	2301      	movs	r3, #1
 800251e:	9906      	ldr	r1, [sp, #24]
 8002520:	9805      	ldr	r0, [sp, #20]
 8002522:	9e07      	ldr	r6, [sp, #28]
 8002524:	3219      	adds	r2, #25
 8002526:	47b0      	blx	r6
 8002528:	3001      	adds	r0, #1
 800252a:	d09c      	beq.n	8002466 <_printf_i+0x13a>
 800252c:	3501      	adds	r5, #1
 800252e:	68e3      	ldr	r3, [r4, #12]
 8002530:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002532:	1a9b      	subs	r3, r3, r2
 8002534:	42ab      	cmp	r3, r5
 8002536:	dcf0      	bgt.n	800251a <_printf_i+0x1ee>
 8002538:	e7e9      	b.n	800250e <_printf_i+0x1e2>
 800253a:	2500      	movs	r5, #0
 800253c:	e7f7      	b.n	800252e <_printf_i+0x202>
 800253e:	46c0      	nop			@ (mov r8, r8)
 8002540:	08002a8e 	.word	0x08002a8e
 8002544:	08002a9f 	.word	0x08002a9f

08002548 <__sflush_r>:
 8002548:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800254a:	220c      	movs	r2, #12
 800254c:	5e8b      	ldrsh	r3, [r1, r2]
 800254e:	0005      	movs	r5, r0
 8002550:	000c      	movs	r4, r1
 8002552:	071a      	lsls	r2, r3, #28
 8002554:	d456      	bmi.n	8002604 <__sflush_r+0xbc>
 8002556:	684a      	ldr	r2, [r1, #4]
 8002558:	2a00      	cmp	r2, #0
 800255a:	dc02      	bgt.n	8002562 <__sflush_r+0x1a>
 800255c:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800255e:	2a00      	cmp	r2, #0
 8002560:	dd4e      	ble.n	8002600 <__sflush_r+0xb8>
 8002562:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8002564:	2f00      	cmp	r7, #0
 8002566:	d04b      	beq.n	8002600 <__sflush_r+0xb8>
 8002568:	2200      	movs	r2, #0
 800256a:	2080      	movs	r0, #128	@ 0x80
 800256c:	682e      	ldr	r6, [r5, #0]
 800256e:	602a      	str	r2, [r5, #0]
 8002570:	001a      	movs	r2, r3
 8002572:	0140      	lsls	r0, r0, #5
 8002574:	6a21      	ldr	r1, [r4, #32]
 8002576:	4002      	ands	r2, r0
 8002578:	4203      	tst	r3, r0
 800257a:	d033      	beq.n	80025e4 <__sflush_r+0x9c>
 800257c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800257e:	89a3      	ldrh	r3, [r4, #12]
 8002580:	075b      	lsls	r3, r3, #29
 8002582:	d506      	bpl.n	8002592 <__sflush_r+0x4a>
 8002584:	6863      	ldr	r3, [r4, #4]
 8002586:	1ad2      	subs	r2, r2, r3
 8002588:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <__sflush_r+0x4a>
 800258e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002590:	1ad2      	subs	r2, r2, r3
 8002592:	2300      	movs	r3, #0
 8002594:	0028      	movs	r0, r5
 8002596:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8002598:	6a21      	ldr	r1, [r4, #32]
 800259a:	47b8      	blx	r7
 800259c:	89a2      	ldrh	r2, [r4, #12]
 800259e:	1c43      	adds	r3, r0, #1
 80025a0:	d106      	bne.n	80025b0 <__sflush_r+0x68>
 80025a2:	6829      	ldr	r1, [r5, #0]
 80025a4:	291d      	cmp	r1, #29
 80025a6:	d846      	bhi.n	8002636 <__sflush_r+0xee>
 80025a8:	4b29      	ldr	r3, [pc, #164]	@ (8002650 <__sflush_r+0x108>)
 80025aa:	410b      	asrs	r3, r1
 80025ac:	07db      	lsls	r3, r3, #31
 80025ae:	d442      	bmi.n	8002636 <__sflush_r+0xee>
 80025b0:	2300      	movs	r3, #0
 80025b2:	6063      	str	r3, [r4, #4]
 80025b4:	6923      	ldr	r3, [r4, #16]
 80025b6:	6023      	str	r3, [r4, #0]
 80025b8:	04d2      	lsls	r2, r2, #19
 80025ba:	d505      	bpl.n	80025c8 <__sflush_r+0x80>
 80025bc:	1c43      	adds	r3, r0, #1
 80025be:	d102      	bne.n	80025c6 <__sflush_r+0x7e>
 80025c0:	682b      	ldr	r3, [r5, #0]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d100      	bne.n	80025c8 <__sflush_r+0x80>
 80025c6:	6560      	str	r0, [r4, #84]	@ 0x54
 80025c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80025ca:	602e      	str	r6, [r5, #0]
 80025cc:	2900      	cmp	r1, #0
 80025ce:	d017      	beq.n	8002600 <__sflush_r+0xb8>
 80025d0:	0023      	movs	r3, r4
 80025d2:	3344      	adds	r3, #68	@ 0x44
 80025d4:	4299      	cmp	r1, r3
 80025d6:	d002      	beq.n	80025de <__sflush_r+0x96>
 80025d8:	0028      	movs	r0, r5
 80025da:	f7ff fbed 	bl	8001db8 <_free_r>
 80025de:	2300      	movs	r3, #0
 80025e0:	6363      	str	r3, [r4, #52]	@ 0x34
 80025e2:	e00d      	b.n	8002600 <__sflush_r+0xb8>
 80025e4:	2301      	movs	r3, #1
 80025e6:	0028      	movs	r0, r5
 80025e8:	47b8      	blx	r7
 80025ea:	0002      	movs	r2, r0
 80025ec:	1c43      	adds	r3, r0, #1
 80025ee:	d1c6      	bne.n	800257e <__sflush_r+0x36>
 80025f0:	682b      	ldr	r3, [r5, #0]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d0c3      	beq.n	800257e <__sflush_r+0x36>
 80025f6:	2b1d      	cmp	r3, #29
 80025f8:	d001      	beq.n	80025fe <__sflush_r+0xb6>
 80025fa:	2b16      	cmp	r3, #22
 80025fc:	d11a      	bne.n	8002634 <__sflush_r+0xec>
 80025fe:	602e      	str	r6, [r5, #0]
 8002600:	2000      	movs	r0, #0
 8002602:	e01e      	b.n	8002642 <__sflush_r+0xfa>
 8002604:	690e      	ldr	r6, [r1, #16]
 8002606:	2e00      	cmp	r6, #0
 8002608:	d0fa      	beq.n	8002600 <__sflush_r+0xb8>
 800260a:	680f      	ldr	r7, [r1, #0]
 800260c:	600e      	str	r6, [r1, #0]
 800260e:	1bba      	subs	r2, r7, r6
 8002610:	9201      	str	r2, [sp, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	079b      	lsls	r3, r3, #30
 8002616:	d100      	bne.n	800261a <__sflush_r+0xd2>
 8002618:	694a      	ldr	r2, [r1, #20]
 800261a:	60a2      	str	r2, [r4, #8]
 800261c:	9b01      	ldr	r3, [sp, #4]
 800261e:	2b00      	cmp	r3, #0
 8002620:	ddee      	ble.n	8002600 <__sflush_r+0xb8>
 8002622:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002624:	0032      	movs	r2, r6
 8002626:	001f      	movs	r7, r3
 8002628:	0028      	movs	r0, r5
 800262a:	9b01      	ldr	r3, [sp, #4]
 800262c:	6a21      	ldr	r1, [r4, #32]
 800262e:	47b8      	blx	r7
 8002630:	2800      	cmp	r0, #0
 8002632:	dc07      	bgt.n	8002644 <__sflush_r+0xfc>
 8002634:	89a2      	ldrh	r2, [r4, #12]
 8002636:	2340      	movs	r3, #64	@ 0x40
 8002638:	2001      	movs	r0, #1
 800263a:	4313      	orrs	r3, r2
 800263c:	b21b      	sxth	r3, r3
 800263e:	81a3      	strh	r3, [r4, #12]
 8002640:	4240      	negs	r0, r0
 8002642:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002644:	9b01      	ldr	r3, [sp, #4]
 8002646:	1836      	adds	r6, r6, r0
 8002648:	1a1b      	subs	r3, r3, r0
 800264a:	9301      	str	r3, [sp, #4]
 800264c:	e7e6      	b.n	800261c <__sflush_r+0xd4>
 800264e:	46c0      	nop			@ (mov r8, r8)
 8002650:	dfbffffe 	.word	0xdfbffffe

08002654 <_fflush_r>:
 8002654:	690b      	ldr	r3, [r1, #16]
 8002656:	b570      	push	{r4, r5, r6, lr}
 8002658:	0005      	movs	r5, r0
 800265a:	000c      	movs	r4, r1
 800265c:	2b00      	cmp	r3, #0
 800265e:	d102      	bne.n	8002666 <_fflush_r+0x12>
 8002660:	2500      	movs	r5, #0
 8002662:	0028      	movs	r0, r5
 8002664:	bd70      	pop	{r4, r5, r6, pc}
 8002666:	2800      	cmp	r0, #0
 8002668:	d004      	beq.n	8002674 <_fflush_r+0x20>
 800266a:	6a03      	ldr	r3, [r0, #32]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d101      	bne.n	8002674 <_fflush_r+0x20>
 8002670:	f7ff f8aa 	bl	80017c8 <__sinit>
 8002674:	220c      	movs	r2, #12
 8002676:	5ea3      	ldrsh	r3, [r4, r2]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d0f1      	beq.n	8002660 <_fflush_r+0xc>
 800267c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800267e:	07d2      	lsls	r2, r2, #31
 8002680:	d404      	bmi.n	800268c <_fflush_r+0x38>
 8002682:	059b      	lsls	r3, r3, #22
 8002684:	d402      	bmi.n	800268c <_fflush_r+0x38>
 8002686:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002688:	f7ff fb93 	bl	8001db2 <__retarget_lock_acquire_recursive>
 800268c:	0028      	movs	r0, r5
 800268e:	0021      	movs	r1, r4
 8002690:	f7ff ff5a 	bl	8002548 <__sflush_r>
 8002694:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002696:	0005      	movs	r5, r0
 8002698:	07db      	lsls	r3, r3, #31
 800269a:	d4e2      	bmi.n	8002662 <_fflush_r+0xe>
 800269c:	89a3      	ldrh	r3, [r4, #12]
 800269e:	059b      	lsls	r3, r3, #22
 80026a0:	d4df      	bmi.n	8002662 <_fflush_r+0xe>
 80026a2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80026a4:	f7ff fb86 	bl	8001db4 <__retarget_lock_release_recursive>
 80026a8:	e7db      	b.n	8002662 <_fflush_r+0xe>
	...

080026ac <__swhatbuf_r>:
 80026ac:	b570      	push	{r4, r5, r6, lr}
 80026ae:	000e      	movs	r6, r1
 80026b0:	001d      	movs	r5, r3
 80026b2:	230e      	movs	r3, #14
 80026b4:	5ec9      	ldrsh	r1, [r1, r3]
 80026b6:	0014      	movs	r4, r2
 80026b8:	b096      	sub	sp, #88	@ 0x58
 80026ba:	2900      	cmp	r1, #0
 80026bc:	da0c      	bge.n	80026d8 <__swhatbuf_r+0x2c>
 80026be:	89b2      	ldrh	r2, [r6, #12]
 80026c0:	2380      	movs	r3, #128	@ 0x80
 80026c2:	0011      	movs	r1, r2
 80026c4:	4019      	ands	r1, r3
 80026c6:	421a      	tst	r2, r3
 80026c8:	d114      	bne.n	80026f4 <__swhatbuf_r+0x48>
 80026ca:	2380      	movs	r3, #128	@ 0x80
 80026cc:	00db      	lsls	r3, r3, #3
 80026ce:	2000      	movs	r0, #0
 80026d0:	6029      	str	r1, [r5, #0]
 80026d2:	6023      	str	r3, [r4, #0]
 80026d4:	b016      	add	sp, #88	@ 0x58
 80026d6:	bd70      	pop	{r4, r5, r6, pc}
 80026d8:	466a      	mov	r2, sp
 80026da:	f000 f853 	bl	8002784 <_fstat_r>
 80026de:	2800      	cmp	r0, #0
 80026e0:	dbed      	blt.n	80026be <__swhatbuf_r+0x12>
 80026e2:	23f0      	movs	r3, #240	@ 0xf0
 80026e4:	9901      	ldr	r1, [sp, #4]
 80026e6:	021b      	lsls	r3, r3, #8
 80026e8:	4019      	ands	r1, r3
 80026ea:	4b04      	ldr	r3, [pc, #16]	@ (80026fc <__swhatbuf_r+0x50>)
 80026ec:	18c9      	adds	r1, r1, r3
 80026ee:	424b      	negs	r3, r1
 80026f0:	4159      	adcs	r1, r3
 80026f2:	e7ea      	b.n	80026ca <__swhatbuf_r+0x1e>
 80026f4:	2100      	movs	r1, #0
 80026f6:	2340      	movs	r3, #64	@ 0x40
 80026f8:	e7e9      	b.n	80026ce <__swhatbuf_r+0x22>
 80026fa:	46c0      	nop			@ (mov r8, r8)
 80026fc:	ffffe000 	.word	0xffffe000

08002700 <__smakebuf_r>:
 8002700:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002702:	2602      	movs	r6, #2
 8002704:	898b      	ldrh	r3, [r1, #12]
 8002706:	0005      	movs	r5, r0
 8002708:	000c      	movs	r4, r1
 800270a:	b085      	sub	sp, #20
 800270c:	4233      	tst	r3, r6
 800270e:	d007      	beq.n	8002720 <__smakebuf_r+0x20>
 8002710:	0023      	movs	r3, r4
 8002712:	3347      	adds	r3, #71	@ 0x47
 8002714:	6023      	str	r3, [r4, #0]
 8002716:	6123      	str	r3, [r4, #16]
 8002718:	2301      	movs	r3, #1
 800271a:	6163      	str	r3, [r4, #20]
 800271c:	b005      	add	sp, #20
 800271e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002720:	ab03      	add	r3, sp, #12
 8002722:	aa02      	add	r2, sp, #8
 8002724:	f7ff ffc2 	bl	80026ac <__swhatbuf_r>
 8002728:	9f02      	ldr	r7, [sp, #8]
 800272a:	9001      	str	r0, [sp, #4]
 800272c:	0039      	movs	r1, r7
 800272e:	0028      	movs	r0, r5
 8002730:	f7ff fbb8 	bl	8001ea4 <_malloc_r>
 8002734:	2800      	cmp	r0, #0
 8002736:	d108      	bne.n	800274a <__smakebuf_r+0x4a>
 8002738:	220c      	movs	r2, #12
 800273a:	5ea3      	ldrsh	r3, [r4, r2]
 800273c:	059a      	lsls	r2, r3, #22
 800273e:	d4ed      	bmi.n	800271c <__smakebuf_r+0x1c>
 8002740:	2203      	movs	r2, #3
 8002742:	4393      	bics	r3, r2
 8002744:	431e      	orrs	r6, r3
 8002746:	81a6      	strh	r6, [r4, #12]
 8002748:	e7e2      	b.n	8002710 <__smakebuf_r+0x10>
 800274a:	2380      	movs	r3, #128	@ 0x80
 800274c:	89a2      	ldrh	r2, [r4, #12]
 800274e:	6020      	str	r0, [r4, #0]
 8002750:	4313      	orrs	r3, r2
 8002752:	81a3      	strh	r3, [r4, #12]
 8002754:	9b03      	ldr	r3, [sp, #12]
 8002756:	6120      	str	r0, [r4, #16]
 8002758:	6167      	str	r7, [r4, #20]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d00c      	beq.n	8002778 <__smakebuf_r+0x78>
 800275e:	0028      	movs	r0, r5
 8002760:	230e      	movs	r3, #14
 8002762:	5ee1      	ldrsh	r1, [r4, r3]
 8002764:	f000 f820 	bl	80027a8 <_isatty_r>
 8002768:	2800      	cmp	r0, #0
 800276a:	d005      	beq.n	8002778 <__smakebuf_r+0x78>
 800276c:	2303      	movs	r3, #3
 800276e:	89a2      	ldrh	r2, [r4, #12]
 8002770:	439a      	bics	r2, r3
 8002772:	3b02      	subs	r3, #2
 8002774:	4313      	orrs	r3, r2
 8002776:	81a3      	strh	r3, [r4, #12]
 8002778:	89a3      	ldrh	r3, [r4, #12]
 800277a:	9a01      	ldr	r2, [sp, #4]
 800277c:	4313      	orrs	r3, r2
 800277e:	81a3      	strh	r3, [r4, #12]
 8002780:	e7cc      	b.n	800271c <__smakebuf_r+0x1c>
	...

08002784 <_fstat_r>:
 8002784:	2300      	movs	r3, #0
 8002786:	b570      	push	{r4, r5, r6, lr}
 8002788:	4d06      	ldr	r5, [pc, #24]	@ (80027a4 <_fstat_r+0x20>)
 800278a:	0004      	movs	r4, r0
 800278c:	0008      	movs	r0, r1
 800278e:	0011      	movs	r1, r2
 8002790:	602b      	str	r3, [r5, #0]
 8002792:	f7fe fb3c 	bl	8000e0e <_fstat>
 8002796:	1c43      	adds	r3, r0, #1
 8002798:	d103      	bne.n	80027a2 <_fstat_r+0x1e>
 800279a:	682b      	ldr	r3, [r5, #0]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d000      	beq.n	80027a2 <_fstat_r+0x1e>
 80027a0:	6023      	str	r3, [r4, #0]
 80027a2:	bd70      	pop	{r4, r5, r6, pc}
 80027a4:	200012dc 	.word	0x200012dc

080027a8 <_isatty_r>:
 80027a8:	2300      	movs	r3, #0
 80027aa:	b570      	push	{r4, r5, r6, lr}
 80027ac:	4d06      	ldr	r5, [pc, #24]	@ (80027c8 <_isatty_r+0x20>)
 80027ae:	0004      	movs	r4, r0
 80027b0:	0008      	movs	r0, r1
 80027b2:	602b      	str	r3, [r5, #0]
 80027b4:	f7fe fb39 	bl	8000e2a <_isatty>
 80027b8:	1c43      	adds	r3, r0, #1
 80027ba:	d103      	bne.n	80027c4 <_isatty_r+0x1c>
 80027bc:	682b      	ldr	r3, [r5, #0]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d000      	beq.n	80027c4 <_isatty_r+0x1c>
 80027c2:	6023      	str	r3, [r4, #0]
 80027c4:	bd70      	pop	{r4, r5, r6, pc}
 80027c6:	46c0      	nop			@ (mov r8, r8)
 80027c8:	200012dc 	.word	0x200012dc

080027cc <_sbrk_r>:
 80027cc:	2300      	movs	r3, #0
 80027ce:	b570      	push	{r4, r5, r6, lr}
 80027d0:	4d06      	ldr	r5, [pc, #24]	@ (80027ec <_sbrk_r+0x20>)
 80027d2:	0004      	movs	r4, r0
 80027d4:	0008      	movs	r0, r1
 80027d6:	602b      	str	r3, [r5, #0]
 80027d8:	f7fe fb3c 	bl	8000e54 <_sbrk>
 80027dc:	1c43      	adds	r3, r0, #1
 80027de:	d103      	bne.n	80027e8 <_sbrk_r+0x1c>
 80027e0:	682b      	ldr	r3, [r5, #0]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d000      	beq.n	80027e8 <_sbrk_r+0x1c>
 80027e6:	6023      	str	r3, [r4, #0]
 80027e8:	bd70      	pop	{r4, r5, r6, pc}
 80027ea:	46c0      	nop			@ (mov r8, r8)
 80027ec:	200012dc 	.word	0x200012dc

080027f0 <memchr>:
 80027f0:	b2c9      	uxtb	r1, r1
 80027f2:	1882      	adds	r2, r0, r2
 80027f4:	4290      	cmp	r0, r2
 80027f6:	d101      	bne.n	80027fc <memchr+0xc>
 80027f8:	2000      	movs	r0, #0
 80027fa:	4770      	bx	lr
 80027fc:	7803      	ldrb	r3, [r0, #0]
 80027fe:	428b      	cmp	r3, r1
 8002800:	d0fb      	beq.n	80027fa <memchr+0xa>
 8002802:	3001      	adds	r0, #1
 8002804:	e7f6      	b.n	80027f4 <memchr+0x4>
	...

08002808 <_init>:
 8002808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800280a:	46c0      	nop			@ (mov r8, r8)
 800280c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800280e:	bc08      	pop	{r3}
 8002810:	469e      	mov	lr, r3
 8002812:	4770      	bx	lr

08002814 <_fini>:
 8002814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002816:	46c0      	nop			@ (mov r8, r8)
 8002818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800281a:	bc08      	pop	{r3}
 800281c:	469e      	mov	lr, r3
 800281e:	4770      	bx	lr
