
final_project_HartnettMatt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002180  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08002240  08002240  00003240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080022a4  080022a4  00004060  2**0
                  CONTENTS
  4 .ARM          00000000  080022a4  080022a4  00004060  2**0
                  CONTENTS
  5 .preinit_array 00000000  080022a4  080022a4  00004060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080022a4  080022a4  000032a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080022a8  080022a8  000032a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080022ac  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001288  20000060  0800230c  00004060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200012e8  0800230c  000042e8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00004060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002f6c  00000000  00000000  00004088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000d8c  00000000  00000000  00006ff4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002d8  00000000  00000000  00007d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000001fc  00000000  00000000  00008058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000149d4  00000000  00000000  00008254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003a46  00000000  00000000  0001cc28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00069052  00000000  00000000  0002066e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000896c0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001060  00000000  00000000  00089704  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000af  00000000  00000000  0008a764  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000060 	.word	0x20000060
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002228 	.word	0x08002228

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000064 	.word	0x20000064
 8000104:	08002228 	.word	0x08002228

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
 800023a:	0002      	movs	r2, r0
 800023c:	1dfb      	adds	r3, r7, #7
 800023e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000240:	1dfb      	adds	r3, r7, #7
 8000242:	781b      	ldrb	r3, [r3, #0]
 8000244:	2b7f      	cmp	r3, #127	@ 0x7f
 8000246:	d809      	bhi.n	800025c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000248:	1dfb      	adds	r3, r7, #7
 800024a:	781b      	ldrb	r3, [r3, #0]
 800024c:	001a      	movs	r2, r3
 800024e:	231f      	movs	r3, #31
 8000250:	401a      	ands	r2, r3
 8000252:	4b04      	ldr	r3, [pc, #16]	@ (8000264 <__NVIC_EnableIRQ+0x30>)
 8000254:	2101      	movs	r1, #1
 8000256:	4091      	lsls	r1, r2
 8000258:	000a      	movs	r2, r1
 800025a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800025c:	46c0      	nop			@ (mov r8, r8)
 800025e:	46bd      	mov	sp, r7
 8000260:	b002      	add	sp, #8
 8000262:	bd80      	pop	{r7, pc}
 8000264:	e000e100 	.word	0xe000e100

08000268 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b082      	sub	sp, #8
 800026c:	af00      	add	r7, sp, #0
 800026e:	0002      	movs	r2, r0
 8000270:	1dfb      	adds	r3, r7, #7
 8000272:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000274:	1dfb      	adds	r3, r7, #7
 8000276:	781b      	ldrb	r3, [r3, #0]
 8000278:	2b7f      	cmp	r3, #127	@ 0x7f
 800027a:	d80a      	bhi.n	8000292 <__NVIC_ClearPendingIRQ+0x2a>
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800027c:	1dfb      	adds	r3, r7, #7
 800027e:	781b      	ldrb	r3, [r3, #0]
 8000280:	001a      	movs	r2, r3
 8000282:	231f      	movs	r3, #31
 8000284:	4013      	ands	r3, r2
 8000286:	4905      	ldr	r1, [pc, #20]	@ (800029c <__NVIC_ClearPendingIRQ+0x34>)
 8000288:	2201      	movs	r2, #1
 800028a:	409a      	lsls	r2, r3
 800028c:	23c0      	movs	r3, #192	@ 0xc0
 800028e:	005b      	lsls	r3, r3, #1
 8000290:	50ca      	str	r2, [r1, r3]
  }
}
 8000292:	46c0      	nop			@ (mov r8, r8)
 8000294:	46bd      	mov	sp, r7
 8000296:	b002      	add	sp, #8
 8000298:	bd80      	pop	{r7, pc}
 800029a:	46c0      	nop			@ (mov r8, r8)
 800029c:	e000e100 	.word	0xe000e100

080002a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002a0:	b590      	push	{r4, r7, lr}
 80002a2:	b083      	sub	sp, #12
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	0002      	movs	r2, r0
 80002a8:	6039      	str	r1, [r7, #0]
 80002aa:	1dfb      	adds	r3, r7, #7
 80002ac:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80002ae:	1dfb      	adds	r3, r7, #7
 80002b0:	781b      	ldrb	r3, [r3, #0]
 80002b2:	2b7f      	cmp	r3, #127	@ 0x7f
 80002b4:	d828      	bhi.n	8000308 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002b6:	4a2f      	ldr	r2, [pc, #188]	@ (8000374 <__NVIC_SetPriority+0xd4>)
 80002b8:	1dfb      	adds	r3, r7, #7
 80002ba:	781b      	ldrb	r3, [r3, #0]
 80002bc:	b25b      	sxtb	r3, r3
 80002be:	089b      	lsrs	r3, r3, #2
 80002c0:	33c0      	adds	r3, #192	@ 0xc0
 80002c2:	009b      	lsls	r3, r3, #2
 80002c4:	589b      	ldr	r3, [r3, r2]
 80002c6:	1dfa      	adds	r2, r7, #7
 80002c8:	7812      	ldrb	r2, [r2, #0]
 80002ca:	0011      	movs	r1, r2
 80002cc:	2203      	movs	r2, #3
 80002ce:	400a      	ands	r2, r1
 80002d0:	00d2      	lsls	r2, r2, #3
 80002d2:	21ff      	movs	r1, #255	@ 0xff
 80002d4:	4091      	lsls	r1, r2
 80002d6:	000a      	movs	r2, r1
 80002d8:	43d2      	mvns	r2, r2
 80002da:	401a      	ands	r2, r3
 80002dc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002de:	683b      	ldr	r3, [r7, #0]
 80002e0:	019b      	lsls	r3, r3, #6
 80002e2:	22ff      	movs	r2, #255	@ 0xff
 80002e4:	401a      	ands	r2, r3
 80002e6:	1dfb      	adds	r3, r7, #7
 80002e8:	781b      	ldrb	r3, [r3, #0]
 80002ea:	0018      	movs	r0, r3
 80002ec:	2303      	movs	r3, #3
 80002ee:	4003      	ands	r3, r0
 80002f0:	00db      	lsls	r3, r3, #3
 80002f2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002f4:	481f      	ldr	r0, [pc, #124]	@ (8000374 <__NVIC_SetPriority+0xd4>)
 80002f6:	1dfb      	adds	r3, r7, #7
 80002f8:	781b      	ldrb	r3, [r3, #0]
 80002fa:	b25b      	sxtb	r3, r3
 80002fc:	089b      	lsrs	r3, r3, #2
 80002fe:	430a      	orrs	r2, r1
 8000300:	33c0      	adds	r3, #192	@ 0xc0
 8000302:	009b      	lsls	r3, r3, #2
 8000304:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000306:	e031      	b.n	800036c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000308:	4a1b      	ldr	r2, [pc, #108]	@ (8000378 <__NVIC_SetPriority+0xd8>)
 800030a:	1dfb      	adds	r3, r7, #7
 800030c:	781b      	ldrb	r3, [r3, #0]
 800030e:	0019      	movs	r1, r3
 8000310:	230f      	movs	r3, #15
 8000312:	400b      	ands	r3, r1
 8000314:	3b08      	subs	r3, #8
 8000316:	089b      	lsrs	r3, r3, #2
 8000318:	3306      	adds	r3, #6
 800031a:	009b      	lsls	r3, r3, #2
 800031c:	18d3      	adds	r3, r2, r3
 800031e:	3304      	adds	r3, #4
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	1dfa      	adds	r2, r7, #7
 8000324:	7812      	ldrb	r2, [r2, #0]
 8000326:	0011      	movs	r1, r2
 8000328:	2203      	movs	r2, #3
 800032a:	400a      	ands	r2, r1
 800032c:	00d2      	lsls	r2, r2, #3
 800032e:	21ff      	movs	r1, #255	@ 0xff
 8000330:	4091      	lsls	r1, r2
 8000332:	000a      	movs	r2, r1
 8000334:	43d2      	mvns	r2, r2
 8000336:	401a      	ands	r2, r3
 8000338:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800033a:	683b      	ldr	r3, [r7, #0]
 800033c:	019b      	lsls	r3, r3, #6
 800033e:	22ff      	movs	r2, #255	@ 0xff
 8000340:	401a      	ands	r2, r3
 8000342:	1dfb      	adds	r3, r7, #7
 8000344:	781b      	ldrb	r3, [r3, #0]
 8000346:	0018      	movs	r0, r3
 8000348:	2303      	movs	r3, #3
 800034a:	4003      	ands	r3, r0
 800034c:	00db      	lsls	r3, r3, #3
 800034e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000350:	4809      	ldr	r0, [pc, #36]	@ (8000378 <__NVIC_SetPriority+0xd8>)
 8000352:	1dfb      	adds	r3, r7, #7
 8000354:	781b      	ldrb	r3, [r3, #0]
 8000356:	001c      	movs	r4, r3
 8000358:	230f      	movs	r3, #15
 800035a:	4023      	ands	r3, r4
 800035c:	3b08      	subs	r3, #8
 800035e:	089b      	lsrs	r3, r3, #2
 8000360:	430a      	orrs	r2, r1
 8000362:	3306      	adds	r3, #6
 8000364:	009b      	lsls	r3, r3, #2
 8000366:	18c3      	adds	r3, r0, r3
 8000368:	3304      	adds	r3, #4
 800036a:	601a      	str	r2, [r3, #0]
}
 800036c:	46c0      	nop			@ (mov r8, r8)
 800036e:	46bd      	mov	sp, r7
 8000370:	b003      	add	sp, #12
 8000372:	bd90      	pop	{r4, r7, pc}
 8000374:	e000e100 	.word	0xe000e100
 8000378:	e000ed00 	.word	0xe000ed00

0800037c <set_blk_size>:
#include "utilities.h"
#include <stm32f091xc.h>

int blk_size;

void set_blk_size(int block_size) {
 800037c:	b580      	push	{r7, lr}
 800037e:	b082      	sub	sp, #8
 8000380:	af00      	add	r7, sp, #0
 8000382:	6078      	str	r0, [r7, #4]
    blk_size = block_size;
 8000384:	4b03      	ldr	r3, [pc, #12]	@ (8000394 <set_blk_size+0x18>)
 8000386:	687a      	ldr	r2, [r7, #4]
 8000388:	601a      	str	r2, [r3, #0]
}
 800038a:	46c0      	nop			@ (mov r8, r8)
 800038c:	46bd      	mov	sp, r7
 800038e:	b002      	add	sp, #8
 8000390:	bd80      	pop	{r7, pc}
 8000392:	46c0      	nop			@ (mov r8, r8)
 8000394:	2000007c 	.word	0x2000007c

08000398 <dac_init>:

// This init function was taken from Alex Dean's github: https://github.com/alexander-g-dean/ESF/blob/master/ST/Code/common-driver/dac.c
void dac_init(void) {
 8000398:	b580      	push	{r7, lr}
 800039a:	af00      	add	r7, sp, #0
    // Enable clocks for DAC and PA4
    RCC->APB1ENR |= RCC_APB1ENR_DACEN;
 800039c:	4b0e      	ldr	r3, [pc, #56]	@ (80003d8 <dac_init+0x40>)
 800039e:	69da      	ldr	r2, [r3, #28]
 80003a0:	4b0d      	ldr	r3, [pc, #52]	@ (80003d8 <dac_init+0x40>)
 80003a2:	2180      	movs	r1, #128	@ 0x80
 80003a4:	0589      	lsls	r1, r1, #22
 80003a6:	430a      	orrs	r2, r1
 80003a8:	61da      	str	r2, [r3, #28]
    RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 80003aa:	4b0b      	ldr	r3, [pc, #44]	@ (80003d8 <dac_init+0x40>)
 80003ac:	695a      	ldr	r2, [r3, #20]
 80003ae:	4b0a      	ldr	r3, [pc, #40]	@ (80003d8 <dac_init+0x40>)
 80003b0:	2180      	movs	r1, #128	@ 0x80
 80003b2:	0289      	lsls	r1, r1, #10
 80003b4:	430a      	orrs	r2, r1
 80003b6:	615a      	str	r2, [r3, #20]

    // Init PA4 as analog by setting both MODER bits
    MODIFY_FIELD(GPIOA->MODER, GPIO_MODER_MODER4, ESF_GPIO_MODER_ANALOG);
 80003b8:	2390      	movs	r3, #144	@ 0x90
 80003ba:	05db      	lsls	r3, r3, #23
 80003bc:	681a      	ldr	r2, [r3, #0]
 80003be:	2390      	movs	r3, #144	@ 0x90
 80003c0:	05db      	lsls	r3, r3, #23
 80003c2:	21c0      	movs	r1, #192	@ 0xc0
 80003c4:	0089      	lsls	r1, r1, #2
 80003c6:	430a      	orrs	r2, r1
 80003c8:	601a      	str	r2, [r3, #0]

    // Init DAC1, connecting it to PA4
    DAC1->CR = DAC_CR_EN1;
 80003ca:	4b04      	ldr	r3, [pc, #16]	@ (80003dc <dac_init+0x44>)
 80003cc:	2201      	movs	r2, #1
 80003ce:	601a      	str	r2, [r3, #0]
}
 80003d0:	46c0      	nop			@ (mov r8, r8)
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	46c0      	nop			@ (mov r8, r8)
 80003d8:	40021000 	.word	0x40021000
 80003dc:	40007400 	.word	0x40007400

080003e0 <tim6_init>:
 * Initializes TIM6 for periodic DMA requests.
 *
 * This function enables the TIM6 clock, sets the auto-reload value (ARR)
 * and prescaler (PSC) for the desired DAC frequency.
 */
void tim6_init(void) {
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_TIM6EN;
 80003e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000418 <tim6_init+0x38>)
 80003e6:	69da      	ldr	r2, [r3, #28]
 80003e8:	4b0b      	ldr	r3, [pc, #44]	@ (8000418 <tim6_init+0x38>)
 80003ea:	2110      	movs	r1, #16
 80003ec:	430a      	orrs	r2, r1
 80003ee:	61da      	str	r2, [r3, #28]
    TIM6->ARR = 1;
 80003f0:	4b0a      	ldr	r3, [pc, #40]	@ (800041c <tim6_init+0x3c>)
 80003f2:	2201      	movs	r2, #1
 80003f4:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM6->PSC = TIM6_PRESCALER - 1;
 80003f6:	4b09      	ldr	r3, [pc, #36]	@ (800041c <tim6_init+0x3c>)
 80003f8:	22f4      	movs	r2, #244	@ 0xf4
 80003fa:	32ff      	adds	r2, #255	@ 0xff
 80003fc:	629a      	str	r2, [r3, #40]	@ 0x28
    // Enable DMA request
    TIM6->DIER = TIM_DIER_UDE;
 80003fe:	4b07      	ldr	r3, [pc, #28]	@ (800041c <tim6_init+0x3c>)
 8000400:	2280      	movs	r2, #128	@ 0x80
 8000402:	0052      	lsls	r2, r2, #1
 8000404:	60da      	str	r2, [r3, #12]
    // Enable counting
    TIM6->CR1 |= TIM_CR1_CEN;
 8000406:	4b05      	ldr	r3, [pc, #20]	@ (800041c <tim6_init+0x3c>)
 8000408:	681a      	ldr	r2, [r3, #0]
 800040a:	4b04      	ldr	r3, [pc, #16]	@ (800041c <tim6_init+0x3c>)
 800040c:	2101      	movs	r1, #1
 800040e:	430a      	orrs	r2, r1
 8000410:	601a      	str	r2, [r3, #0]
}
 8000412:	46c0      	nop			@ (mov r8, r8)
 8000414:	46bd      	mov	sp, r7
 8000416:	bd80      	pop	{r7, pc}
 8000418:	40021000 	.word	0x40021000
 800041c:	40001000 	.word	0x40001000

08000420 <analog_out_init>:
        DMA2_Channel3->CNDTR = blk_size; // Reset to whatever block size is required
    }
    DMA2->IFCR |= 1; // Clear flag
}

void analog_out_init(int16_t *buffer, uint16_t buffer_size) {
 8000420:	b580      	push	{r7, lr}
 8000422:	b082      	sub	sp, #8
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
 8000428:	000a      	movs	r2, r1
 800042a:	1cbb      	adds	r3, r7, #2
 800042c:	801a      	strh	r2, [r3, #0]
    // Enable clocks for DAC, TIMER6, and DMA
    RCC->APB1ENR |= RCC_APB1ENR_DACEN | RCC_APB1ENR_TIM6EN;
 800042e:	4b2a      	ldr	r3, [pc, #168]	@ (80004d8 <analog_out_init+0xb8>)
 8000430:	69da      	ldr	r2, [r3, #28]
 8000432:	4b29      	ldr	r3, [pc, #164]	@ (80004d8 <analog_out_init+0xb8>)
 8000434:	4929      	ldr	r1, [pc, #164]	@ (80004dc <analog_out_init+0xbc>)
 8000436:	430a      	orrs	r2, r1
 8000438:	61da      	str	r2, [r3, #28]
    RCC->AHBENR |= RCC_AHBENR_DMA1EN;
 800043a:	4b27      	ldr	r3, [pc, #156]	@ (80004d8 <analog_out_init+0xb8>)
 800043c:	695a      	ldr	r2, [r3, #20]
 800043e:	4b26      	ldr	r3, [pc, #152]	@ (80004d8 <analog_out_init+0xb8>)
 8000440:	2101      	movs	r1, #1
 8000442:	430a      	orrs	r2, r1
 8000444:	615a      	str	r2, [r3, #20]

    // Configure DAC
    dac_init();
 8000446:	f7ff ffa7 	bl	8000398 <dac_init>

    // Configure timer
    tim6_init();
 800044a:	f7ff ffc9 	bl	80003e0 <tim6_init>

    // Configure DMA for DAC
    // Enable DMA2 clock
    RCC->AHBENR |= RCC_AHBENR_DMA2EN;
 800044e:	4b22      	ldr	r3, [pc, #136]	@ (80004d8 <analog_out_init+0xb8>)
 8000450:	695a      	ldr	r2, [r3, #20]
 8000452:	4b21      	ldr	r3, [pc, #132]	@ (80004d8 <analog_out_init+0xb8>)
 8000454:	2102      	movs	r1, #2
 8000456:	430a      	orrs	r2, r1
 8000458:	615a      	str	r2, [r3, #20]
    DMA2_Channel3->CCR = DMA_CCR_MINC | DMA_CCR_DIR | DMA_CCR_CIRC;
 800045a:	4b21      	ldr	r3, [pc, #132]	@ (80004e0 <analog_out_init+0xc0>)
 800045c:	22b0      	movs	r2, #176	@ 0xb0
 800045e:	601a      	str	r2, [r3, #0]
    MODIFY_FIELD(DMA2_Channel3->CCR, DMA_CCR_MSIZE, 1);
 8000460:	4b1f      	ldr	r3, [pc, #124]	@ (80004e0 <analog_out_init+0xc0>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	4a1f      	ldr	r2, [pc, #124]	@ (80004e4 <analog_out_init+0xc4>)
 8000466:	401a      	ands	r2, r3
 8000468:	4b1d      	ldr	r3, [pc, #116]	@ (80004e0 <analog_out_init+0xc0>)
 800046a:	2180      	movs	r1, #128	@ 0x80
 800046c:	00c9      	lsls	r1, r1, #3
 800046e:	430a      	orrs	r2, r1
 8000470:	601a      	str	r2, [r3, #0]
    MODIFY_FIELD(DMA2_Channel3->CCR, DMA_CCR_PSIZE, 1);
 8000472:	4b1b      	ldr	r3, [pc, #108]	@ (80004e0 <analog_out_init+0xc0>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	4a1c      	ldr	r2, [pc, #112]	@ (80004e8 <analog_out_init+0xc8>)
 8000478:	401a      	ands	r2, r3
 800047a:	4b19      	ldr	r3, [pc, #100]	@ (80004e0 <analog_out_init+0xc0>)
 800047c:	2180      	movs	r1, #128	@ 0x80
 800047e:	0049      	lsls	r1, r1, #1
 8000480:	430a      	orrs	r2, r1
 8000482:	601a      	str	r2, [r3, #0]
    MODIFY_FIELD(DMA2_Channel3->CCR, DMA_CCR_PL, 3);
 8000484:	4b16      	ldr	r3, [pc, #88]	@ (80004e0 <analog_out_init+0xc0>)
 8000486:	681a      	ldr	r2, [r3, #0]
 8000488:	4b15      	ldr	r3, [pc, #84]	@ (80004e0 <analog_out_init+0xc0>)
 800048a:	21c0      	movs	r1, #192	@ 0xc0
 800048c:	0189      	lsls	r1, r1, #6
 800048e:	430a      	orrs	r2, r1
 8000490:	601a      	str	r2, [r3, #0]

    // Configure DMA IRQ
    NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch3_5_IRQn, 3);
 8000492:	2103      	movs	r1, #3
 8000494:	200b      	movs	r0, #11
 8000496:	f7ff ff03 	bl	80002a0 <__NVIC_SetPriority>
    NVIC_ClearPendingIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);
 800049a:	200b      	movs	r0, #11
 800049c:	f7ff fee4 	bl	8000268 <__NVIC_ClearPendingIRQ>
    NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);
 80004a0:	200b      	movs	r0, #11
 80004a2:	f7ff fec7 	bl	8000234 <__NVIC_EnableIRQ>

    MODIFY_FIELD(DMA2->CSELR, DMA_CSELR_C3S, 1);
 80004a6:	4a11      	ldr	r2, [pc, #68]	@ (80004ec <analog_out_init+0xcc>)
 80004a8:	23a8      	movs	r3, #168	@ 0xa8
 80004aa:	58d3      	ldr	r3, [r2, r3]
 80004ac:	4a10      	ldr	r2, [pc, #64]	@ (80004f0 <analog_out_init+0xd0>)
 80004ae:	4013      	ands	r3, r2
 80004b0:	490e      	ldr	r1, [pc, #56]	@ (80004ec <analog_out_init+0xcc>)
 80004b2:	2280      	movs	r2, #128	@ 0x80
 80004b4:	0052      	lsls	r2, r2, #1
 80004b6:	4313      	orrs	r3, r2
 80004b8:	22a8      	movs	r2, #168	@ 0xa8
 80004ba:	508b      	str	r3, [r1, r2]
    DMA2_Channel3->CNDTR = buffer_size;            // Number of data items to transfer
 80004bc:	4b08      	ldr	r3, [pc, #32]	@ (80004e0 <analog_out_init+0xc0>)
 80004be:	1cba      	adds	r2, r7, #2
 80004c0:	8812      	ldrh	r2, [r2, #0]
 80004c2:	605a      	str	r2, [r3, #4]
    DMA2_Channel3->CMAR = (uint32_t)buffer;        // Memory address
 80004c4:	4b06      	ldr	r3, [pc, #24]	@ (80004e0 <analog_out_init+0xc0>)
 80004c6:	687a      	ldr	r2, [r7, #4]
 80004c8:	60da      	str	r2, [r3, #12]
    DMA2_Channel3->CPAR = (uint32_t)&DAC->DHR12R1; // DAC data register
 80004ca:	4b05      	ldr	r3, [pc, #20]	@ (80004e0 <analog_out_init+0xc0>)
 80004cc:	4a09      	ldr	r2, [pc, #36]	@ (80004f4 <analog_out_init+0xd4>)
 80004ce:	609a      	str	r2, [r3, #8]
}
 80004d0:	46c0      	nop			@ (mov r8, r8)
 80004d2:	46bd      	mov	sp, r7
 80004d4:	b002      	add	sp, #8
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	40021000 	.word	0x40021000
 80004dc:	20000010 	.word	0x20000010
 80004e0:	40020430 	.word	0x40020430
 80004e4:	fffff3ff 	.word	0xfffff3ff
 80004e8:	fffffcff 	.word	0xfffffcff
 80004ec:	40020400 	.word	0x40020400
 80004f0:	fffff0ff 	.word	0xfffff0ff
 80004f4:	40007408 	.word	0x40007408

080004f8 <tone_to_samples>:
    // Disable DMA and Timer
    DMA1_Channel1->CCR &= ~DMA_CCR_EN;
    TIM6->CR1 &= ~TIM_CR1_CEN;
}

int tone_to_samples(uint32_t frequency, uint32_t step_size, uint32_t block_size, int16_t *buffer, uint32_t buffer_size) {
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b088      	sub	sp, #32
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	60f8      	str	r0, [r7, #12]
 8000500:	60b9      	str	r1, [r7, #8]
 8000502:	607a      	str	r2, [r7, #4]
 8000504:	603b      	str	r3, [r7, #0]

    if (block_size > buffer_size) {
 8000506:	687a      	ldr	r2, [r7, #4]
 8000508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800050a:	429a      	cmp	r2, r3
 800050c:	d902      	bls.n	8000514 <tone_to_samples+0x1c>
        return -1; // Buffer too small
 800050e:	2301      	movs	r3, #1
 8000510:	425b      	negs	r3, r3
 8000512:	e01c      	b.n	800054e <tone_to_samples+0x56>
    }

    int32_t current_phase = 0;
 8000514:	2300      	movs	r3, #0
 8000516:	61fb      	str	r3, [r7, #28]

    for (int32_t i = 0; i < block_size; ++i) {
 8000518:	2300      	movs	r3, #0
 800051a:	61bb      	str	r3, [r7, #24]
 800051c:	e012      	b.n	8000544 <tone_to_samples+0x4c>
//        int32_t raw_sample = fp_sin(current_phase);
        int32_t raw_sample = 1;
 800051e:	2301      	movs	r3, #1
 8000520:	617b      	str	r3, [r7, #20]
        buffer[i] = (int16_t)(raw_sample + 1);
 8000522:	697b      	ldr	r3, [r7, #20]
 8000524:	b29b      	uxth	r3, r3
 8000526:	3301      	adds	r3, #1
 8000528:	b299      	uxth	r1, r3
 800052a:	69bb      	ldr	r3, [r7, #24]
 800052c:	005b      	lsls	r3, r3, #1
 800052e:	683a      	ldr	r2, [r7, #0]
 8000530:	18d3      	adds	r3, r2, r3
 8000532:	b20a      	sxth	r2, r1
 8000534:	801a      	strh	r2, [r3, #0]
        current_phase = (current_phase + step_size);
 8000536:	69fa      	ldr	r2, [r7, #28]
 8000538:	68bb      	ldr	r3, [r7, #8]
 800053a:	18d3      	adds	r3, r2, r3
 800053c:	61fb      	str	r3, [r7, #28]
    for (int32_t i = 0; i < block_size; ++i) {
 800053e:	69bb      	ldr	r3, [r7, #24]
 8000540:	3301      	adds	r3, #1
 8000542:	61bb      	str	r3, [r7, #24]
 8000544:	69bb      	ldr	r3, [r7, #24]
 8000546:	687a      	ldr	r2, [r7, #4]
 8000548:	429a      	cmp	r2, r3
 800054a:	d8e8      	bhi.n	800051e <tone_to_samples+0x26>
    }

    return 0;
 800054c:	2300      	movs	r3, #0
 800054e:	0018      	movs	r0, r3
 8000550:	46bd      	mov	sp, r7
 8000552:	b008      	add	sp, #32
 8000554:	bd80      	pop	{r7, pc}

08000556 <cbfifo_enqueue>:
#include "cbfifo.h"
#include <stddef.h>
#include <stdio.h>


size_t cbfifo_enqueue(cbfifo *cb, void *buf, size_t nbyte) {
 8000556:	b580      	push	{r7, lr}
 8000558:	b088      	sub	sp, #32
 800055a:	af00      	add	r7, sp, #0
 800055c:	60f8      	str	r0, [r7, #12]
 800055e:	60b9      	str	r1, [r7, #8]
 8000560:	607a      	str	r2, [r7, #4]
    // Error conditions
    if (buf == NULL || cb->is_full) {
 8000562:	68bb      	ldr	r3, [r7, #8]
 8000564:	2b00      	cmp	r3, #0
 8000566:	d004      	beq.n	8000572 <cbfifo_enqueue+0x1c>
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	2284      	movs	r2, #132	@ 0x84
 800056c:	589b      	ldr	r3, [r3, r2]
 800056e:	2b00      	cmp	r3, #0
 8000570:	d002      	beq.n	8000578 <cbfifo_enqueue+0x22>
        return (size_t)-1;
 8000572:	2301      	movs	r3, #1
 8000574:	425b      	negs	r3, r3
 8000576:	e03d      	b.n	80005f4 <cbfifo_enqueue+0x9e>
    }

    size_t available_space = BUFFER_SIZE - cbfifo_length(cb);
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	0018      	movs	r0, r3
 800057c:	f000 f886 	bl	800068c <cbfifo_length>
 8000580:	0003      	movs	r3, r0
 8000582:	2280      	movs	r2, #128	@ 0x80
 8000584:	1ad3      	subs	r3, r2, r3
 8000586:	617b      	str	r3, [r7, #20]
    size_t to_enqueue = nbyte;
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	61fb      	str	r3, [r7, #28]

    // Cap the enqueue length to the max available space
    if (to_enqueue > available_space) {
 800058c:	69fa      	ldr	r2, [r7, #28]
 800058e:	697b      	ldr	r3, [r7, #20]
 8000590:	429a      	cmp	r2, r3
 8000592:	d901      	bls.n	8000598 <cbfifo_enqueue+0x42>
        to_enqueue = available_space;
 8000594:	697b      	ldr	r3, [r7, #20]
 8000596:	61fb      	str	r3, [r7, #28]
    }

    // Loop through the buffer and add to FIFO at the head ptr
    for (size_t i = 0; i < to_enqueue; i++) {
 8000598:	2300      	movs	r3, #0
 800059a:	61bb      	str	r3, [r7, #24]
 800059c:	e016      	b.n	80005cc <cbfifo_enqueue+0x76>
        cb->fifo[cb->write] = ((uint8_t *)buf)[i];
 800059e:	68ba      	ldr	r2, [r7, #8]
 80005a0:	69bb      	ldr	r3, [r7, #24]
 80005a2:	18d3      	adds	r3, r2, r3
 80005a4:	68fa      	ldr	r2, [r7, #12]
 80005a6:	2180      	movs	r1, #128	@ 0x80
 80005a8:	5c52      	ldrb	r2, [r2, r1]
 80005aa:	7819      	ldrb	r1, [r3, #0]
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	5499      	strb	r1, [r3, r2]
        cb->write = (cb->write + 1) & (BUFFER_SIZE - 1); // Wrap around using bitwise AND
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	2280      	movs	r2, #128	@ 0x80
 80005b4:	5c9b      	ldrb	r3, [r3, r2]
 80005b6:	3301      	adds	r3, #1
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	227f      	movs	r2, #127	@ 0x7f
 80005bc:	4013      	ands	r3, r2
 80005be:	b2d9      	uxtb	r1, r3
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	2280      	movs	r2, #128	@ 0x80
 80005c4:	5499      	strb	r1, [r3, r2]
    for (size_t i = 0; i < to_enqueue; i++) {
 80005c6:	69bb      	ldr	r3, [r7, #24]
 80005c8:	3301      	adds	r3, #1
 80005ca:	61bb      	str	r3, [r7, #24]
 80005cc:	69ba      	ldr	r2, [r7, #24]
 80005ce:	69fb      	ldr	r3, [r7, #28]
 80005d0:	429a      	cmp	r2, r3
 80005d2:	d3e4      	bcc.n	800059e <cbfifo_enqueue+0x48>
    }

    // If we had to cap, then the FIFO is full at this point
    if (to_enqueue > 0 && cb->read == cb->write) {
 80005d4:	69fb      	ldr	r3, [r7, #28]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d00b      	beq.n	80005f2 <cbfifo_enqueue+0x9c>
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	2281      	movs	r2, #129	@ 0x81
 80005de:	5c9a      	ldrb	r2, [r3, r2]
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	2180      	movs	r1, #128	@ 0x80
 80005e4:	5c5b      	ldrb	r3, [r3, r1]
 80005e6:	429a      	cmp	r2, r3
 80005e8:	d103      	bne.n	80005f2 <cbfifo_enqueue+0x9c>
        cb->is_full = 1;
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	2284      	movs	r2, #132	@ 0x84
 80005ee:	2101      	movs	r1, #1
 80005f0:	5099      	str	r1, [r3, r2]
    }
    return to_enqueue;
 80005f2:	69fb      	ldr	r3, [r7, #28]
}
 80005f4:	0018      	movs	r0, r3
 80005f6:	46bd      	mov	sp, r7
 80005f8:	b008      	add	sp, #32
 80005fa:	bd80      	pop	{r7, pc}

080005fc <cbfifo_dequeue>:

size_t cbfifo_dequeue(cbfifo *cb, void *buf, size_t nbyte) {
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b088      	sub	sp, #32
 8000600:	af00      	add	r7, sp, #0
 8000602:	60f8      	str	r0, [r7, #12]
 8000604:	60b9      	str	r1, [r7, #8]
 8000606:	607a      	str	r2, [r7, #4]
    if (buf == NULL || nbyte == 0) {
 8000608:	68bb      	ldr	r3, [r7, #8]
 800060a:	2b00      	cmp	r3, #0
 800060c:	d002      	beq.n	8000614 <cbfifo_dequeue+0x18>
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d102      	bne.n	800061a <cbfifo_dequeue+0x1e>
        return (size_t)-1; // Return -1 if buffer is NULL
 8000614:	2301      	movs	r3, #1
 8000616:	425b      	negs	r3, r3
 8000618:	e034      	b.n	8000684 <cbfifo_dequeue+0x88>
    }
    size_t available_data = cbfifo_length(cb);
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	0018      	movs	r0, r3
 800061e:	f000 f835 	bl	800068c <cbfifo_length>
 8000622:	0003      	movs	r3, r0
 8000624:	617b      	str	r3, [r7, #20]
    size_t to_dequeue = nbyte;
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	61fb      	str	r3, [r7, #28]

    if (to_dequeue > available_data) {
 800062a:	69fa      	ldr	r2, [r7, #28]
 800062c:	697b      	ldr	r3, [r7, #20]
 800062e:	429a      	cmp	r2, r3
 8000630:	d901      	bls.n	8000636 <cbfifo_dequeue+0x3a>
        to_dequeue = available_data;
 8000632:	697b      	ldr	r3, [r7, #20]
 8000634:	61fb      	str	r3, [r7, #28]
    }

    for (size_t i = 0; i < to_dequeue; i++) {
 8000636:	2300      	movs	r3, #0
 8000638:	61bb      	str	r3, [r7, #24]
 800063a:	e017      	b.n	800066c <cbfifo_dequeue+0x70>
        ((uint8_t *)buf)[i] = cb->fifo[cb->read];
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	2281      	movs	r2, #129	@ 0x81
 8000640:	5c9b      	ldrb	r3, [r3, r2]
 8000642:	0019      	movs	r1, r3
 8000644:	68ba      	ldr	r2, [r7, #8]
 8000646:	69bb      	ldr	r3, [r7, #24]
 8000648:	18d3      	adds	r3, r2, r3
 800064a:	68fa      	ldr	r2, [r7, #12]
 800064c:	5c52      	ldrb	r2, [r2, r1]
 800064e:	701a      	strb	r2, [r3, #0]
        cb->read = (cb->read + 1) & (BUFFER_SIZE - 1); // Wrap around using bitwise AND
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	2281      	movs	r2, #129	@ 0x81
 8000654:	5c9b      	ldrb	r3, [r3, r2]
 8000656:	3301      	adds	r3, #1
 8000658:	b2db      	uxtb	r3, r3
 800065a:	227f      	movs	r2, #127	@ 0x7f
 800065c:	4013      	ands	r3, r2
 800065e:	b2d9      	uxtb	r1, r3
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	2281      	movs	r2, #129	@ 0x81
 8000664:	5499      	strb	r1, [r3, r2]
    for (size_t i = 0; i < to_dequeue; i++) {
 8000666:	69bb      	ldr	r3, [r7, #24]
 8000668:	3301      	adds	r3, #1
 800066a:	61bb      	str	r3, [r7, #24]
 800066c:	69ba      	ldr	r2, [r7, #24]
 800066e:	69fb      	ldr	r3, [r7, #28]
 8000670:	429a      	cmp	r2, r3
 8000672:	d3e3      	bcc.n	800063c <cbfifo_dequeue+0x40>
    }

    // If any bytes were removed, then the FIFO isn't full anymore
    if (to_dequeue > 0) {
 8000674:	69fb      	ldr	r3, [r7, #28]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d003      	beq.n	8000682 <cbfifo_dequeue+0x86>
        cb->is_full = 0;
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	2284      	movs	r2, #132	@ 0x84
 800067e:	2100      	movs	r1, #0
 8000680:	5099      	str	r1, [r3, r2]
    }

    return to_dequeue;
 8000682:	69fb      	ldr	r3, [r7, #28]
}
 8000684:	0018      	movs	r0, r3
 8000686:	46bd      	mov	sp, r7
 8000688:	b008      	add	sp, #32
 800068a:	bd80      	pop	{r7, pc}

0800068c <cbfifo_length>:

    *byte = cb->fifo[cb->read];
    return cbfifo_length(cb);
}

size_t cbfifo_length(cbfifo *cb) {
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
    // More reliable for changes in BUFFER_SIZE
    if (cb->is_full) {
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	2284      	movs	r2, #132	@ 0x84
 8000698:	589b      	ldr	r3, [r3, r2]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <cbfifo_length+0x16>
        // If the buffer is marked as full, return the maximum capacity
        return BUFFER_SIZE;
 800069e:	2380      	movs	r3, #128	@ 0x80
 80006a0:	e01a      	b.n	80006d8 <cbfifo_length+0x4c>
    } else if (cb->write >= cb->read) {
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	2280      	movs	r2, #128	@ 0x80
 80006a6:	5c9a      	ldrb	r2, [r3, r2]
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	2181      	movs	r1, #129	@ 0x81
 80006ac:	5c5b      	ldrb	r3, [r3, r1]
 80006ae:	429a      	cmp	r2, r3
 80006b0:	d308      	bcc.n	80006c4 <cbfifo_length+0x38>
        // If write pointer is ahead or equal to read pointer, calculate length normally
        return cb->write - cb->read;
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	2280      	movs	r2, #128	@ 0x80
 80006b6:	5c9b      	ldrb	r3, [r3, r2]
 80006b8:	0019      	movs	r1, r3
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	2281      	movs	r2, #129	@ 0x81
 80006be:	5c9b      	ldrb	r3, [r3, r2]
 80006c0:	1acb      	subs	r3, r1, r3
 80006c2:	e009      	b.n	80006d8 <cbfifo_length+0x4c>
    } else {
        // If write pointer has wrapped around, account for the circular structure
        return BUFFER_SIZE - (cb->read - cb->write);
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	2281      	movs	r2, #129	@ 0x81
 80006c8:	5c9b      	ldrb	r3, [r3, r2]
 80006ca:	0019      	movs	r1, r3
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	2280      	movs	r2, #128	@ 0x80
 80006d0:	5c9b      	ldrb	r3, [r3, r2]
 80006d2:	1acb      	subs	r3, r1, r3
 80006d4:	2280      	movs	r2, #128	@ 0x80
 80006d6:	1ad3      	subs	r3, r2, r3
    }
}
 80006d8:	0018      	movs	r0, r3
 80006da:	46bd      	mov	sp, r7
 80006dc:	b002      	add	sp, #8
 80006de:	bd80      	pop	{r7, pc}

080006e0 <cbfifo_capacity>:

size_t cbfifo_capacity(cbfifo *cb) {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
    // Capacity is statically set to BUFFER_SIZE
    return BUFFER_SIZE;
 80006e8:	2380      	movs	r3, #128	@ 0x80
}
 80006ea:	0018      	movs	r0, r3
 80006ec:	46bd      	mov	sp, r7
 80006ee:	b002      	add	sp, #8
 80006f0:	bd80      	pop	{r7, pc}
	...

080006f4 <__NVIC_SetPriority>:
{
 80006f4:	b590      	push	{r4, r7, lr}
 80006f6:	b083      	sub	sp, #12
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	0002      	movs	r2, r0
 80006fc:	6039      	str	r1, [r7, #0]
 80006fe:	1dfb      	adds	r3, r7, #7
 8000700:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000702:	1dfb      	adds	r3, r7, #7
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	2b7f      	cmp	r3, #127	@ 0x7f
 8000708:	d828      	bhi.n	800075c <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800070a:	4a2f      	ldr	r2, [pc, #188]	@ (80007c8 <__NVIC_SetPriority+0xd4>)
 800070c:	1dfb      	adds	r3, r7, #7
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	b25b      	sxtb	r3, r3
 8000712:	089b      	lsrs	r3, r3, #2
 8000714:	33c0      	adds	r3, #192	@ 0xc0
 8000716:	009b      	lsls	r3, r3, #2
 8000718:	589b      	ldr	r3, [r3, r2]
 800071a:	1dfa      	adds	r2, r7, #7
 800071c:	7812      	ldrb	r2, [r2, #0]
 800071e:	0011      	movs	r1, r2
 8000720:	2203      	movs	r2, #3
 8000722:	400a      	ands	r2, r1
 8000724:	00d2      	lsls	r2, r2, #3
 8000726:	21ff      	movs	r1, #255	@ 0xff
 8000728:	4091      	lsls	r1, r2
 800072a:	000a      	movs	r2, r1
 800072c:	43d2      	mvns	r2, r2
 800072e:	401a      	ands	r2, r3
 8000730:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	019b      	lsls	r3, r3, #6
 8000736:	22ff      	movs	r2, #255	@ 0xff
 8000738:	401a      	ands	r2, r3
 800073a:	1dfb      	adds	r3, r7, #7
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	0018      	movs	r0, r3
 8000740:	2303      	movs	r3, #3
 8000742:	4003      	ands	r3, r0
 8000744:	00db      	lsls	r3, r3, #3
 8000746:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000748:	481f      	ldr	r0, [pc, #124]	@ (80007c8 <__NVIC_SetPriority+0xd4>)
 800074a:	1dfb      	adds	r3, r7, #7
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	b25b      	sxtb	r3, r3
 8000750:	089b      	lsrs	r3, r3, #2
 8000752:	430a      	orrs	r2, r1
 8000754:	33c0      	adds	r3, #192	@ 0xc0
 8000756:	009b      	lsls	r3, r3, #2
 8000758:	501a      	str	r2, [r3, r0]
}
 800075a:	e031      	b.n	80007c0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800075c:	4a1b      	ldr	r2, [pc, #108]	@ (80007cc <__NVIC_SetPriority+0xd8>)
 800075e:	1dfb      	adds	r3, r7, #7
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	0019      	movs	r1, r3
 8000764:	230f      	movs	r3, #15
 8000766:	400b      	ands	r3, r1
 8000768:	3b08      	subs	r3, #8
 800076a:	089b      	lsrs	r3, r3, #2
 800076c:	3306      	adds	r3, #6
 800076e:	009b      	lsls	r3, r3, #2
 8000770:	18d3      	adds	r3, r2, r3
 8000772:	3304      	adds	r3, #4
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	1dfa      	adds	r2, r7, #7
 8000778:	7812      	ldrb	r2, [r2, #0]
 800077a:	0011      	movs	r1, r2
 800077c:	2203      	movs	r2, #3
 800077e:	400a      	ands	r2, r1
 8000780:	00d2      	lsls	r2, r2, #3
 8000782:	21ff      	movs	r1, #255	@ 0xff
 8000784:	4091      	lsls	r1, r2
 8000786:	000a      	movs	r2, r1
 8000788:	43d2      	mvns	r2, r2
 800078a:	401a      	ands	r2, r3
 800078c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	019b      	lsls	r3, r3, #6
 8000792:	22ff      	movs	r2, #255	@ 0xff
 8000794:	401a      	ands	r2, r3
 8000796:	1dfb      	adds	r3, r7, #7
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	0018      	movs	r0, r3
 800079c:	2303      	movs	r3, #3
 800079e:	4003      	ands	r3, r0
 80007a0:	00db      	lsls	r3, r3, #3
 80007a2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007a4:	4809      	ldr	r0, [pc, #36]	@ (80007cc <__NVIC_SetPriority+0xd8>)
 80007a6:	1dfb      	adds	r3, r7, #7
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	001c      	movs	r4, r3
 80007ac:	230f      	movs	r3, #15
 80007ae:	4023      	ands	r3, r4
 80007b0:	3b08      	subs	r3, #8
 80007b2:	089b      	lsrs	r3, r3, #2
 80007b4:	430a      	orrs	r2, r1
 80007b6:	3306      	adds	r3, #6
 80007b8:	009b      	lsls	r3, r3, #2
 80007ba:	18c3      	adds	r3, r0, r3
 80007bc:	3304      	adds	r3, #4
 80007be:	601a      	str	r2, [r3, #0]
}
 80007c0:	46c0      	nop			@ (mov r8, r8)
 80007c2:	46bd      	mov	sp, r7
 80007c4:	b003      	add	sp, #12
 80007c6:	bd90      	pop	{r4, r7, pc}
 80007c8:	e000e100 	.word	0xe000e100
 80007cc:	e000ed00 	.word	0xe000ed00

080007d0 <Init_SysTick>:
 *
 * This function configures the SysTick timer to produce an interrupt
 * every 100ms. The timer is initialized with a specific reload value
 * and interrupt priority, and then enabled.
 */
void Init_SysTick(void) {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
    // SysTick is defined in core_cm0.h
    // Set reload to get 100ms interrupts
    SysTick->LOAD = (F_SYS_CLK / 80) - 1;
 80007d4:	4b08      	ldr	r3, [pc, #32]	@ (80007f8 <Init_SysTick+0x28>)
 80007d6:	4a09      	ldr	r2, [pc, #36]	@ (80007fc <Init_SysTick+0x2c>)
 80007d8:	605a      	str	r2, [r3, #4]

    // Set interrupt priority
    NVIC_SetPriority(SysTick_IRQn, 3);
 80007da:	2301      	movs	r3, #1
 80007dc:	425b      	negs	r3, r3
 80007de:	2103      	movs	r1, #3
 80007e0:	0018      	movs	r0, r3
 80007e2:	f7ff ff87 	bl	80006f4 <__NVIC_SetPriority>
    // Force load of reload value
    SysTick->VAL = 0;
 80007e6:	4b04      	ldr	r3, [pc, #16]	@ (80007f8 <Init_SysTick+0x28>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	609a      	str	r2, [r3, #8]
    // Enable interrupt, enable SysTick timer
    SysTick->CTRL = SysTick_CTRL_TICKINT_Msk |
 80007ec:	4b02      	ldr	r3, [pc, #8]	@ (80007f8 <Init_SysTick+0x28>)
 80007ee:	2203      	movs	r2, #3
 80007f0:	601a      	str	r2, [r3, #0]
                    SysTick_CTRL_ENABLE_Msk;
}
 80007f2:	46c0      	nop			@ (mov r8, r8)
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	e000e010 	.word	0xe000e010
 80007fc:	000927bf 	.word	0x000927bf

08000800 <SysTick_Handler>:
 * This handler increments a time counter and switches tones every 2 seconds.
 * When the time threshold is reached, it disables the DMA, updates the DMA
 * buffer with the next tone's sample data, resets the counter, and restarts
 * the DMA. The tones cycle through a predefined set of four options.
 */
void SysTick_Handler(void) {
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0

    time_count++;
 8000804:	4b21      	ldr	r3, [pc, #132]	@ (800088c <SysTick_Handler+0x8c>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	1c5a      	adds	r2, r3, #1
 800080a:	4b20      	ldr	r3, [pc, #128]	@ (800088c <SysTick_Handler+0x8c>)
 800080c:	601a      	str	r2, [r3, #0]
    if (time_count >= 20) {                // Switch tone every 2 seconds
 800080e:	4b1f      	ldr	r3, [pc, #124]	@ (800088c <SysTick_Handler+0x8c>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	2b13      	cmp	r3, #19
 8000814:	dd37      	ble.n	8000886 <SysTick_Handler+0x86>
        DMA2_Channel3->CCR &= ~DMA_CCR_EN; // Disable DMA
 8000816:	4b1e      	ldr	r3, [pc, #120]	@ (8000890 <SysTick_Handler+0x90>)
 8000818:	681a      	ldr	r2, [r3, #0]
 800081a:	4b1d      	ldr	r3, [pc, #116]	@ (8000890 <SysTick_Handler+0x90>)
 800081c:	2101      	movs	r1, #1
 800081e:	438a      	bics	r2, r1
 8000820:	601a      	str	r2, [r3, #0]
        time_count = 0;
 8000822:	4b1a      	ldr	r3, [pc, #104]	@ (800088c <SysTick_Handler+0x8c>)
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
        tone_index = (tone_index + 1) % 4; // Cycle through 4 tones
 8000828:	4b1a      	ldr	r3, [pc, #104]	@ (8000894 <SysTick_Handler+0x94>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	3301      	adds	r3, #1
 800082e:	4a1a      	ldr	r2, [pc, #104]	@ (8000898 <SysTick_Handler+0x98>)
 8000830:	4013      	ands	r3, r2
 8000832:	d504      	bpl.n	800083e <SysTick_Handler+0x3e>
 8000834:	3b01      	subs	r3, #1
 8000836:	2204      	movs	r2, #4
 8000838:	4252      	negs	r2, r2
 800083a:	4313      	orrs	r3, r2
 800083c:	3301      	adds	r3, #1
 800083e:	001a      	movs	r2, r3
 8000840:	4b14      	ldr	r3, [pc, #80]	@ (8000894 <SysTick_Handler+0x94>)
 8000842:	601a      	str	r2, [r3, #0]

        // Change the DMA buffer to the new tone
        switch (tone_index) {
 8000844:	4b13      	ldr	r3, [pc, #76]	@ (8000894 <SysTick_Handler+0x94>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d002      	beq.n	8000852 <SysTick_Handler+0x52>
 800084c:	2b01      	cmp	r3, #1
 800084e:	d00a      	beq.n	8000866 <SysTick_Handler+0x66>
 8000850:	e013      	b.n	800087a <SysTick_Handler+0x7a>
        case 0:
            DMA2_Channel3->CMAR = (uint32_t)a4_samples;
 8000852:	4b0f      	ldr	r3, [pc, #60]	@ (8000890 <SysTick_Handler+0x90>)
 8000854:	4a11      	ldr	r2, [pc, #68]	@ (800089c <SysTick_Handler+0x9c>)
 8000856:	60da      	str	r2, [r3, #12]
            DMA2_Channel3->CNDTR = A4_BLOCK;
 8000858:	4b0d      	ldr	r3, [pc, #52]	@ (8000890 <SysTick_Handler+0x90>)
 800085a:	226d      	movs	r2, #109	@ 0x6d
 800085c:	605a      	str	r2, [r3, #4]
            set_blk_size(A4_BLOCK);
 800085e:	206d      	movs	r0, #109	@ 0x6d
 8000860:	f7ff fd8c 	bl	800037c <set_blk_size>
            break;
 8000864:	e009      	b.n	800087a <SysTick_Handler+0x7a>
        case 1:
            DMA2_Channel3->CMAR = (uint32_t)d5_samples;
 8000866:	4b0a      	ldr	r3, [pc, #40]	@ (8000890 <SysTick_Handler+0x90>)
 8000868:	4a0d      	ldr	r2, [pc, #52]	@ (80008a0 <SysTick_Handler+0xa0>)
 800086a:	60da      	str	r2, [r3, #12]
            DMA2_Channel3->CNDTR = D5_BLOCK;
 800086c:	4b08      	ldr	r3, [pc, #32]	@ (8000890 <SysTick_Handler+0x90>)
 800086e:	2251      	movs	r2, #81	@ 0x51
 8000870:	605a      	str	r2, [r3, #4]
            set_blk_size(D5_BLOCK);
 8000872:	2051      	movs	r0, #81	@ 0x51
 8000874:	f7ff fd82 	bl	800037c <set_blk_size>
            break;
 8000878:	46c0      	nop			@ (mov r8, r8)
        }

        // Restart the DMA
        DMA2_Channel3->CCR |= DMA_CCR_EN; // Enable DMA
 800087a:	4b05      	ldr	r3, [pc, #20]	@ (8000890 <SysTick_Handler+0x90>)
 800087c:	681a      	ldr	r2, [r3, #0]
 800087e:	4b04      	ldr	r3, [pc, #16]	@ (8000890 <SysTick_Handler+0x90>)
 8000880:	2101      	movs	r1, #1
 8000882:	430a      	orrs	r2, r1
 8000884:	601a      	str	r2, [r3, #0]
    }
}
 8000886:	46c0      	nop			@ (mov r8, r8)
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	20001080 	.word	0x20001080
 8000890:	40020430 	.word	0x40020430
 8000894:	20001084 	.word	0x20001084
 8000898:	80000003 	.word	0x80000003
 800089c:	20000080 	.word	0x20000080
 80008a0:	20000880 	.word	0x20000880

080008a4 <main>:

int main(void) {
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af02      	add	r7, sp, #8
	 */
//    char buf[TXT_BUFFER_SIZE]; // Buffer to store received string
//    int idx = 0;   // Index for buffer

    // Generate all of my tone buffers first
    tone_to_samples(A4_FREQ, A4_STEP, A4_BLOCK, a4_samples, BUFFER_SIZE);
 80008aa:	4a16      	ldr	r2, [pc, #88]	@ (8000904 <main+0x60>)
 80008ac:	23dc      	movs	r3, #220	@ 0xdc
 80008ae:	0058      	lsls	r0, r3, #1
 80008b0:	2380      	movs	r3, #128	@ 0x80
 80008b2:	00db      	lsls	r3, r3, #3
 80008b4:	9300      	str	r3, [sp, #0]
 80008b6:	0013      	movs	r3, r2
 80008b8:	226d      	movs	r2, #109	@ 0x6d
 80008ba:	2100      	movs	r1, #0
 80008bc:	f7ff fe1c 	bl	80004f8 <tone_to_samples>
    tone_to_samples(D5_FREQ, D5_STEP, D5_BLOCK, d5_samples, BUFFER_SIZE);
 80008c0:	4a11      	ldr	r2, [pc, #68]	@ (8000908 <main+0x64>)
 80008c2:	4812      	ldr	r0, [pc, #72]	@ (800090c <main+0x68>)
 80008c4:	2380      	movs	r3, #128	@ 0x80
 80008c6:	00db      	lsls	r3, r3, #3
 80008c8:	9300      	str	r3, [sp, #0]
 80008ca:	0013      	movs	r3, r2
 80008cc:	2251      	movs	r2, #81	@ 0x51
 80008ce:	2100      	movs	r1, #0
 80008d0:	f7ff fe12 	bl	80004f8 <tone_to_samples>

    // Initialize peripherals
    usart_init();
 80008d4:	f000 f986 	bl	8000be4 <usart_init>
    uled_init();
 80008d8:	f000 f8ba 	bl	8000a50 <uled_init>
    analog_out_init(a4_samples, A4_BLOCK);
 80008dc:	4b09      	ldr	r3, [pc, #36]	@ (8000904 <main+0x60>)
 80008de:	216d      	movs	r1, #109	@ 0x6d
 80008e0:	0018      	movs	r0, r3
 80008e2:	f7ff fd9d 	bl	8000420 <analog_out_init>
    set_blk_size(A4_BLOCK);
 80008e6:	206d      	movs	r0, #109	@ 0x6d
 80008e8:	f7ff fd48 	bl	800037c <set_blk_size>
    // TODO: Do I need to use analog input or could I use digital input? (be careful with voltage levels, don't want to damage a pin)
    // TODO: UART init (maybe, depends on if we can read with default UART)

    // TODO: Ask user for time and alarm, set system parameters

    printf("What time is it?\r\n");
 80008ec:	4b08      	ldr	r3, [pc, #32]	@ (8000910 <main+0x6c>)
 80008ee:	0018      	movs	r0, r3
 80008f0:	f000 fd38 	bl	8001364 <puts>
    printf("Goodnight!");
 80008f4:	4b07      	ldr	r3, [pc, #28]	@ (8000914 <main+0x70>)
 80008f6:	0018      	movs	r0, r3
 80008f8:	f000 fcce 	bl	8001298 <iprintf>
    Init_SysTick();
 80008fc:	f7ff ff68 	bl	80007d0 <Init_SysTick>
    // TODO: Figure out sleep and such

    while (1) {
 8000900:	46c0      	nop			@ (mov r8, r8)
 8000902:	e7fd      	b.n	8000900 <main+0x5c>
 8000904:	20000080 	.word	0x20000080
 8000908:	20000880 	.word	0x20000880
 800090c:	0000024b 	.word	0x0000024b
 8000910:	08002240 	.word	0x08002240
 8000914:	08002254 	.word	0x08002254

08000918 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b086      	sub	sp, #24
 800091c:	af00      	add	r7, sp, #0
 800091e:	60f8      	str	r0, [r7, #12]
 8000920:	60b9      	str	r1, [r7, #8]
 8000922:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000924:	2300      	movs	r3, #0
 8000926:	617b      	str	r3, [r7, #20]
 8000928:	e00a      	b.n	8000940 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800092a:	f000 faa2 	bl	8000e72 <__io_getchar>
 800092e:	0001      	movs	r1, r0
 8000930:	68bb      	ldr	r3, [r7, #8]
 8000932:	1c5a      	adds	r2, r3, #1
 8000934:	60ba      	str	r2, [r7, #8]
 8000936:	b2ca      	uxtb	r2, r1
 8000938:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800093a:	697b      	ldr	r3, [r7, #20]
 800093c:	3301      	adds	r3, #1
 800093e:	617b      	str	r3, [r7, #20]
 8000940:	697a      	ldr	r2, [r7, #20]
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	429a      	cmp	r2, r3
 8000946:	dbf0      	blt.n	800092a <_read+0x12>
  }

  return len;
 8000948:	687b      	ldr	r3, [r7, #4]
}
 800094a:	0018      	movs	r0, r3
 800094c:	46bd      	mov	sp, r7
 800094e:	b006      	add	sp, #24
 8000950:	bd80      	pop	{r7, pc}

08000952 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000952:	b580      	push	{r7, lr}
 8000954:	b086      	sub	sp, #24
 8000956:	af00      	add	r7, sp, #0
 8000958:	60f8      	str	r0, [r7, #12]
 800095a:	60b9      	str	r1, [r7, #8]
 800095c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800095e:	2300      	movs	r3, #0
 8000960:	617b      	str	r3, [r7, #20]
 8000962:	e009      	b.n	8000978 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000964:	68bb      	ldr	r3, [r7, #8]
 8000966:	1c5a      	adds	r2, r3, #1
 8000968:	60ba      	str	r2, [r7, #8]
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	0018      	movs	r0, r3
 800096e:	f000 fa6d 	bl	8000e4c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000972:	697b      	ldr	r3, [r7, #20]
 8000974:	3301      	adds	r3, #1
 8000976:	617b      	str	r3, [r7, #20]
 8000978:	697a      	ldr	r2, [r7, #20]
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	429a      	cmp	r2, r3
 800097e:	dbf1      	blt.n	8000964 <_write+0x12>
  }
  return len;
 8000980:	687b      	ldr	r3, [r7, #4]
}
 8000982:	0018      	movs	r0, r3
 8000984:	46bd      	mov	sp, r7
 8000986:	b006      	add	sp, #24
 8000988:	bd80      	pop	{r7, pc}

0800098a <_close>:

int _close(int file)
{
 800098a:	b580      	push	{r7, lr}
 800098c:	b082      	sub	sp, #8
 800098e:	af00      	add	r7, sp, #0
 8000990:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000992:	2301      	movs	r3, #1
 8000994:	425b      	negs	r3, r3
}
 8000996:	0018      	movs	r0, r3
 8000998:	46bd      	mov	sp, r7
 800099a:	b002      	add	sp, #8
 800099c:	bd80      	pop	{r7, pc}

0800099e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800099e:	b580      	push	{r7, lr}
 80009a0:	b082      	sub	sp, #8
 80009a2:	af00      	add	r7, sp, #0
 80009a4:	6078      	str	r0, [r7, #4]
 80009a6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	2280      	movs	r2, #128	@ 0x80
 80009ac:	0192      	lsls	r2, r2, #6
 80009ae:	605a      	str	r2, [r3, #4]
  return 0;
 80009b0:	2300      	movs	r3, #0
}
 80009b2:	0018      	movs	r0, r3
 80009b4:	46bd      	mov	sp, r7
 80009b6:	b002      	add	sp, #8
 80009b8:	bd80      	pop	{r7, pc}

080009ba <_isatty>:

int _isatty(int file)
{
 80009ba:	b580      	push	{r7, lr}
 80009bc:	b082      	sub	sp, #8
 80009be:	af00      	add	r7, sp, #0
 80009c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009c2:	2301      	movs	r3, #1
}
 80009c4:	0018      	movs	r0, r3
 80009c6:	46bd      	mov	sp, r7
 80009c8:	b002      	add	sp, #8
 80009ca:	bd80      	pop	{r7, pc}

080009cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b084      	sub	sp, #16
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	60f8      	str	r0, [r7, #12]
 80009d4:	60b9      	str	r1, [r7, #8]
 80009d6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80009d8:	2300      	movs	r3, #0
}
 80009da:	0018      	movs	r0, r3
 80009dc:	46bd      	mov	sp, r7
 80009de:	b004      	add	sp, #16
 80009e0:	bd80      	pop	{r7, pc}
	...

080009e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b086      	sub	sp, #24
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009ec:	4a14      	ldr	r2, [pc, #80]	@ (8000a40 <_sbrk+0x5c>)
 80009ee:	4b15      	ldr	r3, [pc, #84]	@ (8000a44 <_sbrk+0x60>)
 80009f0:	1ad3      	subs	r3, r2, r3
 80009f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009f8:	4b13      	ldr	r3, [pc, #76]	@ (8000a48 <_sbrk+0x64>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d102      	bne.n	8000a06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a00:	4b11      	ldr	r3, [pc, #68]	@ (8000a48 <_sbrk+0x64>)
 8000a02:	4a12      	ldr	r2, [pc, #72]	@ (8000a4c <_sbrk+0x68>)
 8000a04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a06:	4b10      	ldr	r3, [pc, #64]	@ (8000a48 <_sbrk+0x64>)
 8000a08:	681a      	ldr	r2, [r3, #0]
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	18d3      	adds	r3, r2, r3
 8000a0e:	693a      	ldr	r2, [r7, #16]
 8000a10:	429a      	cmp	r2, r3
 8000a12:	d207      	bcs.n	8000a24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a14:	f000 feb2 	bl	800177c <__errno>
 8000a18:	0003      	movs	r3, r0
 8000a1a:	220c      	movs	r2, #12
 8000a1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	425b      	negs	r3, r3
 8000a22:	e009      	b.n	8000a38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a24:	4b08      	ldr	r3, [pc, #32]	@ (8000a48 <_sbrk+0x64>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a2a:	4b07      	ldr	r3, [pc, #28]	@ (8000a48 <_sbrk+0x64>)
 8000a2c:	681a      	ldr	r2, [r3, #0]
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	18d2      	adds	r2, r2, r3
 8000a32:	4b05      	ldr	r3, [pc, #20]	@ (8000a48 <_sbrk+0x64>)
 8000a34:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000a36:	68fb      	ldr	r3, [r7, #12]
}
 8000a38:	0018      	movs	r0, r3
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	b006      	add	sp, #24
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	20008000 	.word	0x20008000
 8000a44:	00000400 	.word	0x00000400
 8000a48:	20001088 	.word	0x20001088
 8000a4c:	200012e8 	.word	0x200012e8

08000a50 <uled_init>:
//#include "log.h"
#include <stm32f091xc.h>
#include "uled.h"
#include "utilities.h"

int uled_init(void) {
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0

	// This section of code was taken from Alex Dean's Github
	// https://github.com/alexander-g-dean/ESF/blob/master/ST/Code/ch2/Basic-LED/main.c
	// Enable peripheral clock of GPIOA (for LD2)
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8000a54:	4b0f      	ldr	r3, [pc, #60]	@ (8000a94 <uled_init+0x44>)
 8000a56:	695a      	ldr	r2, [r3, #20]
 8000a58:	4b0e      	ldr	r3, [pc, #56]	@ (8000a94 <uled_init+0x44>)
 8000a5a:	2180      	movs	r1, #128	@ 0x80
 8000a5c:	0289      	lsls	r1, r1, #10
 8000a5e:	430a      	orrs	r2, r1
 8000a60:	615a      	str	r2, [r3, #20]
	// Configure PA5 in output mode (01=1)
	MODIFY_FIELD(GPIOA->MODER, GPIO_MODER_MODER5, ESF_GPIO_MODER_OUTPUT);
 8000a62:	2390      	movs	r3, #144	@ 0x90
 8000a64:	05db      	lsls	r3, r3, #23
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a0b      	ldr	r2, [pc, #44]	@ (8000a98 <uled_init+0x48>)
 8000a6a:	401a      	ands	r2, r3
 8000a6c:	2390      	movs	r3, #144	@ 0x90
 8000a6e:	05db      	lsls	r3, r3, #23
 8000a70:	2180      	movs	r1, #128	@ 0x80
 8000a72:	00c9      	lsls	r1, r1, #3
 8000a74:	430a      	orrs	r2, r1
 8000a76:	601a      	str	r2, [r3, #0]
	// Turn off LD2
	GPIOA->BSRR |= LD2_OFF_MSK;
 8000a78:	2390      	movs	r3, #144	@ 0x90
 8000a7a:	05db      	lsls	r3, r3, #23
 8000a7c:	699a      	ldr	r2, [r3, #24]
 8000a7e:	2390      	movs	r3, #144	@ 0x90
 8000a80:	05db      	lsls	r3, r3, #23
 8000a82:	2180      	movs	r1, #128	@ 0x80
 8000a84:	0389      	lsls	r1, r1, #14
 8000a86:	430a      	orrs	r2, r1
 8000a88:	619a      	str	r2, [r3, #24]
	// End of Alex Dean Code

	return 0;
 8000a8a:	2300      	movs	r3, #0

}
 8000a8c:	0018      	movs	r0, r3
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	46c0      	nop			@ (mov r8, r8)
 8000a94:	40021000 	.word	0x40021000
 8000a98:	fffff3ff 	.word	0xfffff3ff

08000a9c <__NVIC_EnableIRQ>:
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	0002      	movs	r2, r0
 8000aa4:	1dfb      	adds	r3, r7, #7
 8000aa6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000aa8:	1dfb      	adds	r3, r7, #7
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	2b7f      	cmp	r3, #127	@ 0x7f
 8000aae:	d809      	bhi.n	8000ac4 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ab0:	1dfb      	adds	r3, r7, #7
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	001a      	movs	r2, r3
 8000ab6:	231f      	movs	r3, #31
 8000ab8:	401a      	ands	r2, r3
 8000aba:	4b04      	ldr	r3, [pc, #16]	@ (8000acc <__NVIC_EnableIRQ+0x30>)
 8000abc:	2101      	movs	r1, #1
 8000abe:	4091      	lsls	r1, r2
 8000ac0:	000a      	movs	r2, r1
 8000ac2:	601a      	str	r2, [r3, #0]
}
 8000ac4:	46c0      	nop			@ (mov r8, r8)
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	b002      	add	sp, #8
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	e000e100 	.word	0xe000e100

08000ad0 <__NVIC_ClearPendingIRQ>:
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	0002      	movs	r2, r0
 8000ad8:	1dfb      	adds	r3, r7, #7
 8000ada:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000adc:	1dfb      	adds	r3, r7, #7
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	2b7f      	cmp	r3, #127	@ 0x7f
 8000ae2:	d80a      	bhi.n	8000afa <__NVIC_ClearPendingIRQ+0x2a>
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ae4:	1dfb      	adds	r3, r7, #7
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	001a      	movs	r2, r3
 8000aea:	231f      	movs	r3, #31
 8000aec:	4013      	ands	r3, r2
 8000aee:	4905      	ldr	r1, [pc, #20]	@ (8000b04 <__NVIC_ClearPendingIRQ+0x34>)
 8000af0:	2201      	movs	r2, #1
 8000af2:	409a      	lsls	r2, r3
 8000af4:	23c0      	movs	r3, #192	@ 0xc0
 8000af6:	005b      	lsls	r3, r3, #1
 8000af8:	50ca      	str	r2, [r1, r3]
}
 8000afa:	46c0      	nop			@ (mov r8, r8)
 8000afc:	46bd      	mov	sp, r7
 8000afe:	b002      	add	sp, #8
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	46c0      	nop			@ (mov r8, r8)
 8000b04:	e000e100 	.word	0xe000e100

08000b08 <__NVIC_SetPriority>:
{
 8000b08:	b590      	push	{r4, r7, lr}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	0002      	movs	r2, r0
 8000b10:	6039      	str	r1, [r7, #0]
 8000b12:	1dfb      	adds	r3, r7, #7
 8000b14:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b16:	1dfb      	adds	r3, r7, #7
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	2b7f      	cmp	r3, #127	@ 0x7f
 8000b1c:	d828      	bhi.n	8000b70 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b1e:	4a2f      	ldr	r2, [pc, #188]	@ (8000bdc <__NVIC_SetPriority+0xd4>)
 8000b20:	1dfb      	adds	r3, r7, #7
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	b25b      	sxtb	r3, r3
 8000b26:	089b      	lsrs	r3, r3, #2
 8000b28:	33c0      	adds	r3, #192	@ 0xc0
 8000b2a:	009b      	lsls	r3, r3, #2
 8000b2c:	589b      	ldr	r3, [r3, r2]
 8000b2e:	1dfa      	adds	r2, r7, #7
 8000b30:	7812      	ldrb	r2, [r2, #0]
 8000b32:	0011      	movs	r1, r2
 8000b34:	2203      	movs	r2, #3
 8000b36:	400a      	ands	r2, r1
 8000b38:	00d2      	lsls	r2, r2, #3
 8000b3a:	21ff      	movs	r1, #255	@ 0xff
 8000b3c:	4091      	lsls	r1, r2
 8000b3e:	000a      	movs	r2, r1
 8000b40:	43d2      	mvns	r2, r2
 8000b42:	401a      	ands	r2, r3
 8000b44:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	019b      	lsls	r3, r3, #6
 8000b4a:	22ff      	movs	r2, #255	@ 0xff
 8000b4c:	401a      	ands	r2, r3
 8000b4e:	1dfb      	adds	r3, r7, #7
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	0018      	movs	r0, r3
 8000b54:	2303      	movs	r3, #3
 8000b56:	4003      	ands	r3, r0
 8000b58:	00db      	lsls	r3, r3, #3
 8000b5a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b5c:	481f      	ldr	r0, [pc, #124]	@ (8000bdc <__NVIC_SetPriority+0xd4>)
 8000b5e:	1dfb      	adds	r3, r7, #7
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	b25b      	sxtb	r3, r3
 8000b64:	089b      	lsrs	r3, r3, #2
 8000b66:	430a      	orrs	r2, r1
 8000b68:	33c0      	adds	r3, #192	@ 0xc0
 8000b6a:	009b      	lsls	r3, r3, #2
 8000b6c:	501a      	str	r2, [r3, r0]
}
 8000b6e:	e031      	b.n	8000bd4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b70:	4a1b      	ldr	r2, [pc, #108]	@ (8000be0 <__NVIC_SetPriority+0xd8>)
 8000b72:	1dfb      	adds	r3, r7, #7
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	0019      	movs	r1, r3
 8000b78:	230f      	movs	r3, #15
 8000b7a:	400b      	ands	r3, r1
 8000b7c:	3b08      	subs	r3, #8
 8000b7e:	089b      	lsrs	r3, r3, #2
 8000b80:	3306      	adds	r3, #6
 8000b82:	009b      	lsls	r3, r3, #2
 8000b84:	18d3      	adds	r3, r2, r3
 8000b86:	3304      	adds	r3, #4
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	1dfa      	adds	r2, r7, #7
 8000b8c:	7812      	ldrb	r2, [r2, #0]
 8000b8e:	0011      	movs	r1, r2
 8000b90:	2203      	movs	r2, #3
 8000b92:	400a      	ands	r2, r1
 8000b94:	00d2      	lsls	r2, r2, #3
 8000b96:	21ff      	movs	r1, #255	@ 0xff
 8000b98:	4091      	lsls	r1, r2
 8000b9a:	000a      	movs	r2, r1
 8000b9c:	43d2      	mvns	r2, r2
 8000b9e:	401a      	ands	r2, r3
 8000ba0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	019b      	lsls	r3, r3, #6
 8000ba6:	22ff      	movs	r2, #255	@ 0xff
 8000ba8:	401a      	ands	r2, r3
 8000baa:	1dfb      	adds	r3, r7, #7
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	0018      	movs	r0, r3
 8000bb0:	2303      	movs	r3, #3
 8000bb2:	4003      	ands	r3, r0
 8000bb4:	00db      	lsls	r3, r3, #3
 8000bb6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bb8:	4809      	ldr	r0, [pc, #36]	@ (8000be0 <__NVIC_SetPriority+0xd8>)
 8000bba:	1dfb      	adds	r3, r7, #7
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	001c      	movs	r4, r3
 8000bc0:	230f      	movs	r3, #15
 8000bc2:	4023      	ands	r3, r4
 8000bc4:	3b08      	subs	r3, #8
 8000bc6:	089b      	lsrs	r3, r3, #2
 8000bc8:	430a      	orrs	r2, r1
 8000bca:	3306      	adds	r3, #6
 8000bcc:	009b      	lsls	r3, r3, #2
 8000bce:	18c3      	adds	r3, r0, r3
 8000bd0:	3304      	adds	r3, #4
 8000bd2:	601a      	str	r2, [r3, #0]
}
 8000bd4:	46c0      	nop			@ (mov r8, r8)
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	b003      	add	sp, #12
 8000bda:	bd90      	pop	{r4, r7, pc}
 8000bdc:	e000e100 	.word	0xe000e100
 8000be0:	e000ed00 	.word	0xe000ed00

08000be4 <usart_init>:
cbfifo tx_cb = {
    .write = 0,
    .read = 0,
    .is_full = 0};

int usart_init() {
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0

    // This code was taken from Alex Dean's Github: https://github.com/alexander-g-dean/ESF.git
    RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8000be8:	4b43      	ldr	r3, [pc, #268]	@ (8000cf8 <usart_init+0x114>)
 8000bea:	69da      	ldr	r2, [r3, #28]
 8000bec:	4b42      	ldr	r3, [pc, #264]	@ (8000cf8 <usart_init+0x114>)
 8000bee:	2180      	movs	r1, #128	@ 0x80
 8000bf0:	0289      	lsls	r1, r1, #10
 8000bf2:	430a      	orrs	r2, r1
 8000bf4:	61da      	str	r2, [r3, #28]
    RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8000bf6:	4b40      	ldr	r3, [pc, #256]	@ (8000cf8 <usart_init+0x114>)
 8000bf8:	695a      	ldr	r2, [r3, #20]
 8000bfa:	4b3f      	ldr	r3, [pc, #252]	@ (8000cf8 <usart_init+0x114>)
 8000bfc:	2180      	movs	r1, #128	@ 0x80
 8000bfe:	0289      	lsls	r1, r1, #10
 8000c00:	430a      	orrs	r2, r1
 8000c02:	615a      	str	r2, [r3, #20]

    // GPIO A pin 2 and 3 in alternate function 1 (USART2)
    // Set mode field to 2 for alternate function
    MODIFY_FIELD(GPIOA->MODER, GPIO_MODER_MODER2, ESF_GPIO_MODER_ALT_FUNC);
 8000c04:	2390      	movs	r3, #144	@ 0x90
 8000c06:	05db      	lsls	r3, r3, #23
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	2230      	movs	r2, #48	@ 0x30
 8000c0c:	4393      	bics	r3, r2
 8000c0e:	001a      	movs	r2, r3
 8000c10:	2390      	movs	r3, #144	@ 0x90
 8000c12:	05db      	lsls	r3, r3, #23
 8000c14:	2120      	movs	r1, #32
 8000c16:	430a      	orrs	r2, r1
 8000c18:	601a      	str	r2, [r3, #0]
    MODIFY_FIELD(GPIOA->MODER, GPIO_MODER_MODER3, ESF_GPIO_MODER_ALT_FUNC);
 8000c1a:	2390      	movs	r3, #144	@ 0x90
 8000c1c:	05db      	lsls	r3, r3, #23
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	22c0      	movs	r2, #192	@ 0xc0
 8000c22:	4393      	bics	r3, r2
 8000c24:	001a      	movs	r2, r3
 8000c26:	2390      	movs	r3, #144	@ 0x90
 8000c28:	05db      	lsls	r3, r3, #23
 8000c2a:	2180      	movs	r1, #128	@ 0x80
 8000c2c:	430a      	orrs	r2, r1
 8000c2e:	601a      	str	r2, [r3, #0]
    // Select USART2 (AF = 1) as alternate function
    MODIFY_FIELD(GPIOA->AFR[0], GPIO_AFRL_AFSEL2, 1);
 8000c30:	2390      	movs	r3, #144	@ 0x90
 8000c32:	05db      	lsls	r3, r3, #23
 8000c34:	6a1b      	ldr	r3, [r3, #32]
 8000c36:	4a31      	ldr	r2, [pc, #196]	@ (8000cfc <usart_init+0x118>)
 8000c38:	401a      	ands	r2, r3
 8000c3a:	2390      	movs	r3, #144	@ 0x90
 8000c3c:	05db      	lsls	r3, r3, #23
 8000c3e:	2180      	movs	r1, #128	@ 0x80
 8000c40:	0049      	lsls	r1, r1, #1
 8000c42:	430a      	orrs	r2, r1
 8000c44:	621a      	str	r2, [r3, #32]
    MODIFY_FIELD(GPIOA->AFR[0], GPIO_AFRL_AFSEL3, 1);
 8000c46:	2390      	movs	r3, #144	@ 0x90
 8000c48:	05db      	lsls	r3, r3, #23
 8000c4a:	6a1b      	ldr	r3, [r3, #32]
 8000c4c:	4a2c      	ldr	r2, [pc, #176]	@ (8000d00 <usart_init+0x11c>)
 8000c4e:	401a      	ands	r2, r3
 8000c50:	2390      	movs	r3, #144	@ 0x90
 8000c52:	05db      	lsls	r3, r3, #23
 8000c54:	2180      	movs	r1, #128	@ 0x80
 8000c56:	0149      	lsls	r1, r1, #5
 8000c58:	430a      	orrs	r2, r1
 8000c5a:	621a      	str	r2, [r3, #32]
    // End of Alex Dean Code


    // Set baud rate
    USART2->BRR = USART_BRR;
 8000c5c:	4b29      	ldr	r3, [pc, #164]	@ (8000d04 <usart_init+0x120>)
 8000c5e:	4a2a      	ldr	r2, [pc, #168]	@ (8000d08 <usart_init+0x124>)
 8000c60:	60da      	str	r2, [r3, #12]
    // set M0 and M1 fields based on data size
    MODIFY_FIELD(USART2->CR1, USART_CR1_M, USART_M_VAL);
 8000c62:	4b28      	ldr	r3, [pc, #160]	@ (8000d04 <usart_init+0x120>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4a29      	ldr	r2, [pc, #164]	@ (8000d0c <usart_init+0x128>)
 8000c68:	401a      	ands	r2, r3
 8000c6a:	4b26      	ldr	r3, [pc, #152]	@ (8000d04 <usart_init+0x120>)
 8000c6c:	2180      	movs	r1, #128	@ 0x80
 8000c6e:	0149      	lsls	r1, r1, #5
 8000c70:	430a      	orrs	r2, r1
 8000c72:	601a      	str	r2, [r3, #0]
    // Set parity generation and checking
    MODIFY_FIELD(USART2->CR1, USART_CR1_PCE, USART_PCE_VAL);
 8000c74:	4b23      	ldr	r3, [pc, #140]	@ (8000d04 <usart_init+0x120>)
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	4b22      	ldr	r3, [pc, #136]	@ (8000d04 <usart_init+0x120>)
 8000c7a:	2180      	movs	r1, #128	@ 0x80
 8000c7c:	00c9      	lsls	r1, r1, #3
 8000c7e:	430a      	orrs	r2, r1
 8000c80:	601a      	str	r2, [r3, #0]
    MODIFY_FIELD(USART2->CR1, USART_CR1_PS, USART_PS_VAL);
 8000c82:	4b20      	ldr	r3, [pc, #128]	@ (8000d04 <usart_init+0x120>)
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	4b1f      	ldr	r3, [pc, #124]	@ (8000d04 <usart_init+0x120>)
 8000c88:	2180      	movs	r1, #128	@ 0x80
 8000c8a:	0089      	lsls	r1, r1, #2
 8000c8c:	430a      	orrs	r2, r1
 8000c8e:	601a      	str	r2, [r3, #0]
    // Number of stop bits
    MODIFY_FIELD(USART2->CR2, USART_CR2_STOP, STOP_BITS);
 8000c90:	4b1c      	ldr	r3, [pc, #112]	@ (8000d04 <usart_init+0x120>)
 8000c92:	685a      	ldr	r2, [r3, #4]
 8000c94:	4b1b      	ldr	r3, [pc, #108]	@ (8000d04 <usart_init+0x120>)
 8000c96:	491e      	ldr	r1, [pc, #120]	@ (8000d10 <usart_init+0x12c>)
 8000c98:	400a      	ands	r2, r1
 8000c9a:	605a      	str	r2, [r3, #4]

    // Enable transmitter and receiver and USART
    MODIFY_FIELD(USART2->CR1, USART_CR1_TE, 1);
 8000c9c:	4b19      	ldr	r3, [pc, #100]	@ (8000d04 <usart_init+0x120>)
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	4b18      	ldr	r3, [pc, #96]	@ (8000d04 <usart_init+0x120>)
 8000ca2:	2108      	movs	r1, #8
 8000ca4:	430a      	orrs	r2, r1
 8000ca6:	601a      	str	r2, [r3, #0]
    MODIFY_FIELD(USART2->CR1, USART_CR1_RE, 1);
 8000ca8:	4b16      	ldr	r3, [pc, #88]	@ (8000d04 <usart_init+0x120>)
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	4b15      	ldr	r3, [pc, #84]	@ (8000d04 <usart_init+0x120>)
 8000cae:	2104      	movs	r1, #4
 8000cb0:	430a      	orrs	r2, r1
 8000cb2:	601a      	str	r2, [r3, #0]
    MODIFY_FIELD(USART2->CR1, USART_CR1_UE, 1);
 8000cb4:	4b13      	ldr	r3, [pc, #76]	@ (8000d04 <usart_init+0x120>)
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	4b12      	ldr	r3, [pc, #72]	@ (8000d04 <usart_init+0x120>)
 8000cba:	2101      	movs	r1, #1
 8000cbc:	430a      	orrs	r2, r1
 8000cbe:	601a      	str	r2, [r3, #0]

    // Enable RX interrupts
    MODIFY_FIELD(USART2->CR1, USART_CR1_RXNEIE, 1);
 8000cc0:	4b10      	ldr	r3, [pc, #64]	@ (8000d04 <usart_init+0x120>)
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	4b0f      	ldr	r3, [pc, #60]	@ (8000d04 <usart_init+0x120>)
 8000cc6:	2120      	movs	r1, #32
 8000cc8:	430a      	orrs	r2, r1
 8000cca:	601a      	str	r2, [r3, #0]

    // Enable USART2 interrupts in NVIC
    NVIC_SetPriority(USART2_IRQn, 2);
 8000ccc:	2102      	movs	r1, #2
 8000cce:	201c      	movs	r0, #28
 8000cd0:	f7ff ff1a 	bl	8000b08 <__NVIC_SetPriority>
    NVIC_ClearPendingIRQ(USART2_IRQn);
 8000cd4:	201c      	movs	r0, #28
 8000cd6:	f7ff fefb 	bl	8000ad0 <__NVIC_ClearPendingIRQ>
    NVIC_EnableIRQ(USART2_IRQn);
 8000cda:	201c      	movs	r0, #28
 8000cdc:	f7ff fede 	bl	8000a9c <__NVIC_EnableIRQ>

    setbuf(stdout, NULL); // Necessary to remove printf buffering that causes issues
 8000ce0:	4b0c      	ldr	r3, [pc, #48]	@ (8000d14 <usart_init+0x130>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	689b      	ldr	r3, [r3, #8]
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	0018      	movs	r0, r3
 8000cea:	f000 fb45 	bl	8001378 <setbuf>

    return 0;
 8000cee:	2300      	movs	r3, #0
}
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	46c0      	nop			@ (mov r8, r8)
 8000cf8:	40021000 	.word	0x40021000
 8000cfc:	fffff0ff 	.word	0xfffff0ff
 8000d00:	ffff0fff 	.word	0xffff0fff
 8000d04:	40004400 	.word	0x40004400
 8000d08:	000004e2 	.word	0x000004e2
 8000d0c:	efffefff 	.word	0xefffefff
 8000d10:	ffffcfff 	.word	0xffffcfff
 8000d14:	20000010 	.word	0x20000010

08000d18 <USART2_IRQHandler>:

// This code was copied from Alex Dean and modified by Matt Hartnett
void USART2_IRQHandler(void) {
 8000d18:	b590      	push	{r4, r7, lr}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
    uint8_t ch;
    if (USART2->ISR & USART_ISR_RXNE) { // Receive buffer not empty
 8000d1e:	4b1e      	ldr	r3, [pc, #120]	@ (8000d98 <USART2_IRQHandler+0x80>)
 8000d20:	69db      	ldr	r3, [r3, #28]
 8000d22:	2220      	movs	r2, #32
 8000d24:	4013      	ands	r3, r2
 8000d26:	d017      	beq.n	8000d58 <USART2_IRQHandler+0x40>
        // Reading from RDR will clear RXNE
        ch = USART2->RDR;
 8000d28:	4b1b      	ldr	r3, [pc, #108]	@ (8000d98 <USART2_IRQHandler+0x80>)
 8000d2a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000d2c:	b29b      	uxth	r3, r3
 8000d2e:	b2da      	uxtb	r2, r3
 8000d30:	1dfb      	adds	r3, r7, #7
 8000d32:	701a      	strb	r2, [r3, #0]
        if (cbfifo_length(&rx_cb) != cbfifo_capacity(&rx_cb)) {
 8000d34:	4b19      	ldr	r3, [pc, #100]	@ (8000d9c <USART2_IRQHandler+0x84>)
 8000d36:	0018      	movs	r0, r3
 8000d38:	f7ff fca8 	bl	800068c <cbfifo_length>
 8000d3c:	0004      	movs	r4, r0
 8000d3e:	4b17      	ldr	r3, [pc, #92]	@ (8000d9c <USART2_IRQHandler+0x84>)
 8000d40:	0018      	movs	r0, r3
 8000d42:	f7ff fccd 	bl	80006e0 <cbfifo_capacity>
 8000d46:	0003      	movs	r3, r0
 8000d48:	429c      	cmp	r4, r3
 8000d4a:	d005      	beq.n	8000d58 <USART2_IRQHandler+0x40>
            cbfifo_enqueue(&rx_cb, &ch, sizeof(ch));
 8000d4c:	1df9      	adds	r1, r7, #7
 8000d4e:	4b13      	ldr	r3, [pc, #76]	@ (8000d9c <USART2_IRQHandler+0x84>)
 8000d50:	2201      	movs	r2, #1
 8000d52:	0018      	movs	r0, r3
 8000d54:	f7ff fbff 	bl	8000556 <cbfifo_enqueue>
        }
    }
    if (USART2->ISR & USART_ISR_TXE) { // Transmit buffer empty
 8000d58:	4b0f      	ldr	r3, [pc, #60]	@ (8000d98 <USART2_IRQHandler+0x80>)
 8000d5a:	69db      	ldr	r3, [r3, #28]
 8000d5c:	2280      	movs	r2, #128	@ 0x80
 8000d5e:	4013      	ands	r3, r2
 8000d60:	d016      	beq.n	8000d90 <USART2_IRQHandler+0x78>
        // Writing to TDR will clear TXE
        if (cbfifo_length(&tx_cb) != 0) { // More data to send
 8000d62:	4b0f      	ldr	r3, [pc, #60]	@ (8000da0 <USART2_IRQHandler+0x88>)
 8000d64:	0018      	movs	r0, r3
 8000d66:	f7ff fc91 	bl	800068c <cbfifo_length>
 8000d6a:	1e03      	subs	r3, r0, #0
 8000d6c:	d00a      	beq.n	8000d84 <USART2_IRQHandler+0x6c>
            cbfifo_dequeue(&tx_cb, &ch, sizeof(ch));
 8000d6e:	1df9      	adds	r1, r7, #7
 8000d70:	4b0b      	ldr	r3, [pc, #44]	@ (8000da0 <USART2_IRQHandler+0x88>)
 8000d72:	2201      	movs	r2, #1
 8000d74:	0018      	movs	r0, r3
 8000d76:	f7ff fc41 	bl	80005fc <cbfifo_dequeue>
            USART2->TDR = ch;
 8000d7a:	1dfb      	adds	r3, r7, #7
 8000d7c:	781a      	ldrb	r2, [r3, #0]
 8000d7e:	4b06      	ldr	r3, [pc, #24]	@ (8000d98 <USART2_IRQHandler+0x80>)
 8000d80:	851a      	strh	r2, [r3, #40]	@ 0x28
        } else { // Disable transmitter interrupt
            MODIFY_FIELD(USART2->CR1, USART_CR1_TXEIE, 0);
        }
    }
}
 8000d82:	e005      	b.n	8000d90 <USART2_IRQHandler+0x78>
            MODIFY_FIELD(USART2->CR1, USART_CR1_TXEIE, 0);
 8000d84:	4b04      	ldr	r3, [pc, #16]	@ (8000d98 <USART2_IRQHandler+0x80>)
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	4b03      	ldr	r3, [pc, #12]	@ (8000d98 <USART2_IRQHandler+0x80>)
 8000d8a:	2180      	movs	r1, #128	@ 0x80
 8000d8c:	438a      	bics	r2, r1
 8000d8e:	601a      	str	r2, [r3, #0]
}
 8000d90:	46c0      	nop			@ (mov r8, r8)
 8000d92:	46bd      	mov	sp, r7
 8000d94:	b003      	add	sp, #12
 8000d96:	bd90      	pop	{r4, r7, pc}
 8000d98:	40004400 	.word	0x40004400
 8000d9c:	2000108c 	.word	0x2000108c
 8000da0:	20001114 	.word	0x20001114

08000da4 <usart_transmit>:


void usart_transmit(char *buf, int nbyte) {
 8000da4:	b590      	push	{r4, r7, lr}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	6039      	str	r1, [r7, #0]
    while (nbyte > 0) {
 8000dae:	e018      	b.n	8000de2 <usart_transmit+0x3e>
        while (cbfifo_length(&tx_cb) == cbfifo_capacity(&tx_cb))
 8000db0:	46c0      	nop			@ (mov r8, r8)
 8000db2:	4b12      	ldr	r3, [pc, #72]	@ (8000dfc <usart_transmit+0x58>)
 8000db4:	0018      	movs	r0, r3
 8000db6:	f7ff fc69 	bl	800068c <cbfifo_length>
 8000dba:	0004      	movs	r4, r0
 8000dbc:	4b0f      	ldr	r3, [pc, #60]	@ (8000dfc <usart_transmit+0x58>)
 8000dbe:	0018      	movs	r0, r3
 8000dc0:	f7ff fc8e 	bl	80006e0 <cbfifo_capacity>
 8000dc4:	0003      	movs	r3, r0
 8000dc6:	429c      	cmp	r4, r3
 8000dc8:	d0f3      	beq.n	8000db2 <usart_transmit+0xe>
            ; // Wait until TX CB is not full
        cbfifo_enqueue(&tx_cb, buf, 1);
 8000dca:	6879      	ldr	r1, [r7, #4]
 8000dcc:	4b0b      	ldr	r3, [pc, #44]	@ (8000dfc <usart_transmit+0x58>)
 8000dce:	2201      	movs	r2, #1
 8000dd0:	0018      	movs	r0, r3
 8000dd2:	f7ff fbc0 	bl	8000556 <cbfifo_enqueue>
        buf++;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	3301      	adds	r3, #1
 8000dda:	607b      	str	r3, [r7, #4]
        nbyte--;
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	3b01      	subs	r3, #1
 8000de0:	603b      	str	r3, [r7, #0]
    while (nbyte > 0) {
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	dce3      	bgt.n	8000db0 <usart_transmit+0xc>
    }
    MODIFY_FIELD(USART2->CR1, USART_CR1_TXEIE, 1); // Enable TXE interrupt
 8000de8:	4b05      	ldr	r3, [pc, #20]	@ (8000e00 <usart_transmit+0x5c>)
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	4b04      	ldr	r3, [pc, #16]	@ (8000e00 <usart_transmit+0x5c>)
 8000dee:	2180      	movs	r1, #128	@ 0x80
 8000df0:	430a      	orrs	r2, r1
 8000df2:	601a      	str	r2, [r3, #0]
}
 8000df4:	46c0      	nop			@ (mov r8, r8)
 8000df6:	46bd      	mov	sp, r7
 8000df8:	b003      	add	sp, #12
 8000dfa:	bd90      	pop	{r4, r7, pc}
 8000dfc:	20001114 	.word	0x20001114
 8000e00:	40004400 	.word	0x40004400

08000e04 <usart_receive_blocking>:

void usart_receive_blocking(char *buf, int num_chars) {
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
 8000e0c:	6039      	str	r1, [r7, #0]
    // This function gets num_chars, blocking if they aren't all ready yet
    while (num_chars > 0) {
 8000e0e:	e012      	b.n	8000e36 <usart_receive_blocking+0x32>
        while (cbfifo_length(&rx_cb) == 0) // Block until some data is received
 8000e10:	46c0      	nop			@ (mov r8, r8)
 8000e12:	4b0d      	ldr	r3, [pc, #52]	@ (8000e48 <usart_receive_blocking+0x44>)
 8000e14:	0018      	movs	r0, r3
 8000e16:	f7ff fc39 	bl	800068c <cbfifo_length>
 8000e1a:	1e03      	subs	r3, r0, #0
 8000e1c:	d0f9      	beq.n	8000e12 <usart_receive_blocking+0xe>
            ;
        cbfifo_dequeue(&rx_cb, buf, 1);
 8000e1e:	6879      	ldr	r1, [r7, #4]
 8000e20:	4b09      	ldr	r3, [pc, #36]	@ (8000e48 <usart_receive_blocking+0x44>)
 8000e22:	2201      	movs	r2, #1
 8000e24:	0018      	movs	r0, r3
 8000e26:	f7ff fbe9 	bl	80005fc <cbfifo_dequeue>
        num_chars--; // Got another character
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	3b01      	subs	r3, #1
 8000e2e:	603b      	str	r3, [r7, #0]
        buf++;       // Advance buffer pointer to space for next character
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	3301      	adds	r3, #1
 8000e34:	607b      	str	r3, [r7, #4]
    while (num_chars > 0) {
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	dce9      	bgt.n	8000e10 <usart_receive_blocking+0xc>
    }
}
 8000e3c:	46c0      	nop			@ (mov r8, r8)
 8000e3e:	46c0      	nop			@ (mov r8, r8)
 8000e40:	46bd      	mov	sp, r7
 8000e42:	b002      	add	sp, #8
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	46c0      	nop			@ (mov r8, r8)
 8000e48:	2000108c 	.word	0x2000108c

08000e4c <__io_putchar>:
    while ((USART2->ISR & USART_ISR_RXNE) == 0)
        ;
    return USART2->RDR;
}

int __io_putchar(int ch) {
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
    char buf = (char)ch;  // Convert int to char for transmission
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	b2da      	uxtb	r2, r3
 8000e58:	210f      	movs	r1, #15
 8000e5a:	187b      	adds	r3, r7, r1
 8000e5c:	701a      	strb	r2, [r3, #0]
    usart_transmit(&buf, 1);  // Send one character
 8000e5e:	187b      	adds	r3, r7, r1
 8000e60:	2101      	movs	r1, #1
 8000e62:	0018      	movs	r0, r3
 8000e64:	f7ff ff9e 	bl	8000da4 <usart_transmit>
    return 1;  // Indicate success
 8000e68:	2301      	movs	r3, #1
}
 8000e6a:	0018      	movs	r0, r3
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	b004      	add	sp, #16
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <__io_getchar>:

int __io_getchar(void) {
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b082      	sub	sp, #8
 8000e76:	af00      	add	r7, sp, #0
    char buf;
    usart_receive_blocking(&buf, 1);  // Receive one character in blocking mode
 8000e78:	1dfb      	adds	r3, r7, #7
 8000e7a:	2101      	movs	r1, #1
 8000e7c:	0018      	movs	r0, r3
 8000e7e:	f7ff ffc1 	bl	8000e04 <usart_receive_blocking>
    return (int)buf;  // Return the received character
 8000e82:	1dfb      	adds	r3, r7, #7
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	0018      	movs	r0, r3
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	b002      	add	sp, #8
 8000e8c:	bd80      	pop	{r7, pc}
	...

08000e90 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e90:	480e      	ldr	r0, [pc, #56]	@ (8000ecc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e92:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e94:	f000 f866 	bl	8000f64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e98:	480d      	ldr	r0, [pc, #52]	@ (8000ed0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e9a:	490e      	ldr	r1, [pc, #56]	@ (8000ed4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e9c:	4a0e      	ldr	r2, [pc, #56]	@ (8000ed8 <LoopForever+0xe>)
  movs r3, #0
 8000e9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ea0:	e002      	b.n	8000ea8 <LoopCopyDataInit>

08000ea2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ea2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ea4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ea6:	3304      	adds	r3, #4

08000ea8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ea8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eac:	d3f9      	bcc.n	8000ea2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eae:	4a0b      	ldr	r2, [pc, #44]	@ (8000edc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000eb0:	4c0b      	ldr	r4, [pc, #44]	@ (8000ee0 <LoopForever+0x16>)
  movs r3, #0
 8000eb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eb4:	e001      	b.n	8000eba <LoopFillZerobss>

08000eb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eb8:	3204      	adds	r2, #4

08000eba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ebc:	d3fb      	bcc.n	8000eb6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ebe:	f000 fc63 	bl	8001788 <__libc_init_array>
/* LP - Update system core clocks */
  bl SystemCoreClockUpdate
 8000ec2:	f000 f895 	bl	8000ff0 <SystemCoreClockUpdate>
/* Call the application's entry point.*/
  bl main
 8000ec6:	f7ff fced 	bl	80008a4 <main>

08000eca <LoopForever>:

LoopForever:
  b LoopForever
 8000eca:	e7fe      	b.n	8000eca <LoopForever>
  ldr   r0, =_estack
 8000ecc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000ed0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ed4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000ed8:	080022ac 	.word	0x080022ac
  ldr r2, =_sbss
 8000edc:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000ee0:	200012e8 	.word	0x200012e8

08000ee4 <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ee4:	e7fe      	b.n	8000ee4 <ADC_COMP_IRQHandler>
	...

08000ee8 <Set_Clocks_To_48MHz>:
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	4b1a      	ldr	r3, [pc, #104]	@ (8000f58 <Set_Clocks_To_48MHz+0x70>)
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	4b19      	ldr	r3, [pc, #100]	@ (8000f58 <Set_Clocks_To_48MHz+0x70>)
 8000ef2:	2101      	movs	r1, #1
 8000ef4:	430a      	orrs	r2, r1
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	4b18      	ldr	r3, [pc, #96]	@ (8000f5c <Set_Clocks_To_48MHz+0x74>)
 8000efa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000efc:	4b17      	ldr	r3, [pc, #92]	@ (8000f5c <Set_Clocks_To_48MHz+0x74>)
 8000efe:	2180      	movs	r1, #128	@ 0x80
 8000f00:	0249      	lsls	r1, r1, #9
 8000f02:	430a      	orrs	r2, r1
 8000f04:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f06:	46c0      	nop			@ (mov r8, r8)
 8000f08:	4b14      	ldr	r3, [pc, #80]	@ (8000f5c <Set_Clocks_To_48MHz+0x74>)
 8000f0a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f0c:	2380      	movs	r3, #128	@ 0x80
 8000f0e:	029b      	lsls	r3, r3, #10
 8000f10:	4013      	ands	r3, r2
 8000f12:	d0f9      	beq.n	8000f08 <Set_Clocks_To_48MHz+0x20>
 8000f14:	4b11      	ldr	r3, [pc, #68]	@ (8000f5c <Set_Clocks_To_48MHz+0x74>)
 8000f16:	685a      	ldr	r2, [r3, #4]
 8000f18:	4b10      	ldr	r3, [pc, #64]	@ (8000f5c <Set_Clocks_To_48MHz+0x74>)
 8000f1a:	21f0      	movs	r1, #240	@ 0xf0
 8000f1c:	438a      	bics	r2, r1
 8000f1e:	605a      	str	r2, [r3, #4]
 8000f20:	4b0e      	ldr	r3, [pc, #56]	@ (8000f5c <Set_Clocks_To_48MHz+0x74>)
 8000f22:	685a      	ldr	r2, [r3, #4]
 8000f24:	4b0d      	ldr	r3, [pc, #52]	@ (8000f5c <Set_Clocks_To_48MHz+0x74>)
 8000f26:	2103      	movs	r1, #3
 8000f28:	430a      	orrs	r2, r1
 8000f2a:	605a      	str	r2, [r3, #4]
 8000f2c:	46c0      	nop			@ (mov r8, r8)
 8000f2e:	4b0b      	ldr	r3, [pc, #44]	@ (8000f5c <Set_Clocks_To_48MHz+0x74>)
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	089a      	lsrs	r2, r3, #2
 8000f34:	4b09      	ldr	r3, [pc, #36]	@ (8000f5c <Set_Clocks_To_48MHz+0x74>)
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	4053      	eors	r3, r2
 8000f3a:	2203      	movs	r2, #3
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	d1f6      	bne.n	8000f2e <Set_Clocks_To_48MHz+0x46>
 8000f40:	4b06      	ldr	r3, [pc, #24]	@ (8000f5c <Set_Clocks_To_48MHz+0x74>)
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	4a06      	ldr	r2, [pc, #24]	@ (8000f60 <Set_Clocks_To_48MHz+0x78>)
 8000f46:	401a      	ands	r2, r3
 8000f48:	4b04      	ldr	r3, [pc, #16]	@ (8000f5c <Set_Clocks_To_48MHz+0x74>)
 8000f4a:	2180      	movs	r1, #128	@ 0x80
 8000f4c:	00c9      	lsls	r1, r1, #3
 8000f4e:	430a      	orrs	r2, r1
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	46c0      	nop			@ (mov r8, r8)
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	40022000 	.word	0x40022000
 8000f5c:	40021000 	.word	0x40021000
 8000f60:	fffff8ff 	.word	0xfffff8ff

08000f64 <SystemInit>:
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	4b1b      	ldr	r3, [pc, #108]	@ (8000fd8 <SystemInit+0x74>)
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	4b1a      	ldr	r3, [pc, #104]	@ (8000fd8 <SystemInit+0x74>)
 8000f6e:	2101      	movs	r1, #1
 8000f70:	430a      	orrs	r2, r1
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	4b18      	ldr	r3, [pc, #96]	@ (8000fd8 <SystemInit+0x74>)
 8000f76:	685a      	ldr	r2, [r3, #4]
 8000f78:	4b17      	ldr	r3, [pc, #92]	@ (8000fd8 <SystemInit+0x74>)
 8000f7a:	4918      	ldr	r1, [pc, #96]	@ (8000fdc <SystemInit+0x78>)
 8000f7c:	400a      	ands	r2, r1
 8000f7e:	605a      	str	r2, [r3, #4]
 8000f80:	4b15      	ldr	r3, [pc, #84]	@ (8000fd8 <SystemInit+0x74>)
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	4b14      	ldr	r3, [pc, #80]	@ (8000fd8 <SystemInit+0x74>)
 8000f86:	4916      	ldr	r1, [pc, #88]	@ (8000fe0 <SystemInit+0x7c>)
 8000f88:	400a      	ands	r2, r1
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	4b12      	ldr	r3, [pc, #72]	@ (8000fd8 <SystemInit+0x74>)
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	4b11      	ldr	r3, [pc, #68]	@ (8000fd8 <SystemInit+0x74>)
 8000f92:	4914      	ldr	r1, [pc, #80]	@ (8000fe4 <SystemInit+0x80>)
 8000f94:	400a      	ands	r2, r1
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	4b0f      	ldr	r3, [pc, #60]	@ (8000fd8 <SystemInit+0x74>)
 8000f9a:	685a      	ldr	r2, [r3, #4]
 8000f9c:	4b0e      	ldr	r3, [pc, #56]	@ (8000fd8 <SystemInit+0x74>)
 8000f9e:	4912      	ldr	r1, [pc, #72]	@ (8000fe8 <SystemInit+0x84>)
 8000fa0:	400a      	ands	r2, r1
 8000fa2:	605a      	str	r2, [r3, #4]
 8000fa4:	4b0c      	ldr	r3, [pc, #48]	@ (8000fd8 <SystemInit+0x74>)
 8000fa6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000fa8:	4b0b      	ldr	r3, [pc, #44]	@ (8000fd8 <SystemInit+0x74>)
 8000faa:	210f      	movs	r1, #15
 8000fac:	438a      	bics	r2, r1
 8000fae:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000fb0:	4b09      	ldr	r3, [pc, #36]	@ (8000fd8 <SystemInit+0x74>)
 8000fb2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000fb4:	4b08      	ldr	r3, [pc, #32]	@ (8000fd8 <SystemInit+0x74>)
 8000fb6:	490d      	ldr	r1, [pc, #52]	@ (8000fec <SystemInit+0x88>)
 8000fb8:	400a      	ands	r2, r1
 8000fba:	631a      	str	r2, [r3, #48]	@ 0x30
 8000fbc:	4b06      	ldr	r3, [pc, #24]	@ (8000fd8 <SystemInit+0x74>)
 8000fbe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000fc0:	4b05      	ldr	r3, [pc, #20]	@ (8000fd8 <SystemInit+0x74>)
 8000fc2:	2101      	movs	r1, #1
 8000fc4:	438a      	bics	r2, r1
 8000fc6:	635a      	str	r2, [r3, #52]	@ 0x34
 8000fc8:	4b03      	ldr	r3, [pc, #12]	@ (8000fd8 <SystemInit+0x74>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	609a      	str	r2, [r3, #8]
 8000fce:	f7ff ff8b 	bl	8000ee8 <Set_Clocks_To_48MHz>
 8000fd2:	46c0      	nop			@ (mov r8, r8)
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	40021000 	.word	0x40021000
 8000fdc:	08ffb80c 	.word	0x08ffb80c
 8000fe0:	fef6ffff 	.word	0xfef6ffff
 8000fe4:	fffbffff 	.word	0xfffbffff
 8000fe8:	ffc0ffff 	.word	0xffc0ffff
 8000fec:	fff0feac 	.word	0xfff0feac

08000ff0 <SystemCoreClockUpdate>:
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60fb      	str	r3, [r7, #12]
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60bb      	str	r3, [r7, #8]
 8000ffe:	2300      	movs	r3, #0
 8001000:	607b      	str	r3, [r7, #4]
 8001002:	2300      	movs	r3, #0
 8001004:	603b      	str	r3, [r7, #0]
 8001006:	4b3d      	ldr	r3, [pc, #244]	@ (80010fc <SystemCoreClockUpdate+0x10c>)
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	220c      	movs	r2, #12
 800100c:	4013      	ands	r3, r2
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	2b0c      	cmp	r3, #12
 8001014:	d00f      	beq.n	8001036 <SystemCoreClockUpdate+0x46>
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	2b0c      	cmp	r3, #12
 800101a:	d859      	bhi.n	80010d0 <SystemCoreClockUpdate+0xe0>
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	2b08      	cmp	r3, #8
 8001020:	d015      	beq.n	800104e <SystemCoreClockUpdate+0x5e>
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	2b08      	cmp	r3, #8
 8001026:	d853      	bhi.n	80010d0 <SystemCoreClockUpdate+0xe0>
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d007      	beq.n	800103e <SystemCoreClockUpdate+0x4e>
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	2b04      	cmp	r3, #4
 8001032:	d008      	beq.n	8001046 <SystemCoreClockUpdate+0x56>
 8001034:	e04c      	b.n	80010d0 <SystemCoreClockUpdate+0xe0>
 8001036:	4b32      	ldr	r3, [pc, #200]	@ (8001100 <SystemCoreClockUpdate+0x110>)
 8001038:	4a32      	ldr	r2, [pc, #200]	@ (8001104 <SystemCoreClockUpdate+0x114>)
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	e04c      	b.n	80010d8 <SystemCoreClockUpdate+0xe8>
 800103e:	4b30      	ldr	r3, [pc, #192]	@ (8001100 <SystemCoreClockUpdate+0x110>)
 8001040:	4a31      	ldr	r2, [pc, #196]	@ (8001108 <SystemCoreClockUpdate+0x118>)
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	e048      	b.n	80010d8 <SystemCoreClockUpdate+0xe8>
 8001046:	4b2e      	ldr	r3, [pc, #184]	@ (8001100 <SystemCoreClockUpdate+0x110>)
 8001048:	4a2f      	ldr	r2, [pc, #188]	@ (8001108 <SystemCoreClockUpdate+0x118>)
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	e044      	b.n	80010d8 <SystemCoreClockUpdate+0xe8>
 800104e:	4b2b      	ldr	r3, [pc, #172]	@ (80010fc <SystemCoreClockUpdate+0x10c>)
 8001050:	685a      	ldr	r2, [r3, #4]
 8001052:	23f0      	movs	r3, #240	@ 0xf0
 8001054:	039b      	lsls	r3, r3, #14
 8001056:	4013      	ands	r3, r2
 8001058:	60bb      	str	r3, [r7, #8]
 800105a:	4b28      	ldr	r3, [pc, #160]	@ (80010fc <SystemCoreClockUpdate+0x10c>)
 800105c:	685a      	ldr	r2, [r3, #4]
 800105e:	23c0      	movs	r3, #192	@ 0xc0
 8001060:	025b      	lsls	r3, r3, #9
 8001062:	4013      	ands	r3, r2
 8001064:	607b      	str	r3, [r7, #4]
 8001066:	68bb      	ldr	r3, [r7, #8]
 8001068:	0c9b      	lsrs	r3, r3, #18
 800106a:	3302      	adds	r3, #2
 800106c:	60bb      	str	r3, [r7, #8]
 800106e:	4b23      	ldr	r3, [pc, #140]	@ (80010fc <SystemCoreClockUpdate+0x10c>)
 8001070:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001072:	220f      	movs	r2, #15
 8001074:	4013      	ands	r3, r2
 8001076:	3301      	adds	r3, #1
 8001078:	603b      	str	r3, [r7, #0]
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	2380      	movs	r3, #128	@ 0x80
 800107e:	025b      	lsls	r3, r3, #9
 8001080:	429a      	cmp	r2, r3
 8001082:	d10a      	bne.n	800109a <SystemCoreClockUpdate+0xaa>
 8001084:	6839      	ldr	r1, [r7, #0]
 8001086:	4820      	ldr	r0, [pc, #128]	@ (8001108 <SystemCoreClockUpdate+0x118>)
 8001088:	f7ff f848 	bl	800011c <__udivsi3>
 800108c:	0003      	movs	r3, r0
 800108e:	001a      	movs	r2, r3
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	435a      	muls	r2, r3
 8001094:	4b1a      	ldr	r3, [pc, #104]	@ (8001100 <SystemCoreClockUpdate+0x110>)
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	e01e      	b.n	80010d8 <SystemCoreClockUpdate+0xe8>
 800109a:	687a      	ldr	r2, [r7, #4]
 800109c:	23c0      	movs	r3, #192	@ 0xc0
 800109e:	025b      	lsls	r3, r3, #9
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d10a      	bne.n	80010ba <SystemCoreClockUpdate+0xca>
 80010a4:	6839      	ldr	r1, [r7, #0]
 80010a6:	4817      	ldr	r0, [pc, #92]	@ (8001104 <SystemCoreClockUpdate+0x114>)
 80010a8:	f7ff f838 	bl	800011c <__udivsi3>
 80010ac:	0003      	movs	r3, r0
 80010ae:	001a      	movs	r2, r3
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	435a      	muls	r2, r3
 80010b4:	4b12      	ldr	r3, [pc, #72]	@ (8001100 <SystemCoreClockUpdate+0x110>)
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	e00e      	b.n	80010d8 <SystemCoreClockUpdate+0xe8>
 80010ba:	6839      	ldr	r1, [r7, #0]
 80010bc:	4812      	ldr	r0, [pc, #72]	@ (8001108 <SystemCoreClockUpdate+0x118>)
 80010be:	f7ff f82d 	bl	800011c <__udivsi3>
 80010c2:	0003      	movs	r3, r0
 80010c4:	001a      	movs	r2, r3
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	435a      	muls	r2, r3
 80010ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001100 <SystemCoreClockUpdate+0x110>)
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	e003      	b.n	80010d8 <SystemCoreClockUpdate+0xe8>
 80010d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001100 <SystemCoreClockUpdate+0x110>)
 80010d2:	4a0d      	ldr	r2, [pc, #52]	@ (8001108 <SystemCoreClockUpdate+0x118>)
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	46c0      	nop			@ (mov r8, r8)
 80010d8:	4b08      	ldr	r3, [pc, #32]	@ (80010fc <SystemCoreClockUpdate+0x10c>)
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	091b      	lsrs	r3, r3, #4
 80010de:	220f      	movs	r2, #15
 80010e0:	4013      	ands	r3, r2
 80010e2:	4a0a      	ldr	r2, [pc, #40]	@ (800110c <SystemCoreClockUpdate+0x11c>)
 80010e4:	5cd3      	ldrb	r3, [r2, r3]
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	4b05      	ldr	r3, [pc, #20]	@ (8001100 <SystemCoreClockUpdate+0x110>)
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	40da      	lsrs	r2, r3
 80010f0:	4b03      	ldr	r3, [pc, #12]	@ (8001100 <SystemCoreClockUpdate+0x110>)
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	46c0      	nop			@ (mov r8, r8)
 80010f6:	46bd      	mov	sp, r7
 80010f8:	b004      	add	sp, #16
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	40021000 	.word	0x40021000
 8001100:	20000000 	.word	0x20000000
 8001104:	02dc6c00 	.word	0x02dc6c00
 8001108:	007a1200 	.word	0x007a1200
 800110c:	08002260 	.word	0x08002260

08001110 <std>:
 8001110:	2300      	movs	r3, #0
 8001112:	b510      	push	{r4, lr}
 8001114:	0004      	movs	r4, r0
 8001116:	6003      	str	r3, [r0, #0]
 8001118:	6043      	str	r3, [r0, #4]
 800111a:	6083      	str	r3, [r0, #8]
 800111c:	8181      	strh	r1, [r0, #12]
 800111e:	6643      	str	r3, [r0, #100]	@ 0x64
 8001120:	81c2      	strh	r2, [r0, #14]
 8001122:	6103      	str	r3, [r0, #16]
 8001124:	6143      	str	r3, [r0, #20]
 8001126:	6183      	str	r3, [r0, #24]
 8001128:	0019      	movs	r1, r3
 800112a:	2208      	movs	r2, #8
 800112c:	305c      	adds	r0, #92	@ 0x5c
 800112e:	f000 facf 	bl	80016d0 <memset>
 8001132:	4b0b      	ldr	r3, [pc, #44]	@ (8001160 <std+0x50>)
 8001134:	6224      	str	r4, [r4, #32]
 8001136:	6263      	str	r3, [r4, #36]	@ 0x24
 8001138:	4b0a      	ldr	r3, [pc, #40]	@ (8001164 <std+0x54>)
 800113a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800113c:	4b0a      	ldr	r3, [pc, #40]	@ (8001168 <std+0x58>)
 800113e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001140:	4b0a      	ldr	r3, [pc, #40]	@ (800116c <std+0x5c>)
 8001142:	6323      	str	r3, [r4, #48]	@ 0x30
 8001144:	4b0a      	ldr	r3, [pc, #40]	@ (8001170 <std+0x60>)
 8001146:	429c      	cmp	r4, r3
 8001148:	d005      	beq.n	8001156 <std+0x46>
 800114a:	4b0a      	ldr	r3, [pc, #40]	@ (8001174 <std+0x64>)
 800114c:	429c      	cmp	r4, r3
 800114e:	d002      	beq.n	8001156 <std+0x46>
 8001150:	4b09      	ldr	r3, [pc, #36]	@ (8001178 <std+0x68>)
 8001152:	429c      	cmp	r4, r3
 8001154:	d103      	bne.n	800115e <std+0x4e>
 8001156:	0020      	movs	r0, r4
 8001158:	3058      	adds	r0, #88	@ 0x58
 800115a:	f000 fb39 	bl	80017d0 <__retarget_lock_init_recursive>
 800115e:	bd10      	pop	{r4, pc}
 8001160:	080014f9 	.word	0x080014f9
 8001164:	08001521 	.word	0x08001521
 8001168:	08001559 	.word	0x08001559
 800116c:	08001585 	.word	0x08001585
 8001170:	2000119c 	.word	0x2000119c
 8001174:	20001204 	.word	0x20001204
 8001178:	2000126c 	.word	0x2000126c

0800117c <stdio_exit_handler>:
 800117c:	b510      	push	{r4, lr}
 800117e:	4a03      	ldr	r2, [pc, #12]	@ (800118c <stdio_exit_handler+0x10>)
 8001180:	4903      	ldr	r1, [pc, #12]	@ (8001190 <stdio_exit_handler+0x14>)
 8001182:	4804      	ldr	r0, [pc, #16]	@ (8001194 <stdio_exit_handler+0x18>)
 8001184:	f000 f86c 	bl	8001260 <_fwalk_sglue>
 8001188:	bd10      	pop	{r4, pc}
 800118a:	46c0      	nop			@ (mov r8, r8)
 800118c:	20000004 	.word	0x20000004
 8001190:	08002075 	.word	0x08002075
 8001194:	20000014 	.word	0x20000014

08001198 <cleanup_stdio>:
 8001198:	6841      	ldr	r1, [r0, #4]
 800119a:	4b0b      	ldr	r3, [pc, #44]	@ (80011c8 <cleanup_stdio+0x30>)
 800119c:	b510      	push	{r4, lr}
 800119e:	0004      	movs	r4, r0
 80011a0:	4299      	cmp	r1, r3
 80011a2:	d001      	beq.n	80011a8 <cleanup_stdio+0x10>
 80011a4:	f000 ff66 	bl	8002074 <_fflush_r>
 80011a8:	68a1      	ldr	r1, [r4, #8]
 80011aa:	4b08      	ldr	r3, [pc, #32]	@ (80011cc <cleanup_stdio+0x34>)
 80011ac:	4299      	cmp	r1, r3
 80011ae:	d002      	beq.n	80011b6 <cleanup_stdio+0x1e>
 80011b0:	0020      	movs	r0, r4
 80011b2:	f000 ff5f 	bl	8002074 <_fflush_r>
 80011b6:	68e1      	ldr	r1, [r4, #12]
 80011b8:	4b05      	ldr	r3, [pc, #20]	@ (80011d0 <cleanup_stdio+0x38>)
 80011ba:	4299      	cmp	r1, r3
 80011bc:	d002      	beq.n	80011c4 <cleanup_stdio+0x2c>
 80011be:	0020      	movs	r0, r4
 80011c0:	f000 ff58 	bl	8002074 <_fflush_r>
 80011c4:	bd10      	pop	{r4, pc}
 80011c6:	46c0      	nop			@ (mov r8, r8)
 80011c8:	2000119c 	.word	0x2000119c
 80011cc:	20001204 	.word	0x20001204
 80011d0:	2000126c 	.word	0x2000126c

080011d4 <global_stdio_init.part.0>:
 80011d4:	b510      	push	{r4, lr}
 80011d6:	4b09      	ldr	r3, [pc, #36]	@ (80011fc <global_stdio_init.part.0+0x28>)
 80011d8:	4a09      	ldr	r2, [pc, #36]	@ (8001200 <global_stdio_init.part.0+0x2c>)
 80011da:	2104      	movs	r1, #4
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	4809      	ldr	r0, [pc, #36]	@ (8001204 <global_stdio_init.part.0+0x30>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	f7ff ff95 	bl	8001110 <std>
 80011e6:	2201      	movs	r2, #1
 80011e8:	2109      	movs	r1, #9
 80011ea:	4807      	ldr	r0, [pc, #28]	@ (8001208 <global_stdio_init.part.0+0x34>)
 80011ec:	f7ff ff90 	bl	8001110 <std>
 80011f0:	2202      	movs	r2, #2
 80011f2:	2112      	movs	r1, #18
 80011f4:	4805      	ldr	r0, [pc, #20]	@ (800120c <global_stdio_init.part.0+0x38>)
 80011f6:	f7ff ff8b 	bl	8001110 <std>
 80011fa:	bd10      	pop	{r4, pc}
 80011fc:	200012d4 	.word	0x200012d4
 8001200:	0800117d 	.word	0x0800117d
 8001204:	2000119c 	.word	0x2000119c
 8001208:	20001204 	.word	0x20001204
 800120c:	2000126c 	.word	0x2000126c

08001210 <__sfp_lock_acquire>:
 8001210:	b510      	push	{r4, lr}
 8001212:	4802      	ldr	r0, [pc, #8]	@ (800121c <__sfp_lock_acquire+0xc>)
 8001214:	f000 fadd 	bl	80017d2 <__retarget_lock_acquire_recursive>
 8001218:	bd10      	pop	{r4, pc}
 800121a:	46c0      	nop			@ (mov r8, r8)
 800121c:	200012dd 	.word	0x200012dd

08001220 <__sfp_lock_release>:
 8001220:	b510      	push	{r4, lr}
 8001222:	4802      	ldr	r0, [pc, #8]	@ (800122c <__sfp_lock_release+0xc>)
 8001224:	f000 fad6 	bl	80017d4 <__retarget_lock_release_recursive>
 8001228:	bd10      	pop	{r4, pc}
 800122a:	46c0      	nop			@ (mov r8, r8)
 800122c:	200012dd 	.word	0x200012dd

08001230 <__sinit>:
 8001230:	b510      	push	{r4, lr}
 8001232:	0004      	movs	r4, r0
 8001234:	f7ff ffec 	bl	8001210 <__sfp_lock_acquire>
 8001238:	6a23      	ldr	r3, [r4, #32]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d002      	beq.n	8001244 <__sinit+0x14>
 800123e:	f7ff ffef 	bl	8001220 <__sfp_lock_release>
 8001242:	bd10      	pop	{r4, pc}
 8001244:	4b04      	ldr	r3, [pc, #16]	@ (8001258 <__sinit+0x28>)
 8001246:	6223      	str	r3, [r4, #32]
 8001248:	4b04      	ldr	r3, [pc, #16]	@ (800125c <__sinit+0x2c>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d1f6      	bne.n	800123e <__sinit+0xe>
 8001250:	f7ff ffc0 	bl	80011d4 <global_stdio_init.part.0>
 8001254:	e7f3      	b.n	800123e <__sinit+0xe>
 8001256:	46c0      	nop			@ (mov r8, r8)
 8001258:	08001199 	.word	0x08001199
 800125c:	200012d4 	.word	0x200012d4

08001260 <_fwalk_sglue>:
 8001260:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001262:	0014      	movs	r4, r2
 8001264:	2600      	movs	r6, #0
 8001266:	9000      	str	r0, [sp, #0]
 8001268:	9101      	str	r1, [sp, #4]
 800126a:	68a5      	ldr	r5, [r4, #8]
 800126c:	6867      	ldr	r7, [r4, #4]
 800126e:	3f01      	subs	r7, #1
 8001270:	d504      	bpl.n	800127c <_fwalk_sglue+0x1c>
 8001272:	6824      	ldr	r4, [r4, #0]
 8001274:	2c00      	cmp	r4, #0
 8001276:	d1f8      	bne.n	800126a <_fwalk_sglue+0xa>
 8001278:	0030      	movs	r0, r6
 800127a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800127c:	89ab      	ldrh	r3, [r5, #12]
 800127e:	2b01      	cmp	r3, #1
 8001280:	d908      	bls.n	8001294 <_fwalk_sglue+0x34>
 8001282:	220e      	movs	r2, #14
 8001284:	5eab      	ldrsh	r3, [r5, r2]
 8001286:	3301      	adds	r3, #1
 8001288:	d004      	beq.n	8001294 <_fwalk_sglue+0x34>
 800128a:	0029      	movs	r1, r5
 800128c:	9800      	ldr	r0, [sp, #0]
 800128e:	9b01      	ldr	r3, [sp, #4]
 8001290:	4798      	blx	r3
 8001292:	4306      	orrs	r6, r0
 8001294:	3568      	adds	r5, #104	@ 0x68
 8001296:	e7ea      	b.n	800126e <_fwalk_sglue+0xe>

08001298 <iprintf>:
 8001298:	b40f      	push	{r0, r1, r2, r3}
 800129a:	b507      	push	{r0, r1, r2, lr}
 800129c:	4905      	ldr	r1, [pc, #20]	@ (80012b4 <iprintf+0x1c>)
 800129e:	ab04      	add	r3, sp, #16
 80012a0:	6808      	ldr	r0, [r1, #0]
 80012a2:	cb04      	ldmia	r3!, {r2}
 80012a4:	6881      	ldr	r1, [r0, #8]
 80012a6:	9301      	str	r3, [sp, #4]
 80012a8:	f000 fbc4 	bl	8001a34 <_vfiprintf_r>
 80012ac:	b003      	add	sp, #12
 80012ae:	bc08      	pop	{r3}
 80012b0:	b004      	add	sp, #16
 80012b2:	4718      	bx	r3
 80012b4:	20000010 	.word	0x20000010

080012b8 <_puts_r>:
 80012b8:	6a03      	ldr	r3, [r0, #32]
 80012ba:	b570      	push	{r4, r5, r6, lr}
 80012bc:	0005      	movs	r5, r0
 80012be:	000e      	movs	r6, r1
 80012c0:	6884      	ldr	r4, [r0, #8]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d101      	bne.n	80012ca <_puts_r+0x12>
 80012c6:	f7ff ffb3 	bl	8001230 <__sinit>
 80012ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80012cc:	07db      	lsls	r3, r3, #31
 80012ce:	d405      	bmi.n	80012dc <_puts_r+0x24>
 80012d0:	89a3      	ldrh	r3, [r4, #12]
 80012d2:	059b      	lsls	r3, r3, #22
 80012d4:	d402      	bmi.n	80012dc <_puts_r+0x24>
 80012d6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80012d8:	f000 fa7b 	bl	80017d2 <__retarget_lock_acquire_recursive>
 80012dc:	89a3      	ldrh	r3, [r4, #12]
 80012de:	071b      	lsls	r3, r3, #28
 80012e0:	d502      	bpl.n	80012e8 <_puts_r+0x30>
 80012e2:	6923      	ldr	r3, [r4, #16]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d11f      	bne.n	8001328 <_puts_r+0x70>
 80012e8:	0021      	movs	r1, r4
 80012ea:	0028      	movs	r0, r5
 80012ec:	f000 f992 	bl	8001614 <__swsetup_r>
 80012f0:	2800      	cmp	r0, #0
 80012f2:	d019      	beq.n	8001328 <_puts_r+0x70>
 80012f4:	2501      	movs	r5, #1
 80012f6:	426d      	negs	r5, r5
 80012f8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80012fa:	07db      	lsls	r3, r3, #31
 80012fc:	d405      	bmi.n	800130a <_puts_r+0x52>
 80012fe:	89a3      	ldrh	r3, [r4, #12]
 8001300:	059b      	lsls	r3, r3, #22
 8001302:	d402      	bmi.n	800130a <_puts_r+0x52>
 8001304:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001306:	f000 fa65 	bl	80017d4 <__retarget_lock_release_recursive>
 800130a:	0028      	movs	r0, r5
 800130c:	bd70      	pop	{r4, r5, r6, pc}
 800130e:	3601      	adds	r6, #1
 8001310:	60a3      	str	r3, [r4, #8]
 8001312:	2b00      	cmp	r3, #0
 8001314:	da04      	bge.n	8001320 <_puts_r+0x68>
 8001316:	69a2      	ldr	r2, [r4, #24]
 8001318:	429a      	cmp	r2, r3
 800131a:	dc16      	bgt.n	800134a <_puts_r+0x92>
 800131c:	290a      	cmp	r1, #10
 800131e:	d014      	beq.n	800134a <_puts_r+0x92>
 8001320:	6823      	ldr	r3, [r4, #0]
 8001322:	1c5a      	adds	r2, r3, #1
 8001324:	6022      	str	r2, [r4, #0]
 8001326:	7019      	strb	r1, [r3, #0]
 8001328:	68a3      	ldr	r3, [r4, #8]
 800132a:	7831      	ldrb	r1, [r6, #0]
 800132c:	3b01      	subs	r3, #1
 800132e:	2900      	cmp	r1, #0
 8001330:	d1ed      	bne.n	800130e <_puts_r+0x56>
 8001332:	60a3      	str	r3, [r4, #8]
 8001334:	2b00      	cmp	r3, #0
 8001336:	da0f      	bge.n	8001358 <_puts_r+0xa0>
 8001338:	0022      	movs	r2, r4
 800133a:	0028      	movs	r0, r5
 800133c:	310a      	adds	r1, #10
 800133e:	f000 f927 	bl	8001590 <__swbuf_r>
 8001342:	3001      	adds	r0, #1
 8001344:	d0d6      	beq.n	80012f4 <_puts_r+0x3c>
 8001346:	250a      	movs	r5, #10
 8001348:	e7d6      	b.n	80012f8 <_puts_r+0x40>
 800134a:	0022      	movs	r2, r4
 800134c:	0028      	movs	r0, r5
 800134e:	f000 f91f 	bl	8001590 <__swbuf_r>
 8001352:	3001      	adds	r0, #1
 8001354:	d1e8      	bne.n	8001328 <_puts_r+0x70>
 8001356:	e7cd      	b.n	80012f4 <_puts_r+0x3c>
 8001358:	6823      	ldr	r3, [r4, #0]
 800135a:	1c5a      	adds	r2, r3, #1
 800135c:	6022      	str	r2, [r4, #0]
 800135e:	220a      	movs	r2, #10
 8001360:	701a      	strb	r2, [r3, #0]
 8001362:	e7f0      	b.n	8001346 <_puts_r+0x8e>

08001364 <puts>:
 8001364:	b510      	push	{r4, lr}
 8001366:	4b03      	ldr	r3, [pc, #12]	@ (8001374 <puts+0x10>)
 8001368:	0001      	movs	r1, r0
 800136a:	6818      	ldr	r0, [r3, #0]
 800136c:	f7ff ffa4 	bl	80012b8 <_puts_r>
 8001370:	bd10      	pop	{r4, pc}
 8001372:	46c0      	nop			@ (mov r8, r8)
 8001374:	20000010 	.word	0x20000010

08001378 <setbuf>:
 8001378:	b510      	push	{r4, lr}
 800137a:	2380      	movs	r3, #128	@ 0x80
 800137c:	424a      	negs	r2, r1
 800137e:	414a      	adcs	r2, r1
 8001380:	00db      	lsls	r3, r3, #3
 8001382:	0052      	lsls	r2, r2, #1
 8001384:	f000 f802 	bl	800138c <setvbuf>
 8001388:	bd10      	pop	{r4, pc}
	...

0800138c <setvbuf>:
 800138c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800138e:	001d      	movs	r5, r3
 8001390:	4b57      	ldr	r3, [pc, #348]	@ (80014f0 <setvbuf+0x164>)
 8001392:	b085      	sub	sp, #20
 8001394:	681e      	ldr	r6, [r3, #0]
 8001396:	0004      	movs	r4, r0
 8001398:	000f      	movs	r7, r1
 800139a:	9200      	str	r2, [sp, #0]
 800139c:	2e00      	cmp	r6, #0
 800139e:	d005      	beq.n	80013ac <setvbuf+0x20>
 80013a0:	6a33      	ldr	r3, [r6, #32]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d102      	bne.n	80013ac <setvbuf+0x20>
 80013a6:	0030      	movs	r0, r6
 80013a8:	f7ff ff42 	bl	8001230 <__sinit>
 80013ac:	9b00      	ldr	r3, [sp, #0]
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d005      	beq.n	80013be <setvbuf+0x32>
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d900      	bls.n	80013b8 <setvbuf+0x2c>
 80013b6:	e097      	b.n	80014e8 <setvbuf+0x15c>
 80013b8:	2d00      	cmp	r5, #0
 80013ba:	da00      	bge.n	80013be <setvbuf+0x32>
 80013bc:	e094      	b.n	80014e8 <setvbuf+0x15c>
 80013be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80013c0:	07db      	lsls	r3, r3, #31
 80013c2:	d405      	bmi.n	80013d0 <setvbuf+0x44>
 80013c4:	89a3      	ldrh	r3, [r4, #12]
 80013c6:	059b      	lsls	r3, r3, #22
 80013c8:	d402      	bmi.n	80013d0 <setvbuf+0x44>
 80013ca:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80013cc:	f000 fa01 	bl	80017d2 <__retarget_lock_acquire_recursive>
 80013d0:	0021      	movs	r1, r4
 80013d2:	0030      	movs	r0, r6
 80013d4:	f000 fe4e 	bl	8002074 <_fflush_r>
 80013d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80013da:	2900      	cmp	r1, #0
 80013dc:	d008      	beq.n	80013f0 <setvbuf+0x64>
 80013de:	0023      	movs	r3, r4
 80013e0:	3344      	adds	r3, #68	@ 0x44
 80013e2:	4299      	cmp	r1, r3
 80013e4:	d002      	beq.n	80013ec <setvbuf+0x60>
 80013e6:	0030      	movs	r0, r6
 80013e8:	f000 f9f6 	bl	80017d8 <_free_r>
 80013ec:	2300      	movs	r3, #0
 80013ee:	6363      	str	r3, [r4, #52]	@ 0x34
 80013f0:	2300      	movs	r3, #0
 80013f2:	61a3      	str	r3, [r4, #24]
 80013f4:	6063      	str	r3, [r4, #4]
 80013f6:	89a3      	ldrh	r3, [r4, #12]
 80013f8:	061b      	lsls	r3, r3, #24
 80013fa:	d503      	bpl.n	8001404 <setvbuf+0x78>
 80013fc:	0030      	movs	r0, r6
 80013fe:	6921      	ldr	r1, [r4, #16]
 8001400:	f000 f9ea 	bl	80017d8 <_free_r>
 8001404:	89a3      	ldrh	r3, [r4, #12]
 8001406:	4a3b      	ldr	r2, [pc, #236]	@ (80014f4 <setvbuf+0x168>)
 8001408:	4013      	ands	r3, r2
 800140a:	81a3      	strh	r3, [r4, #12]
 800140c:	9b00      	ldr	r3, [sp, #0]
 800140e:	2b02      	cmp	r3, #2
 8001410:	d060      	beq.n	80014d4 <setvbuf+0x148>
 8001412:	ab03      	add	r3, sp, #12
 8001414:	0021      	movs	r1, r4
 8001416:	0030      	movs	r0, r6
 8001418:	aa02      	add	r2, sp, #8
 800141a:	f000 fe57 	bl	80020cc <__swhatbuf_r>
 800141e:	89a3      	ldrh	r3, [r4, #12]
 8001420:	4303      	orrs	r3, r0
 8001422:	81a3      	strh	r3, [r4, #12]
 8001424:	2d00      	cmp	r5, #0
 8001426:	d124      	bne.n	8001472 <setvbuf+0xe6>
 8001428:	9d02      	ldr	r5, [sp, #8]
 800142a:	0028      	movs	r0, r5
 800142c:	f000 fa1e 	bl	800186c <malloc>
 8001430:	9501      	str	r5, [sp, #4]
 8001432:	1e07      	subs	r7, r0, #0
 8001434:	d148      	bne.n	80014c8 <setvbuf+0x13c>
 8001436:	9b02      	ldr	r3, [sp, #8]
 8001438:	9301      	str	r3, [sp, #4]
 800143a:	42ab      	cmp	r3, r5
 800143c:	d13f      	bne.n	80014be <setvbuf+0x132>
 800143e:	2501      	movs	r5, #1
 8001440:	426d      	negs	r5, r5
 8001442:	220c      	movs	r2, #12
 8001444:	5ea3      	ldrsh	r3, [r4, r2]
 8001446:	2202      	movs	r2, #2
 8001448:	431a      	orrs	r2, r3
 800144a:	81a2      	strh	r2, [r4, #12]
 800144c:	2200      	movs	r2, #0
 800144e:	60a2      	str	r2, [r4, #8]
 8001450:	0022      	movs	r2, r4
 8001452:	3247      	adds	r2, #71	@ 0x47
 8001454:	6022      	str	r2, [r4, #0]
 8001456:	6122      	str	r2, [r4, #16]
 8001458:	2201      	movs	r2, #1
 800145a:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 800145c:	6162      	str	r2, [r4, #20]
 800145e:	4211      	tst	r1, r2
 8001460:	d104      	bne.n	800146c <setvbuf+0xe0>
 8001462:	059b      	lsls	r3, r3, #22
 8001464:	d402      	bmi.n	800146c <setvbuf+0xe0>
 8001466:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001468:	f000 f9b4 	bl	80017d4 <__retarget_lock_release_recursive>
 800146c:	0028      	movs	r0, r5
 800146e:	b005      	add	sp, #20
 8001470:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001472:	2f00      	cmp	r7, #0
 8001474:	d0d9      	beq.n	800142a <setvbuf+0x9e>
 8001476:	6a33      	ldr	r3, [r6, #32]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d102      	bne.n	8001482 <setvbuf+0xf6>
 800147c:	0030      	movs	r0, r6
 800147e:	f7ff fed7 	bl	8001230 <__sinit>
 8001482:	9b00      	ldr	r3, [sp, #0]
 8001484:	2b01      	cmp	r3, #1
 8001486:	d103      	bne.n	8001490 <setvbuf+0x104>
 8001488:	89a3      	ldrh	r3, [r4, #12]
 800148a:	9a00      	ldr	r2, [sp, #0]
 800148c:	431a      	orrs	r2, r3
 800148e:	81a2      	strh	r2, [r4, #12]
 8001490:	220c      	movs	r2, #12
 8001492:	5ea3      	ldrsh	r3, [r4, r2]
 8001494:	2208      	movs	r2, #8
 8001496:	0019      	movs	r1, r3
 8001498:	6027      	str	r7, [r4, #0]
 800149a:	6127      	str	r7, [r4, #16]
 800149c:	6165      	str	r5, [r4, #20]
 800149e:	4011      	ands	r1, r2
 80014a0:	4213      	tst	r3, r2
 80014a2:	d01b      	beq.n	80014dc <setvbuf+0x150>
 80014a4:	07da      	lsls	r2, r3, #31
 80014a6:	d517      	bpl.n	80014d8 <setvbuf+0x14c>
 80014a8:	2200      	movs	r2, #0
 80014aa:	426d      	negs	r5, r5
 80014ac:	60a2      	str	r2, [r4, #8]
 80014ae:	61a5      	str	r5, [r4, #24]
 80014b0:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80014b2:	07d2      	lsls	r2, r2, #31
 80014b4:	d401      	bmi.n	80014ba <setvbuf+0x12e>
 80014b6:	059b      	lsls	r3, r3, #22
 80014b8:	d512      	bpl.n	80014e0 <setvbuf+0x154>
 80014ba:	2500      	movs	r5, #0
 80014bc:	e7d6      	b.n	800146c <setvbuf+0xe0>
 80014be:	9801      	ldr	r0, [sp, #4]
 80014c0:	f000 f9d4 	bl	800186c <malloc>
 80014c4:	1e07      	subs	r7, r0, #0
 80014c6:	d0ba      	beq.n	800143e <setvbuf+0xb2>
 80014c8:	2380      	movs	r3, #128	@ 0x80
 80014ca:	89a2      	ldrh	r2, [r4, #12]
 80014cc:	9d01      	ldr	r5, [sp, #4]
 80014ce:	4313      	orrs	r3, r2
 80014d0:	81a3      	strh	r3, [r4, #12]
 80014d2:	e7d0      	b.n	8001476 <setvbuf+0xea>
 80014d4:	2500      	movs	r5, #0
 80014d6:	e7b4      	b.n	8001442 <setvbuf+0xb6>
 80014d8:	60a5      	str	r5, [r4, #8]
 80014da:	e7e9      	b.n	80014b0 <setvbuf+0x124>
 80014dc:	60a1      	str	r1, [r4, #8]
 80014de:	e7e7      	b.n	80014b0 <setvbuf+0x124>
 80014e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80014e2:	f000 f977 	bl	80017d4 <__retarget_lock_release_recursive>
 80014e6:	e7e8      	b.n	80014ba <setvbuf+0x12e>
 80014e8:	2501      	movs	r5, #1
 80014ea:	426d      	negs	r5, r5
 80014ec:	e7be      	b.n	800146c <setvbuf+0xe0>
 80014ee:	46c0      	nop			@ (mov r8, r8)
 80014f0:	20000010 	.word	0x20000010
 80014f4:	fffff35c 	.word	0xfffff35c

080014f8 <__sread>:
 80014f8:	b570      	push	{r4, r5, r6, lr}
 80014fa:	000c      	movs	r4, r1
 80014fc:	250e      	movs	r5, #14
 80014fe:	5f49      	ldrsh	r1, [r1, r5]
 8001500:	f000 f914 	bl	800172c <_read_r>
 8001504:	2800      	cmp	r0, #0
 8001506:	db03      	blt.n	8001510 <__sread+0x18>
 8001508:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800150a:	181b      	adds	r3, r3, r0
 800150c:	6563      	str	r3, [r4, #84]	@ 0x54
 800150e:	bd70      	pop	{r4, r5, r6, pc}
 8001510:	89a3      	ldrh	r3, [r4, #12]
 8001512:	4a02      	ldr	r2, [pc, #8]	@ (800151c <__sread+0x24>)
 8001514:	4013      	ands	r3, r2
 8001516:	81a3      	strh	r3, [r4, #12]
 8001518:	e7f9      	b.n	800150e <__sread+0x16>
 800151a:	46c0      	nop			@ (mov r8, r8)
 800151c:	ffffefff 	.word	0xffffefff

08001520 <__swrite>:
 8001520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001522:	001f      	movs	r7, r3
 8001524:	898b      	ldrh	r3, [r1, #12]
 8001526:	0005      	movs	r5, r0
 8001528:	000c      	movs	r4, r1
 800152a:	0016      	movs	r6, r2
 800152c:	05db      	lsls	r3, r3, #23
 800152e:	d505      	bpl.n	800153c <__swrite+0x1c>
 8001530:	230e      	movs	r3, #14
 8001532:	5ec9      	ldrsh	r1, [r1, r3]
 8001534:	2200      	movs	r2, #0
 8001536:	2302      	movs	r3, #2
 8001538:	f000 f8e4 	bl	8001704 <_lseek_r>
 800153c:	89a3      	ldrh	r3, [r4, #12]
 800153e:	4a05      	ldr	r2, [pc, #20]	@ (8001554 <__swrite+0x34>)
 8001540:	0028      	movs	r0, r5
 8001542:	4013      	ands	r3, r2
 8001544:	81a3      	strh	r3, [r4, #12]
 8001546:	0032      	movs	r2, r6
 8001548:	230e      	movs	r3, #14
 800154a:	5ee1      	ldrsh	r1, [r4, r3]
 800154c:	003b      	movs	r3, r7
 800154e:	f000 f901 	bl	8001754 <_write_r>
 8001552:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001554:	ffffefff 	.word	0xffffefff

08001558 <__sseek>:
 8001558:	b570      	push	{r4, r5, r6, lr}
 800155a:	000c      	movs	r4, r1
 800155c:	250e      	movs	r5, #14
 800155e:	5f49      	ldrsh	r1, [r1, r5]
 8001560:	f000 f8d0 	bl	8001704 <_lseek_r>
 8001564:	89a3      	ldrh	r3, [r4, #12]
 8001566:	1c42      	adds	r2, r0, #1
 8001568:	d103      	bne.n	8001572 <__sseek+0x1a>
 800156a:	4a05      	ldr	r2, [pc, #20]	@ (8001580 <__sseek+0x28>)
 800156c:	4013      	ands	r3, r2
 800156e:	81a3      	strh	r3, [r4, #12]
 8001570:	bd70      	pop	{r4, r5, r6, pc}
 8001572:	2280      	movs	r2, #128	@ 0x80
 8001574:	0152      	lsls	r2, r2, #5
 8001576:	4313      	orrs	r3, r2
 8001578:	81a3      	strh	r3, [r4, #12]
 800157a:	6560      	str	r0, [r4, #84]	@ 0x54
 800157c:	e7f8      	b.n	8001570 <__sseek+0x18>
 800157e:	46c0      	nop			@ (mov r8, r8)
 8001580:	ffffefff 	.word	0xffffefff

08001584 <__sclose>:
 8001584:	b510      	push	{r4, lr}
 8001586:	230e      	movs	r3, #14
 8001588:	5ec9      	ldrsh	r1, [r1, r3]
 800158a:	f000 f8a9 	bl	80016e0 <_close_r>
 800158e:	bd10      	pop	{r4, pc}

08001590 <__swbuf_r>:
 8001590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001592:	0006      	movs	r6, r0
 8001594:	000d      	movs	r5, r1
 8001596:	0014      	movs	r4, r2
 8001598:	2800      	cmp	r0, #0
 800159a:	d004      	beq.n	80015a6 <__swbuf_r+0x16>
 800159c:	6a03      	ldr	r3, [r0, #32]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d101      	bne.n	80015a6 <__swbuf_r+0x16>
 80015a2:	f7ff fe45 	bl	8001230 <__sinit>
 80015a6:	69a3      	ldr	r3, [r4, #24]
 80015a8:	60a3      	str	r3, [r4, #8]
 80015aa:	89a3      	ldrh	r3, [r4, #12]
 80015ac:	071b      	lsls	r3, r3, #28
 80015ae:	d502      	bpl.n	80015b6 <__swbuf_r+0x26>
 80015b0:	6923      	ldr	r3, [r4, #16]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d109      	bne.n	80015ca <__swbuf_r+0x3a>
 80015b6:	0021      	movs	r1, r4
 80015b8:	0030      	movs	r0, r6
 80015ba:	f000 f82b 	bl	8001614 <__swsetup_r>
 80015be:	2800      	cmp	r0, #0
 80015c0:	d003      	beq.n	80015ca <__swbuf_r+0x3a>
 80015c2:	2501      	movs	r5, #1
 80015c4:	426d      	negs	r5, r5
 80015c6:	0028      	movs	r0, r5
 80015c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80015ca:	6923      	ldr	r3, [r4, #16]
 80015cc:	6820      	ldr	r0, [r4, #0]
 80015ce:	b2ef      	uxtb	r7, r5
 80015d0:	1ac0      	subs	r0, r0, r3
 80015d2:	6963      	ldr	r3, [r4, #20]
 80015d4:	b2ed      	uxtb	r5, r5
 80015d6:	4283      	cmp	r3, r0
 80015d8:	dc05      	bgt.n	80015e6 <__swbuf_r+0x56>
 80015da:	0021      	movs	r1, r4
 80015dc:	0030      	movs	r0, r6
 80015de:	f000 fd49 	bl	8002074 <_fflush_r>
 80015e2:	2800      	cmp	r0, #0
 80015e4:	d1ed      	bne.n	80015c2 <__swbuf_r+0x32>
 80015e6:	68a3      	ldr	r3, [r4, #8]
 80015e8:	3001      	adds	r0, #1
 80015ea:	3b01      	subs	r3, #1
 80015ec:	60a3      	str	r3, [r4, #8]
 80015ee:	6823      	ldr	r3, [r4, #0]
 80015f0:	1c5a      	adds	r2, r3, #1
 80015f2:	6022      	str	r2, [r4, #0]
 80015f4:	701f      	strb	r7, [r3, #0]
 80015f6:	6963      	ldr	r3, [r4, #20]
 80015f8:	4283      	cmp	r3, r0
 80015fa:	d004      	beq.n	8001606 <__swbuf_r+0x76>
 80015fc:	89a3      	ldrh	r3, [r4, #12]
 80015fe:	07db      	lsls	r3, r3, #31
 8001600:	d5e1      	bpl.n	80015c6 <__swbuf_r+0x36>
 8001602:	2d0a      	cmp	r5, #10
 8001604:	d1df      	bne.n	80015c6 <__swbuf_r+0x36>
 8001606:	0021      	movs	r1, r4
 8001608:	0030      	movs	r0, r6
 800160a:	f000 fd33 	bl	8002074 <_fflush_r>
 800160e:	2800      	cmp	r0, #0
 8001610:	d0d9      	beq.n	80015c6 <__swbuf_r+0x36>
 8001612:	e7d6      	b.n	80015c2 <__swbuf_r+0x32>

08001614 <__swsetup_r>:
 8001614:	4b2d      	ldr	r3, [pc, #180]	@ (80016cc <__swsetup_r+0xb8>)
 8001616:	b570      	push	{r4, r5, r6, lr}
 8001618:	0005      	movs	r5, r0
 800161a:	6818      	ldr	r0, [r3, #0]
 800161c:	000c      	movs	r4, r1
 800161e:	2800      	cmp	r0, #0
 8001620:	d004      	beq.n	800162c <__swsetup_r+0x18>
 8001622:	6a03      	ldr	r3, [r0, #32]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d101      	bne.n	800162c <__swsetup_r+0x18>
 8001628:	f7ff fe02 	bl	8001230 <__sinit>
 800162c:	230c      	movs	r3, #12
 800162e:	5ee2      	ldrsh	r2, [r4, r3]
 8001630:	0713      	lsls	r3, r2, #28
 8001632:	d423      	bmi.n	800167c <__swsetup_r+0x68>
 8001634:	06d3      	lsls	r3, r2, #27
 8001636:	d407      	bmi.n	8001648 <__swsetup_r+0x34>
 8001638:	2309      	movs	r3, #9
 800163a:	602b      	str	r3, [r5, #0]
 800163c:	2340      	movs	r3, #64	@ 0x40
 800163e:	2001      	movs	r0, #1
 8001640:	4313      	orrs	r3, r2
 8001642:	81a3      	strh	r3, [r4, #12]
 8001644:	4240      	negs	r0, r0
 8001646:	e03a      	b.n	80016be <__swsetup_r+0xaa>
 8001648:	0752      	lsls	r2, r2, #29
 800164a:	d513      	bpl.n	8001674 <__swsetup_r+0x60>
 800164c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800164e:	2900      	cmp	r1, #0
 8001650:	d008      	beq.n	8001664 <__swsetup_r+0x50>
 8001652:	0023      	movs	r3, r4
 8001654:	3344      	adds	r3, #68	@ 0x44
 8001656:	4299      	cmp	r1, r3
 8001658:	d002      	beq.n	8001660 <__swsetup_r+0x4c>
 800165a:	0028      	movs	r0, r5
 800165c:	f000 f8bc 	bl	80017d8 <_free_r>
 8001660:	2300      	movs	r3, #0
 8001662:	6363      	str	r3, [r4, #52]	@ 0x34
 8001664:	2224      	movs	r2, #36	@ 0x24
 8001666:	89a3      	ldrh	r3, [r4, #12]
 8001668:	4393      	bics	r3, r2
 800166a:	81a3      	strh	r3, [r4, #12]
 800166c:	2300      	movs	r3, #0
 800166e:	6063      	str	r3, [r4, #4]
 8001670:	6923      	ldr	r3, [r4, #16]
 8001672:	6023      	str	r3, [r4, #0]
 8001674:	2308      	movs	r3, #8
 8001676:	89a2      	ldrh	r2, [r4, #12]
 8001678:	4313      	orrs	r3, r2
 800167a:	81a3      	strh	r3, [r4, #12]
 800167c:	6923      	ldr	r3, [r4, #16]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d10b      	bne.n	800169a <__swsetup_r+0x86>
 8001682:	21a0      	movs	r1, #160	@ 0xa0
 8001684:	2280      	movs	r2, #128	@ 0x80
 8001686:	89a3      	ldrh	r3, [r4, #12]
 8001688:	0089      	lsls	r1, r1, #2
 800168a:	0092      	lsls	r2, r2, #2
 800168c:	400b      	ands	r3, r1
 800168e:	4293      	cmp	r3, r2
 8001690:	d003      	beq.n	800169a <__swsetup_r+0x86>
 8001692:	0021      	movs	r1, r4
 8001694:	0028      	movs	r0, r5
 8001696:	f000 fd43 	bl	8002120 <__smakebuf_r>
 800169a:	230c      	movs	r3, #12
 800169c:	5ee2      	ldrsh	r2, [r4, r3]
 800169e:	2101      	movs	r1, #1
 80016a0:	0013      	movs	r3, r2
 80016a2:	400b      	ands	r3, r1
 80016a4:	420a      	tst	r2, r1
 80016a6:	d00b      	beq.n	80016c0 <__swsetup_r+0xac>
 80016a8:	2300      	movs	r3, #0
 80016aa:	60a3      	str	r3, [r4, #8]
 80016ac:	6963      	ldr	r3, [r4, #20]
 80016ae:	425b      	negs	r3, r3
 80016b0:	61a3      	str	r3, [r4, #24]
 80016b2:	2000      	movs	r0, #0
 80016b4:	6923      	ldr	r3, [r4, #16]
 80016b6:	4283      	cmp	r3, r0
 80016b8:	d101      	bne.n	80016be <__swsetup_r+0xaa>
 80016ba:	0613      	lsls	r3, r2, #24
 80016bc:	d4be      	bmi.n	800163c <__swsetup_r+0x28>
 80016be:	bd70      	pop	{r4, r5, r6, pc}
 80016c0:	0791      	lsls	r1, r2, #30
 80016c2:	d400      	bmi.n	80016c6 <__swsetup_r+0xb2>
 80016c4:	6963      	ldr	r3, [r4, #20]
 80016c6:	60a3      	str	r3, [r4, #8]
 80016c8:	e7f3      	b.n	80016b2 <__swsetup_r+0x9e>
 80016ca:	46c0      	nop			@ (mov r8, r8)
 80016cc:	20000010 	.word	0x20000010

080016d0 <memset>:
 80016d0:	0003      	movs	r3, r0
 80016d2:	1882      	adds	r2, r0, r2
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d100      	bne.n	80016da <memset+0xa>
 80016d8:	4770      	bx	lr
 80016da:	7019      	strb	r1, [r3, #0]
 80016dc:	3301      	adds	r3, #1
 80016de:	e7f9      	b.n	80016d4 <memset+0x4>

080016e0 <_close_r>:
 80016e0:	2300      	movs	r3, #0
 80016e2:	b570      	push	{r4, r5, r6, lr}
 80016e4:	4d06      	ldr	r5, [pc, #24]	@ (8001700 <_close_r+0x20>)
 80016e6:	0004      	movs	r4, r0
 80016e8:	0008      	movs	r0, r1
 80016ea:	602b      	str	r3, [r5, #0]
 80016ec:	f7ff f94d 	bl	800098a <_close>
 80016f0:	1c43      	adds	r3, r0, #1
 80016f2:	d103      	bne.n	80016fc <_close_r+0x1c>
 80016f4:	682b      	ldr	r3, [r5, #0]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d000      	beq.n	80016fc <_close_r+0x1c>
 80016fa:	6023      	str	r3, [r4, #0]
 80016fc:	bd70      	pop	{r4, r5, r6, pc}
 80016fe:	46c0      	nop			@ (mov r8, r8)
 8001700:	200012d8 	.word	0x200012d8

08001704 <_lseek_r>:
 8001704:	b570      	push	{r4, r5, r6, lr}
 8001706:	0004      	movs	r4, r0
 8001708:	0008      	movs	r0, r1
 800170a:	0011      	movs	r1, r2
 800170c:	001a      	movs	r2, r3
 800170e:	2300      	movs	r3, #0
 8001710:	4d05      	ldr	r5, [pc, #20]	@ (8001728 <_lseek_r+0x24>)
 8001712:	602b      	str	r3, [r5, #0]
 8001714:	f7ff f95a 	bl	80009cc <_lseek>
 8001718:	1c43      	adds	r3, r0, #1
 800171a:	d103      	bne.n	8001724 <_lseek_r+0x20>
 800171c:	682b      	ldr	r3, [r5, #0]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d000      	beq.n	8001724 <_lseek_r+0x20>
 8001722:	6023      	str	r3, [r4, #0]
 8001724:	bd70      	pop	{r4, r5, r6, pc}
 8001726:	46c0      	nop			@ (mov r8, r8)
 8001728:	200012d8 	.word	0x200012d8

0800172c <_read_r>:
 800172c:	b570      	push	{r4, r5, r6, lr}
 800172e:	0004      	movs	r4, r0
 8001730:	0008      	movs	r0, r1
 8001732:	0011      	movs	r1, r2
 8001734:	001a      	movs	r2, r3
 8001736:	2300      	movs	r3, #0
 8001738:	4d05      	ldr	r5, [pc, #20]	@ (8001750 <_read_r+0x24>)
 800173a:	602b      	str	r3, [r5, #0]
 800173c:	f7ff f8ec 	bl	8000918 <_read>
 8001740:	1c43      	adds	r3, r0, #1
 8001742:	d103      	bne.n	800174c <_read_r+0x20>
 8001744:	682b      	ldr	r3, [r5, #0]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d000      	beq.n	800174c <_read_r+0x20>
 800174a:	6023      	str	r3, [r4, #0]
 800174c:	bd70      	pop	{r4, r5, r6, pc}
 800174e:	46c0      	nop			@ (mov r8, r8)
 8001750:	200012d8 	.word	0x200012d8

08001754 <_write_r>:
 8001754:	b570      	push	{r4, r5, r6, lr}
 8001756:	0004      	movs	r4, r0
 8001758:	0008      	movs	r0, r1
 800175a:	0011      	movs	r1, r2
 800175c:	001a      	movs	r2, r3
 800175e:	2300      	movs	r3, #0
 8001760:	4d05      	ldr	r5, [pc, #20]	@ (8001778 <_write_r+0x24>)
 8001762:	602b      	str	r3, [r5, #0]
 8001764:	f7ff f8f5 	bl	8000952 <_write>
 8001768:	1c43      	adds	r3, r0, #1
 800176a:	d103      	bne.n	8001774 <_write_r+0x20>
 800176c:	682b      	ldr	r3, [r5, #0]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d000      	beq.n	8001774 <_write_r+0x20>
 8001772:	6023      	str	r3, [r4, #0]
 8001774:	bd70      	pop	{r4, r5, r6, pc}
 8001776:	46c0      	nop			@ (mov r8, r8)
 8001778:	200012d8 	.word	0x200012d8

0800177c <__errno>:
 800177c:	4b01      	ldr	r3, [pc, #4]	@ (8001784 <__errno+0x8>)
 800177e:	6818      	ldr	r0, [r3, #0]
 8001780:	4770      	bx	lr
 8001782:	46c0      	nop			@ (mov r8, r8)
 8001784:	20000010 	.word	0x20000010

08001788 <__libc_init_array>:
 8001788:	b570      	push	{r4, r5, r6, lr}
 800178a:	2600      	movs	r6, #0
 800178c:	4c0c      	ldr	r4, [pc, #48]	@ (80017c0 <__libc_init_array+0x38>)
 800178e:	4d0d      	ldr	r5, [pc, #52]	@ (80017c4 <__libc_init_array+0x3c>)
 8001790:	1b64      	subs	r4, r4, r5
 8001792:	10a4      	asrs	r4, r4, #2
 8001794:	42a6      	cmp	r6, r4
 8001796:	d109      	bne.n	80017ac <__libc_init_array+0x24>
 8001798:	2600      	movs	r6, #0
 800179a:	f000 fd45 	bl	8002228 <_init>
 800179e:	4c0a      	ldr	r4, [pc, #40]	@ (80017c8 <__libc_init_array+0x40>)
 80017a0:	4d0a      	ldr	r5, [pc, #40]	@ (80017cc <__libc_init_array+0x44>)
 80017a2:	1b64      	subs	r4, r4, r5
 80017a4:	10a4      	asrs	r4, r4, #2
 80017a6:	42a6      	cmp	r6, r4
 80017a8:	d105      	bne.n	80017b6 <__libc_init_array+0x2e>
 80017aa:	bd70      	pop	{r4, r5, r6, pc}
 80017ac:	00b3      	lsls	r3, r6, #2
 80017ae:	58eb      	ldr	r3, [r5, r3]
 80017b0:	4798      	blx	r3
 80017b2:	3601      	adds	r6, #1
 80017b4:	e7ee      	b.n	8001794 <__libc_init_array+0xc>
 80017b6:	00b3      	lsls	r3, r6, #2
 80017b8:	58eb      	ldr	r3, [r5, r3]
 80017ba:	4798      	blx	r3
 80017bc:	3601      	adds	r6, #1
 80017be:	e7f2      	b.n	80017a6 <__libc_init_array+0x1e>
 80017c0:	080022a4 	.word	0x080022a4
 80017c4:	080022a4 	.word	0x080022a4
 80017c8:	080022a8 	.word	0x080022a8
 80017cc:	080022a4 	.word	0x080022a4

080017d0 <__retarget_lock_init_recursive>:
 80017d0:	4770      	bx	lr

080017d2 <__retarget_lock_acquire_recursive>:
 80017d2:	4770      	bx	lr

080017d4 <__retarget_lock_release_recursive>:
 80017d4:	4770      	bx	lr
	...

080017d8 <_free_r>:
 80017d8:	b570      	push	{r4, r5, r6, lr}
 80017da:	0005      	movs	r5, r0
 80017dc:	1e0c      	subs	r4, r1, #0
 80017de:	d010      	beq.n	8001802 <_free_r+0x2a>
 80017e0:	3c04      	subs	r4, #4
 80017e2:	6823      	ldr	r3, [r4, #0]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	da00      	bge.n	80017ea <_free_r+0x12>
 80017e8:	18e4      	adds	r4, r4, r3
 80017ea:	0028      	movs	r0, r5
 80017ec:	f000 f8ea 	bl	80019c4 <__malloc_lock>
 80017f0:	4a1d      	ldr	r2, [pc, #116]	@ (8001868 <_free_r+0x90>)
 80017f2:	6813      	ldr	r3, [r2, #0]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d105      	bne.n	8001804 <_free_r+0x2c>
 80017f8:	6063      	str	r3, [r4, #4]
 80017fa:	6014      	str	r4, [r2, #0]
 80017fc:	0028      	movs	r0, r5
 80017fe:	f000 f8e9 	bl	80019d4 <__malloc_unlock>
 8001802:	bd70      	pop	{r4, r5, r6, pc}
 8001804:	42a3      	cmp	r3, r4
 8001806:	d908      	bls.n	800181a <_free_r+0x42>
 8001808:	6820      	ldr	r0, [r4, #0]
 800180a:	1821      	adds	r1, r4, r0
 800180c:	428b      	cmp	r3, r1
 800180e:	d1f3      	bne.n	80017f8 <_free_r+0x20>
 8001810:	6819      	ldr	r1, [r3, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	1809      	adds	r1, r1, r0
 8001816:	6021      	str	r1, [r4, #0]
 8001818:	e7ee      	b.n	80017f8 <_free_r+0x20>
 800181a:	001a      	movs	r2, r3
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <_free_r+0x4e>
 8001822:	42a3      	cmp	r3, r4
 8001824:	d9f9      	bls.n	800181a <_free_r+0x42>
 8001826:	6811      	ldr	r1, [r2, #0]
 8001828:	1850      	adds	r0, r2, r1
 800182a:	42a0      	cmp	r0, r4
 800182c:	d10b      	bne.n	8001846 <_free_r+0x6e>
 800182e:	6820      	ldr	r0, [r4, #0]
 8001830:	1809      	adds	r1, r1, r0
 8001832:	1850      	adds	r0, r2, r1
 8001834:	6011      	str	r1, [r2, #0]
 8001836:	4283      	cmp	r3, r0
 8001838:	d1e0      	bne.n	80017fc <_free_r+0x24>
 800183a:	6818      	ldr	r0, [r3, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	1841      	adds	r1, r0, r1
 8001840:	6011      	str	r1, [r2, #0]
 8001842:	6053      	str	r3, [r2, #4]
 8001844:	e7da      	b.n	80017fc <_free_r+0x24>
 8001846:	42a0      	cmp	r0, r4
 8001848:	d902      	bls.n	8001850 <_free_r+0x78>
 800184a:	230c      	movs	r3, #12
 800184c:	602b      	str	r3, [r5, #0]
 800184e:	e7d5      	b.n	80017fc <_free_r+0x24>
 8001850:	6820      	ldr	r0, [r4, #0]
 8001852:	1821      	adds	r1, r4, r0
 8001854:	428b      	cmp	r3, r1
 8001856:	d103      	bne.n	8001860 <_free_r+0x88>
 8001858:	6819      	ldr	r1, [r3, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	1809      	adds	r1, r1, r0
 800185e:	6021      	str	r1, [r4, #0]
 8001860:	6063      	str	r3, [r4, #4]
 8001862:	6054      	str	r4, [r2, #4]
 8001864:	e7ca      	b.n	80017fc <_free_r+0x24>
 8001866:	46c0      	nop			@ (mov r8, r8)
 8001868:	200012e4 	.word	0x200012e4

0800186c <malloc>:
 800186c:	b510      	push	{r4, lr}
 800186e:	4b03      	ldr	r3, [pc, #12]	@ (800187c <malloc+0x10>)
 8001870:	0001      	movs	r1, r0
 8001872:	6818      	ldr	r0, [r3, #0]
 8001874:	f000 f826 	bl	80018c4 <_malloc_r>
 8001878:	bd10      	pop	{r4, pc}
 800187a:	46c0      	nop			@ (mov r8, r8)
 800187c:	20000010 	.word	0x20000010

08001880 <sbrk_aligned>:
 8001880:	b570      	push	{r4, r5, r6, lr}
 8001882:	4e0f      	ldr	r6, [pc, #60]	@ (80018c0 <sbrk_aligned+0x40>)
 8001884:	000d      	movs	r5, r1
 8001886:	6831      	ldr	r1, [r6, #0]
 8001888:	0004      	movs	r4, r0
 800188a:	2900      	cmp	r1, #0
 800188c:	d102      	bne.n	8001894 <sbrk_aligned+0x14>
 800188e:	f000 fcad 	bl	80021ec <_sbrk_r>
 8001892:	6030      	str	r0, [r6, #0]
 8001894:	0029      	movs	r1, r5
 8001896:	0020      	movs	r0, r4
 8001898:	f000 fca8 	bl	80021ec <_sbrk_r>
 800189c:	1c43      	adds	r3, r0, #1
 800189e:	d103      	bne.n	80018a8 <sbrk_aligned+0x28>
 80018a0:	2501      	movs	r5, #1
 80018a2:	426d      	negs	r5, r5
 80018a4:	0028      	movs	r0, r5
 80018a6:	bd70      	pop	{r4, r5, r6, pc}
 80018a8:	2303      	movs	r3, #3
 80018aa:	1cc5      	adds	r5, r0, #3
 80018ac:	439d      	bics	r5, r3
 80018ae:	42a8      	cmp	r0, r5
 80018b0:	d0f8      	beq.n	80018a4 <sbrk_aligned+0x24>
 80018b2:	1a29      	subs	r1, r5, r0
 80018b4:	0020      	movs	r0, r4
 80018b6:	f000 fc99 	bl	80021ec <_sbrk_r>
 80018ba:	3001      	adds	r0, #1
 80018bc:	d1f2      	bne.n	80018a4 <sbrk_aligned+0x24>
 80018be:	e7ef      	b.n	80018a0 <sbrk_aligned+0x20>
 80018c0:	200012e0 	.word	0x200012e0

080018c4 <_malloc_r>:
 80018c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80018c6:	2203      	movs	r2, #3
 80018c8:	1ccb      	adds	r3, r1, #3
 80018ca:	4393      	bics	r3, r2
 80018cc:	3308      	adds	r3, #8
 80018ce:	0005      	movs	r5, r0
 80018d0:	001f      	movs	r7, r3
 80018d2:	2b0c      	cmp	r3, #12
 80018d4:	d234      	bcs.n	8001940 <_malloc_r+0x7c>
 80018d6:	270c      	movs	r7, #12
 80018d8:	42b9      	cmp	r1, r7
 80018da:	d833      	bhi.n	8001944 <_malloc_r+0x80>
 80018dc:	0028      	movs	r0, r5
 80018de:	f000 f871 	bl	80019c4 <__malloc_lock>
 80018e2:	4e37      	ldr	r6, [pc, #220]	@ (80019c0 <_malloc_r+0xfc>)
 80018e4:	6833      	ldr	r3, [r6, #0]
 80018e6:	001c      	movs	r4, r3
 80018e8:	2c00      	cmp	r4, #0
 80018ea:	d12f      	bne.n	800194c <_malloc_r+0x88>
 80018ec:	0039      	movs	r1, r7
 80018ee:	0028      	movs	r0, r5
 80018f0:	f7ff ffc6 	bl	8001880 <sbrk_aligned>
 80018f4:	0004      	movs	r4, r0
 80018f6:	1c43      	adds	r3, r0, #1
 80018f8:	d15f      	bne.n	80019ba <_malloc_r+0xf6>
 80018fa:	6834      	ldr	r4, [r6, #0]
 80018fc:	9400      	str	r4, [sp, #0]
 80018fe:	9b00      	ldr	r3, [sp, #0]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d14a      	bne.n	800199a <_malloc_r+0xd6>
 8001904:	2c00      	cmp	r4, #0
 8001906:	d052      	beq.n	80019ae <_malloc_r+0xea>
 8001908:	6823      	ldr	r3, [r4, #0]
 800190a:	0028      	movs	r0, r5
 800190c:	18e3      	adds	r3, r4, r3
 800190e:	9900      	ldr	r1, [sp, #0]
 8001910:	9301      	str	r3, [sp, #4]
 8001912:	f000 fc6b 	bl	80021ec <_sbrk_r>
 8001916:	9b01      	ldr	r3, [sp, #4]
 8001918:	4283      	cmp	r3, r0
 800191a:	d148      	bne.n	80019ae <_malloc_r+0xea>
 800191c:	6823      	ldr	r3, [r4, #0]
 800191e:	0028      	movs	r0, r5
 8001920:	1aff      	subs	r7, r7, r3
 8001922:	0039      	movs	r1, r7
 8001924:	f7ff ffac 	bl	8001880 <sbrk_aligned>
 8001928:	3001      	adds	r0, #1
 800192a:	d040      	beq.n	80019ae <_malloc_r+0xea>
 800192c:	6823      	ldr	r3, [r4, #0]
 800192e:	19db      	adds	r3, r3, r7
 8001930:	6023      	str	r3, [r4, #0]
 8001932:	6833      	ldr	r3, [r6, #0]
 8001934:	685a      	ldr	r2, [r3, #4]
 8001936:	2a00      	cmp	r2, #0
 8001938:	d133      	bne.n	80019a2 <_malloc_r+0xde>
 800193a:	9b00      	ldr	r3, [sp, #0]
 800193c:	6033      	str	r3, [r6, #0]
 800193e:	e019      	b.n	8001974 <_malloc_r+0xb0>
 8001940:	2b00      	cmp	r3, #0
 8001942:	dac9      	bge.n	80018d8 <_malloc_r+0x14>
 8001944:	230c      	movs	r3, #12
 8001946:	602b      	str	r3, [r5, #0]
 8001948:	2000      	movs	r0, #0
 800194a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800194c:	6821      	ldr	r1, [r4, #0]
 800194e:	1bc9      	subs	r1, r1, r7
 8001950:	d420      	bmi.n	8001994 <_malloc_r+0xd0>
 8001952:	290b      	cmp	r1, #11
 8001954:	d90a      	bls.n	800196c <_malloc_r+0xa8>
 8001956:	19e2      	adds	r2, r4, r7
 8001958:	6027      	str	r7, [r4, #0]
 800195a:	42a3      	cmp	r3, r4
 800195c:	d104      	bne.n	8001968 <_malloc_r+0xa4>
 800195e:	6032      	str	r2, [r6, #0]
 8001960:	6863      	ldr	r3, [r4, #4]
 8001962:	6011      	str	r1, [r2, #0]
 8001964:	6053      	str	r3, [r2, #4]
 8001966:	e005      	b.n	8001974 <_malloc_r+0xb0>
 8001968:	605a      	str	r2, [r3, #4]
 800196a:	e7f9      	b.n	8001960 <_malloc_r+0x9c>
 800196c:	6862      	ldr	r2, [r4, #4]
 800196e:	42a3      	cmp	r3, r4
 8001970:	d10e      	bne.n	8001990 <_malloc_r+0xcc>
 8001972:	6032      	str	r2, [r6, #0]
 8001974:	0028      	movs	r0, r5
 8001976:	f000 f82d 	bl	80019d4 <__malloc_unlock>
 800197a:	0020      	movs	r0, r4
 800197c:	2207      	movs	r2, #7
 800197e:	300b      	adds	r0, #11
 8001980:	1d23      	adds	r3, r4, #4
 8001982:	4390      	bics	r0, r2
 8001984:	1ac2      	subs	r2, r0, r3
 8001986:	4298      	cmp	r0, r3
 8001988:	d0df      	beq.n	800194a <_malloc_r+0x86>
 800198a:	1a1b      	subs	r3, r3, r0
 800198c:	50a3      	str	r3, [r4, r2]
 800198e:	e7dc      	b.n	800194a <_malloc_r+0x86>
 8001990:	605a      	str	r2, [r3, #4]
 8001992:	e7ef      	b.n	8001974 <_malloc_r+0xb0>
 8001994:	0023      	movs	r3, r4
 8001996:	6864      	ldr	r4, [r4, #4]
 8001998:	e7a6      	b.n	80018e8 <_malloc_r+0x24>
 800199a:	9c00      	ldr	r4, [sp, #0]
 800199c:	6863      	ldr	r3, [r4, #4]
 800199e:	9300      	str	r3, [sp, #0]
 80019a0:	e7ad      	b.n	80018fe <_malloc_r+0x3a>
 80019a2:	001a      	movs	r2, r3
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	42a3      	cmp	r3, r4
 80019a8:	d1fb      	bne.n	80019a2 <_malloc_r+0xde>
 80019aa:	2300      	movs	r3, #0
 80019ac:	e7da      	b.n	8001964 <_malloc_r+0xa0>
 80019ae:	230c      	movs	r3, #12
 80019b0:	0028      	movs	r0, r5
 80019b2:	602b      	str	r3, [r5, #0]
 80019b4:	f000 f80e 	bl	80019d4 <__malloc_unlock>
 80019b8:	e7c6      	b.n	8001948 <_malloc_r+0x84>
 80019ba:	6007      	str	r7, [r0, #0]
 80019bc:	e7da      	b.n	8001974 <_malloc_r+0xb0>
 80019be:	46c0      	nop			@ (mov r8, r8)
 80019c0:	200012e4 	.word	0x200012e4

080019c4 <__malloc_lock>:
 80019c4:	b510      	push	{r4, lr}
 80019c6:	4802      	ldr	r0, [pc, #8]	@ (80019d0 <__malloc_lock+0xc>)
 80019c8:	f7ff ff03 	bl	80017d2 <__retarget_lock_acquire_recursive>
 80019cc:	bd10      	pop	{r4, pc}
 80019ce:	46c0      	nop			@ (mov r8, r8)
 80019d0:	200012dc 	.word	0x200012dc

080019d4 <__malloc_unlock>:
 80019d4:	b510      	push	{r4, lr}
 80019d6:	4802      	ldr	r0, [pc, #8]	@ (80019e0 <__malloc_unlock+0xc>)
 80019d8:	f7ff fefc 	bl	80017d4 <__retarget_lock_release_recursive>
 80019dc:	bd10      	pop	{r4, pc}
 80019de:	46c0      	nop			@ (mov r8, r8)
 80019e0:	200012dc 	.word	0x200012dc

080019e4 <__sfputc_r>:
 80019e4:	6893      	ldr	r3, [r2, #8]
 80019e6:	b510      	push	{r4, lr}
 80019e8:	3b01      	subs	r3, #1
 80019ea:	6093      	str	r3, [r2, #8]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	da04      	bge.n	80019fa <__sfputc_r+0x16>
 80019f0:	6994      	ldr	r4, [r2, #24]
 80019f2:	42a3      	cmp	r3, r4
 80019f4:	db07      	blt.n	8001a06 <__sfputc_r+0x22>
 80019f6:	290a      	cmp	r1, #10
 80019f8:	d005      	beq.n	8001a06 <__sfputc_r+0x22>
 80019fa:	6813      	ldr	r3, [r2, #0]
 80019fc:	1c58      	adds	r0, r3, #1
 80019fe:	6010      	str	r0, [r2, #0]
 8001a00:	7019      	strb	r1, [r3, #0]
 8001a02:	0008      	movs	r0, r1
 8001a04:	bd10      	pop	{r4, pc}
 8001a06:	f7ff fdc3 	bl	8001590 <__swbuf_r>
 8001a0a:	0001      	movs	r1, r0
 8001a0c:	e7f9      	b.n	8001a02 <__sfputc_r+0x1e>

08001a0e <__sfputs_r>:
 8001a0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a10:	0006      	movs	r6, r0
 8001a12:	000f      	movs	r7, r1
 8001a14:	0014      	movs	r4, r2
 8001a16:	18d5      	adds	r5, r2, r3
 8001a18:	42ac      	cmp	r4, r5
 8001a1a:	d101      	bne.n	8001a20 <__sfputs_r+0x12>
 8001a1c:	2000      	movs	r0, #0
 8001a1e:	e007      	b.n	8001a30 <__sfputs_r+0x22>
 8001a20:	7821      	ldrb	r1, [r4, #0]
 8001a22:	003a      	movs	r2, r7
 8001a24:	0030      	movs	r0, r6
 8001a26:	f7ff ffdd 	bl	80019e4 <__sfputc_r>
 8001a2a:	3401      	adds	r4, #1
 8001a2c:	1c43      	adds	r3, r0, #1
 8001a2e:	d1f3      	bne.n	8001a18 <__sfputs_r+0xa>
 8001a30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001a34 <_vfiprintf_r>:
 8001a34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a36:	b0a1      	sub	sp, #132	@ 0x84
 8001a38:	000f      	movs	r7, r1
 8001a3a:	0015      	movs	r5, r2
 8001a3c:	001e      	movs	r6, r3
 8001a3e:	9003      	str	r0, [sp, #12]
 8001a40:	2800      	cmp	r0, #0
 8001a42:	d004      	beq.n	8001a4e <_vfiprintf_r+0x1a>
 8001a44:	6a03      	ldr	r3, [r0, #32]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d101      	bne.n	8001a4e <_vfiprintf_r+0x1a>
 8001a4a:	f7ff fbf1 	bl	8001230 <__sinit>
 8001a4e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001a50:	07db      	lsls	r3, r3, #31
 8001a52:	d405      	bmi.n	8001a60 <_vfiprintf_r+0x2c>
 8001a54:	89bb      	ldrh	r3, [r7, #12]
 8001a56:	059b      	lsls	r3, r3, #22
 8001a58:	d402      	bmi.n	8001a60 <_vfiprintf_r+0x2c>
 8001a5a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8001a5c:	f7ff feb9 	bl	80017d2 <__retarget_lock_acquire_recursive>
 8001a60:	89bb      	ldrh	r3, [r7, #12]
 8001a62:	071b      	lsls	r3, r3, #28
 8001a64:	d502      	bpl.n	8001a6c <_vfiprintf_r+0x38>
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d113      	bne.n	8001a94 <_vfiprintf_r+0x60>
 8001a6c:	0039      	movs	r1, r7
 8001a6e:	9803      	ldr	r0, [sp, #12]
 8001a70:	f7ff fdd0 	bl	8001614 <__swsetup_r>
 8001a74:	2800      	cmp	r0, #0
 8001a76:	d00d      	beq.n	8001a94 <_vfiprintf_r+0x60>
 8001a78:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001a7a:	07db      	lsls	r3, r3, #31
 8001a7c:	d503      	bpl.n	8001a86 <_vfiprintf_r+0x52>
 8001a7e:	2001      	movs	r0, #1
 8001a80:	4240      	negs	r0, r0
 8001a82:	b021      	add	sp, #132	@ 0x84
 8001a84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a86:	89bb      	ldrh	r3, [r7, #12]
 8001a88:	059b      	lsls	r3, r3, #22
 8001a8a:	d4f8      	bmi.n	8001a7e <_vfiprintf_r+0x4a>
 8001a8c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8001a8e:	f7ff fea1 	bl	80017d4 <__retarget_lock_release_recursive>
 8001a92:	e7f4      	b.n	8001a7e <_vfiprintf_r+0x4a>
 8001a94:	2300      	movs	r3, #0
 8001a96:	ac08      	add	r4, sp, #32
 8001a98:	6163      	str	r3, [r4, #20]
 8001a9a:	3320      	adds	r3, #32
 8001a9c:	7663      	strb	r3, [r4, #25]
 8001a9e:	3310      	adds	r3, #16
 8001aa0:	76a3      	strb	r3, [r4, #26]
 8001aa2:	9607      	str	r6, [sp, #28]
 8001aa4:	002e      	movs	r6, r5
 8001aa6:	7833      	ldrb	r3, [r6, #0]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <_vfiprintf_r+0x7c>
 8001aac:	2b25      	cmp	r3, #37	@ 0x25
 8001aae:	d148      	bne.n	8001b42 <_vfiprintf_r+0x10e>
 8001ab0:	1b73      	subs	r3, r6, r5
 8001ab2:	9305      	str	r3, [sp, #20]
 8001ab4:	42ae      	cmp	r6, r5
 8001ab6:	d00b      	beq.n	8001ad0 <_vfiprintf_r+0x9c>
 8001ab8:	002a      	movs	r2, r5
 8001aba:	0039      	movs	r1, r7
 8001abc:	9803      	ldr	r0, [sp, #12]
 8001abe:	f7ff ffa6 	bl	8001a0e <__sfputs_r>
 8001ac2:	3001      	adds	r0, #1
 8001ac4:	d100      	bne.n	8001ac8 <_vfiprintf_r+0x94>
 8001ac6:	e0ae      	b.n	8001c26 <_vfiprintf_r+0x1f2>
 8001ac8:	6963      	ldr	r3, [r4, #20]
 8001aca:	9a05      	ldr	r2, [sp, #20]
 8001acc:	189b      	adds	r3, r3, r2
 8001ace:	6163      	str	r3, [r4, #20]
 8001ad0:	7833      	ldrb	r3, [r6, #0]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d100      	bne.n	8001ad8 <_vfiprintf_r+0xa4>
 8001ad6:	e0a6      	b.n	8001c26 <_vfiprintf_r+0x1f2>
 8001ad8:	2201      	movs	r2, #1
 8001ada:	2300      	movs	r3, #0
 8001adc:	4252      	negs	r2, r2
 8001ade:	6062      	str	r2, [r4, #4]
 8001ae0:	a904      	add	r1, sp, #16
 8001ae2:	3254      	adds	r2, #84	@ 0x54
 8001ae4:	1852      	adds	r2, r2, r1
 8001ae6:	1c75      	adds	r5, r6, #1
 8001ae8:	6023      	str	r3, [r4, #0]
 8001aea:	60e3      	str	r3, [r4, #12]
 8001aec:	60a3      	str	r3, [r4, #8]
 8001aee:	7013      	strb	r3, [r2, #0]
 8001af0:	65a3      	str	r3, [r4, #88]	@ 0x58
 8001af2:	4b59      	ldr	r3, [pc, #356]	@ (8001c58 <_vfiprintf_r+0x224>)
 8001af4:	2205      	movs	r2, #5
 8001af6:	0018      	movs	r0, r3
 8001af8:	7829      	ldrb	r1, [r5, #0]
 8001afa:	9305      	str	r3, [sp, #20]
 8001afc:	f000 fb88 	bl	8002210 <memchr>
 8001b00:	1c6e      	adds	r6, r5, #1
 8001b02:	2800      	cmp	r0, #0
 8001b04:	d11f      	bne.n	8001b46 <_vfiprintf_r+0x112>
 8001b06:	6822      	ldr	r2, [r4, #0]
 8001b08:	06d3      	lsls	r3, r2, #27
 8001b0a:	d504      	bpl.n	8001b16 <_vfiprintf_r+0xe2>
 8001b0c:	2353      	movs	r3, #83	@ 0x53
 8001b0e:	a904      	add	r1, sp, #16
 8001b10:	185b      	adds	r3, r3, r1
 8001b12:	2120      	movs	r1, #32
 8001b14:	7019      	strb	r1, [r3, #0]
 8001b16:	0713      	lsls	r3, r2, #28
 8001b18:	d504      	bpl.n	8001b24 <_vfiprintf_r+0xf0>
 8001b1a:	2353      	movs	r3, #83	@ 0x53
 8001b1c:	a904      	add	r1, sp, #16
 8001b1e:	185b      	adds	r3, r3, r1
 8001b20:	212b      	movs	r1, #43	@ 0x2b
 8001b22:	7019      	strb	r1, [r3, #0]
 8001b24:	782b      	ldrb	r3, [r5, #0]
 8001b26:	2b2a      	cmp	r3, #42	@ 0x2a
 8001b28:	d016      	beq.n	8001b58 <_vfiprintf_r+0x124>
 8001b2a:	002e      	movs	r6, r5
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	200a      	movs	r0, #10
 8001b30:	68e3      	ldr	r3, [r4, #12]
 8001b32:	7832      	ldrb	r2, [r6, #0]
 8001b34:	1c75      	adds	r5, r6, #1
 8001b36:	3a30      	subs	r2, #48	@ 0x30
 8001b38:	2a09      	cmp	r2, #9
 8001b3a:	d950      	bls.n	8001bde <_vfiprintf_r+0x1aa>
 8001b3c:	2900      	cmp	r1, #0
 8001b3e:	d111      	bne.n	8001b64 <_vfiprintf_r+0x130>
 8001b40:	e017      	b.n	8001b72 <_vfiprintf_r+0x13e>
 8001b42:	3601      	adds	r6, #1
 8001b44:	e7af      	b.n	8001aa6 <_vfiprintf_r+0x72>
 8001b46:	9b05      	ldr	r3, [sp, #20]
 8001b48:	6822      	ldr	r2, [r4, #0]
 8001b4a:	1ac0      	subs	r0, r0, r3
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	4083      	lsls	r3, r0
 8001b50:	4313      	orrs	r3, r2
 8001b52:	0035      	movs	r5, r6
 8001b54:	6023      	str	r3, [r4, #0]
 8001b56:	e7cc      	b.n	8001af2 <_vfiprintf_r+0xbe>
 8001b58:	9b07      	ldr	r3, [sp, #28]
 8001b5a:	1d19      	adds	r1, r3, #4
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	9107      	str	r1, [sp, #28]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	db01      	blt.n	8001b68 <_vfiprintf_r+0x134>
 8001b64:	930b      	str	r3, [sp, #44]	@ 0x2c
 8001b66:	e004      	b.n	8001b72 <_vfiprintf_r+0x13e>
 8001b68:	425b      	negs	r3, r3
 8001b6a:	60e3      	str	r3, [r4, #12]
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	6023      	str	r3, [r4, #0]
 8001b72:	7833      	ldrb	r3, [r6, #0]
 8001b74:	2b2e      	cmp	r3, #46	@ 0x2e
 8001b76:	d10c      	bne.n	8001b92 <_vfiprintf_r+0x15e>
 8001b78:	7873      	ldrb	r3, [r6, #1]
 8001b7a:	2b2a      	cmp	r3, #42	@ 0x2a
 8001b7c:	d134      	bne.n	8001be8 <_vfiprintf_r+0x1b4>
 8001b7e:	9b07      	ldr	r3, [sp, #28]
 8001b80:	3602      	adds	r6, #2
 8001b82:	1d1a      	adds	r2, r3, #4
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	9207      	str	r2, [sp, #28]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	da01      	bge.n	8001b90 <_vfiprintf_r+0x15c>
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	425b      	negs	r3, r3
 8001b90:	9309      	str	r3, [sp, #36]	@ 0x24
 8001b92:	4d32      	ldr	r5, [pc, #200]	@ (8001c5c <_vfiprintf_r+0x228>)
 8001b94:	2203      	movs	r2, #3
 8001b96:	0028      	movs	r0, r5
 8001b98:	7831      	ldrb	r1, [r6, #0]
 8001b9a:	f000 fb39 	bl	8002210 <memchr>
 8001b9e:	2800      	cmp	r0, #0
 8001ba0:	d006      	beq.n	8001bb0 <_vfiprintf_r+0x17c>
 8001ba2:	2340      	movs	r3, #64	@ 0x40
 8001ba4:	1b40      	subs	r0, r0, r5
 8001ba6:	4083      	lsls	r3, r0
 8001ba8:	6822      	ldr	r2, [r4, #0]
 8001baa:	3601      	adds	r6, #1
 8001bac:	4313      	orrs	r3, r2
 8001bae:	6023      	str	r3, [r4, #0]
 8001bb0:	7831      	ldrb	r1, [r6, #0]
 8001bb2:	2206      	movs	r2, #6
 8001bb4:	482a      	ldr	r0, [pc, #168]	@ (8001c60 <_vfiprintf_r+0x22c>)
 8001bb6:	1c75      	adds	r5, r6, #1
 8001bb8:	7621      	strb	r1, [r4, #24]
 8001bba:	f000 fb29 	bl	8002210 <memchr>
 8001bbe:	2800      	cmp	r0, #0
 8001bc0:	d040      	beq.n	8001c44 <_vfiprintf_r+0x210>
 8001bc2:	4b28      	ldr	r3, [pc, #160]	@ (8001c64 <_vfiprintf_r+0x230>)
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d122      	bne.n	8001c0e <_vfiprintf_r+0x1da>
 8001bc8:	2207      	movs	r2, #7
 8001bca:	9b07      	ldr	r3, [sp, #28]
 8001bcc:	3307      	adds	r3, #7
 8001bce:	4393      	bics	r3, r2
 8001bd0:	3308      	adds	r3, #8
 8001bd2:	9307      	str	r3, [sp, #28]
 8001bd4:	6963      	ldr	r3, [r4, #20]
 8001bd6:	9a04      	ldr	r2, [sp, #16]
 8001bd8:	189b      	adds	r3, r3, r2
 8001bda:	6163      	str	r3, [r4, #20]
 8001bdc:	e762      	b.n	8001aa4 <_vfiprintf_r+0x70>
 8001bde:	4343      	muls	r3, r0
 8001be0:	002e      	movs	r6, r5
 8001be2:	2101      	movs	r1, #1
 8001be4:	189b      	adds	r3, r3, r2
 8001be6:	e7a4      	b.n	8001b32 <_vfiprintf_r+0xfe>
 8001be8:	2300      	movs	r3, #0
 8001bea:	200a      	movs	r0, #10
 8001bec:	0019      	movs	r1, r3
 8001bee:	3601      	adds	r6, #1
 8001bf0:	6063      	str	r3, [r4, #4]
 8001bf2:	7832      	ldrb	r2, [r6, #0]
 8001bf4:	1c75      	adds	r5, r6, #1
 8001bf6:	3a30      	subs	r2, #48	@ 0x30
 8001bf8:	2a09      	cmp	r2, #9
 8001bfa:	d903      	bls.n	8001c04 <_vfiprintf_r+0x1d0>
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d0c8      	beq.n	8001b92 <_vfiprintf_r+0x15e>
 8001c00:	9109      	str	r1, [sp, #36]	@ 0x24
 8001c02:	e7c6      	b.n	8001b92 <_vfiprintf_r+0x15e>
 8001c04:	4341      	muls	r1, r0
 8001c06:	002e      	movs	r6, r5
 8001c08:	2301      	movs	r3, #1
 8001c0a:	1889      	adds	r1, r1, r2
 8001c0c:	e7f1      	b.n	8001bf2 <_vfiprintf_r+0x1be>
 8001c0e:	aa07      	add	r2, sp, #28
 8001c10:	9200      	str	r2, [sp, #0]
 8001c12:	0021      	movs	r1, r4
 8001c14:	003a      	movs	r2, r7
 8001c16:	4b14      	ldr	r3, [pc, #80]	@ (8001c68 <_vfiprintf_r+0x234>)
 8001c18:	9803      	ldr	r0, [sp, #12]
 8001c1a:	e000      	b.n	8001c1e <_vfiprintf_r+0x1ea>
 8001c1c:	bf00      	nop
 8001c1e:	9004      	str	r0, [sp, #16]
 8001c20:	9b04      	ldr	r3, [sp, #16]
 8001c22:	3301      	adds	r3, #1
 8001c24:	d1d6      	bne.n	8001bd4 <_vfiprintf_r+0x1a0>
 8001c26:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001c28:	07db      	lsls	r3, r3, #31
 8001c2a:	d405      	bmi.n	8001c38 <_vfiprintf_r+0x204>
 8001c2c:	89bb      	ldrh	r3, [r7, #12]
 8001c2e:	059b      	lsls	r3, r3, #22
 8001c30:	d402      	bmi.n	8001c38 <_vfiprintf_r+0x204>
 8001c32:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8001c34:	f7ff fdce 	bl	80017d4 <__retarget_lock_release_recursive>
 8001c38:	89bb      	ldrh	r3, [r7, #12]
 8001c3a:	065b      	lsls	r3, r3, #25
 8001c3c:	d500      	bpl.n	8001c40 <_vfiprintf_r+0x20c>
 8001c3e:	e71e      	b.n	8001a7e <_vfiprintf_r+0x4a>
 8001c40:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8001c42:	e71e      	b.n	8001a82 <_vfiprintf_r+0x4e>
 8001c44:	aa07      	add	r2, sp, #28
 8001c46:	9200      	str	r2, [sp, #0]
 8001c48:	0021      	movs	r1, r4
 8001c4a:	003a      	movs	r2, r7
 8001c4c:	4b06      	ldr	r3, [pc, #24]	@ (8001c68 <_vfiprintf_r+0x234>)
 8001c4e:	9803      	ldr	r0, [sp, #12]
 8001c50:	f000 f87c 	bl	8001d4c <_printf_i>
 8001c54:	e7e3      	b.n	8001c1e <_vfiprintf_r+0x1ea>
 8001c56:	46c0      	nop			@ (mov r8, r8)
 8001c58:	08002270 	.word	0x08002270
 8001c5c:	08002276 	.word	0x08002276
 8001c60:	0800227a 	.word	0x0800227a
 8001c64:	00000000 	.word	0x00000000
 8001c68:	08001a0f 	.word	0x08001a0f

08001c6c <_printf_common>:
 8001c6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001c6e:	0016      	movs	r6, r2
 8001c70:	9301      	str	r3, [sp, #4]
 8001c72:	688a      	ldr	r2, [r1, #8]
 8001c74:	690b      	ldr	r3, [r1, #16]
 8001c76:	000c      	movs	r4, r1
 8001c78:	9000      	str	r0, [sp, #0]
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	da00      	bge.n	8001c80 <_printf_common+0x14>
 8001c7e:	0013      	movs	r3, r2
 8001c80:	0022      	movs	r2, r4
 8001c82:	6033      	str	r3, [r6, #0]
 8001c84:	3243      	adds	r2, #67	@ 0x43
 8001c86:	7812      	ldrb	r2, [r2, #0]
 8001c88:	2a00      	cmp	r2, #0
 8001c8a:	d001      	beq.n	8001c90 <_printf_common+0x24>
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	6033      	str	r3, [r6, #0]
 8001c90:	6823      	ldr	r3, [r4, #0]
 8001c92:	069b      	lsls	r3, r3, #26
 8001c94:	d502      	bpl.n	8001c9c <_printf_common+0x30>
 8001c96:	6833      	ldr	r3, [r6, #0]
 8001c98:	3302      	adds	r3, #2
 8001c9a:	6033      	str	r3, [r6, #0]
 8001c9c:	6822      	ldr	r2, [r4, #0]
 8001c9e:	2306      	movs	r3, #6
 8001ca0:	0015      	movs	r5, r2
 8001ca2:	401d      	ands	r5, r3
 8001ca4:	421a      	tst	r2, r3
 8001ca6:	d027      	beq.n	8001cf8 <_printf_common+0x8c>
 8001ca8:	0023      	movs	r3, r4
 8001caa:	3343      	adds	r3, #67	@ 0x43
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	1e5a      	subs	r2, r3, #1
 8001cb0:	4193      	sbcs	r3, r2
 8001cb2:	6822      	ldr	r2, [r4, #0]
 8001cb4:	0692      	lsls	r2, r2, #26
 8001cb6:	d430      	bmi.n	8001d1a <_printf_common+0xae>
 8001cb8:	0022      	movs	r2, r4
 8001cba:	9901      	ldr	r1, [sp, #4]
 8001cbc:	9800      	ldr	r0, [sp, #0]
 8001cbe:	9d08      	ldr	r5, [sp, #32]
 8001cc0:	3243      	adds	r2, #67	@ 0x43
 8001cc2:	47a8      	blx	r5
 8001cc4:	3001      	adds	r0, #1
 8001cc6:	d025      	beq.n	8001d14 <_printf_common+0xa8>
 8001cc8:	2206      	movs	r2, #6
 8001cca:	6823      	ldr	r3, [r4, #0]
 8001ccc:	2500      	movs	r5, #0
 8001cce:	4013      	ands	r3, r2
 8001cd0:	2b04      	cmp	r3, #4
 8001cd2:	d105      	bne.n	8001ce0 <_printf_common+0x74>
 8001cd4:	6833      	ldr	r3, [r6, #0]
 8001cd6:	68e5      	ldr	r5, [r4, #12]
 8001cd8:	1aed      	subs	r5, r5, r3
 8001cda:	43eb      	mvns	r3, r5
 8001cdc:	17db      	asrs	r3, r3, #31
 8001cde:	401d      	ands	r5, r3
 8001ce0:	68a3      	ldr	r3, [r4, #8]
 8001ce2:	6922      	ldr	r2, [r4, #16]
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	dd01      	ble.n	8001cec <_printf_common+0x80>
 8001ce8:	1a9b      	subs	r3, r3, r2
 8001cea:	18ed      	adds	r5, r5, r3
 8001cec:	2600      	movs	r6, #0
 8001cee:	42b5      	cmp	r5, r6
 8001cf0:	d120      	bne.n	8001d34 <_printf_common+0xc8>
 8001cf2:	2000      	movs	r0, #0
 8001cf4:	e010      	b.n	8001d18 <_printf_common+0xac>
 8001cf6:	3501      	adds	r5, #1
 8001cf8:	68e3      	ldr	r3, [r4, #12]
 8001cfa:	6832      	ldr	r2, [r6, #0]
 8001cfc:	1a9b      	subs	r3, r3, r2
 8001cfe:	42ab      	cmp	r3, r5
 8001d00:	ddd2      	ble.n	8001ca8 <_printf_common+0x3c>
 8001d02:	0022      	movs	r2, r4
 8001d04:	2301      	movs	r3, #1
 8001d06:	9901      	ldr	r1, [sp, #4]
 8001d08:	9800      	ldr	r0, [sp, #0]
 8001d0a:	9f08      	ldr	r7, [sp, #32]
 8001d0c:	3219      	adds	r2, #25
 8001d0e:	47b8      	blx	r7
 8001d10:	3001      	adds	r0, #1
 8001d12:	d1f0      	bne.n	8001cf6 <_printf_common+0x8a>
 8001d14:	2001      	movs	r0, #1
 8001d16:	4240      	negs	r0, r0
 8001d18:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001d1a:	2030      	movs	r0, #48	@ 0x30
 8001d1c:	18e1      	adds	r1, r4, r3
 8001d1e:	3143      	adds	r1, #67	@ 0x43
 8001d20:	7008      	strb	r0, [r1, #0]
 8001d22:	0021      	movs	r1, r4
 8001d24:	1c5a      	adds	r2, r3, #1
 8001d26:	3145      	adds	r1, #69	@ 0x45
 8001d28:	7809      	ldrb	r1, [r1, #0]
 8001d2a:	18a2      	adds	r2, r4, r2
 8001d2c:	3243      	adds	r2, #67	@ 0x43
 8001d2e:	3302      	adds	r3, #2
 8001d30:	7011      	strb	r1, [r2, #0]
 8001d32:	e7c1      	b.n	8001cb8 <_printf_common+0x4c>
 8001d34:	0022      	movs	r2, r4
 8001d36:	2301      	movs	r3, #1
 8001d38:	9901      	ldr	r1, [sp, #4]
 8001d3a:	9800      	ldr	r0, [sp, #0]
 8001d3c:	9f08      	ldr	r7, [sp, #32]
 8001d3e:	321a      	adds	r2, #26
 8001d40:	47b8      	blx	r7
 8001d42:	3001      	adds	r0, #1
 8001d44:	d0e6      	beq.n	8001d14 <_printf_common+0xa8>
 8001d46:	3601      	adds	r6, #1
 8001d48:	e7d1      	b.n	8001cee <_printf_common+0x82>
	...

08001d4c <_printf_i>:
 8001d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d4e:	b08b      	sub	sp, #44	@ 0x2c
 8001d50:	9206      	str	r2, [sp, #24]
 8001d52:	000a      	movs	r2, r1
 8001d54:	3243      	adds	r2, #67	@ 0x43
 8001d56:	9307      	str	r3, [sp, #28]
 8001d58:	9005      	str	r0, [sp, #20]
 8001d5a:	9203      	str	r2, [sp, #12]
 8001d5c:	7e0a      	ldrb	r2, [r1, #24]
 8001d5e:	000c      	movs	r4, r1
 8001d60:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8001d62:	2a78      	cmp	r2, #120	@ 0x78
 8001d64:	d809      	bhi.n	8001d7a <_printf_i+0x2e>
 8001d66:	2a62      	cmp	r2, #98	@ 0x62
 8001d68:	d80b      	bhi.n	8001d82 <_printf_i+0x36>
 8001d6a:	2a00      	cmp	r2, #0
 8001d6c:	d100      	bne.n	8001d70 <_printf_i+0x24>
 8001d6e:	e0bc      	b.n	8001eea <_printf_i+0x19e>
 8001d70:	497b      	ldr	r1, [pc, #492]	@ (8001f60 <_printf_i+0x214>)
 8001d72:	9104      	str	r1, [sp, #16]
 8001d74:	2a58      	cmp	r2, #88	@ 0x58
 8001d76:	d100      	bne.n	8001d7a <_printf_i+0x2e>
 8001d78:	e090      	b.n	8001e9c <_printf_i+0x150>
 8001d7a:	0025      	movs	r5, r4
 8001d7c:	3542      	adds	r5, #66	@ 0x42
 8001d7e:	702a      	strb	r2, [r5, #0]
 8001d80:	e022      	b.n	8001dc8 <_printf_i+0x7c>
 8001d82:	0010      	movs	r0, r2
 8001d84:	3863      	subs	r0, #99	@ 0x63
 8001d86:	2815      	cmp	r0, #21
 8001d88:	d8f7      	bhi.n	8001d7a <_printf_i+0x2e>
 8001d8a:	f7fe f9bd 	bl	8000108 <__gnu_thumb1_case_shi>
 8001d8e:	0016      	.short	0x0016
 8001d90:	fff6001f 	.word	0xfff6001f
 8001d94:	fff6fff6 	.word	0xfff6fff6
 8001d98:	001ffff6 	.word	0x001ffff6
 8001d9c:	fff6fff6 	.word	0xfff6fff6
 8001da0:	fff6fff6 	.word	0xfff6fff6
 8001da4:	003600a1 	.word	0x003600a1
 8001da8:	fff60080 	.word	0xfff60080
 8001dac:	00b2fff6 	.word	0x00b2fff6
 8001db0:	0036fff6 	.word	0x0036fff6
 8001db4:	fff6fff6 	.word	0xfff6fff6
 8001db8:	0084      	.short	0x0084
 8001dba:	0025      	movs	r5, r4
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	3542      	adds	r5, #66	@ 0x42
 8001dc0:	1d11      	adds	r1, r2, #4
 8001dc2:	6019      	str	r1, [r3, #0]
 8001dc4:	6813      	ldr	r3, [r2, #0]
 8001dc6:	702b      	strb	r3, [r5, #0]
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e0a0      	b.n	8001f0e <_printf_i+0x1c2>
 8001dcc:	6818      	ldr	r0, [r3, #0]
 8001dce:	6809      	ldr	r1, [r1, #0]
 8001dd0:	1d02      	adds	r2, r0, #4
 8001dd2:	060d      	lsls	r5, r1, #24
 8001dd4:	d50b      	bpl.n	8001dee <_printf_i+0xa2>
 8001dd6:	6806      	ldr	r6, [r0, #0]
 8001dd8:	601a      	str	r2, [r3, #0]
 8001dda:	2e00      	cmp	r6, #0
 8001ddc:	da03      	bge.n	8001de6 <_printf_i+0x9a>
 8001dde:	232d      	movs	r3, #45	@ 0x2d
 8001de0:	9a03      	ldr	r2, [sp, #12]
 8001de2:	4276      	negs	r6, r6
 8001de4:	7013      	strb	r3, [r2, #0]
 8001de6:	4b5e      	ldr	r3, [pc, #376]	@ (8001f60 <_printf_i+0x214>)
 8001de8:	270a      	movs	r7, #10
 8001dea:	9304      	str	r3, [sp, #16]
 8001dec:	e018      	b.n	8001e20 <_printf_i+0xd4>
 8001dee:	6806      	ldr	r6, [r0, #0]
 8001df0:	601a      	str	r2, [r3, #0]
 8001df2:	0649      	lsls	r1, r1, #25
 8001df4:	d5f1      	bpl.n	8001dda <_printf_i+0x8e>
 8001df6:	b236      	sxth	r6, r6
 8001df8:	e7ef      	b.n	8001dda <_printf_i+0x8e>
 8001dfa:	6808      	ldr	r0, [r1, #0]
 8001dfc:	6819      	ldr	r1, [r3, #0]
 8001dfe:	c940      	ldmia	r1!, {r6}
 8001e00:	0605      	lsls	r5, r0, #24
 8001e02:	d402      	bmi.n	8001e0a <_printf_i+0xbe>
 8001e04:	0640      	lsls	r0, r0, #25
 8001e06:	d500      	bpl.n	8001e0a <_printf_i+0xbe>
 8001e08:	b2b6      	uxth	r6, r6
 8001e0a:	6019      	str	r1, [r3, #0]
 8001e0c:	4b54      	ldr	r3, [pc, #336]	@ (8001f60 <_printf_i+0x214>)
 8001e0e:	270a      	movs	r7, #10
 8001e10:	9304      	str	r3, [sp, #16]
 8001e12:	2a6f      	cmp	r2, #111	@ 0x6f
 8001e14:	d100      	bne.n	8001e18 <_printf_i+0xcc>
 8001e16:	3f02      	subs	r7, #2
 8001e18:	0023      	movs	r3, r4
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	3343      	adds	r3, #67	@ 0x43
 8001e1e:	701a      	strb	r2, [r3, #0]
 8001e20:	6863      	ldr	r3, [r4, #4]
 8001e22:	60a3      	str	r3, [r4, #8]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	db03      	blt.n	8001e30 <_printf_i+0xe4>
 8001e28:	2104      	movs	r1, #4
 8001e2a:	6822      	ldr	r2, [r4, #0]
 8001e2c:	438a      	bics	r2, r1
 8001e2e:	6022      	str	r2, [r4, #0]
 8001e30:	2e00      	cmp	r6, #0
 8001e32:	d102      	bne.n	8001e3a <_printf_i+0xee>
 8001e34:	9d03      	ldr	r5, [sp, #12]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d00c      	beq.n	8001e54 <_printf_i+0x108>
 8001e3a:	9d03      	ldr	r5, [sp, #12]
 8001e3c:	0030      	movs	r0, r6
 8001e3e:	0039      	movs	r1, r7
 8001e40:	f7fe f9f2 	bl	8000228 <__aeabi_uidivmod>
 8001e44:	9b04      	ldr	r3, [sp, #16]
 8001e46:	3d01      	subs	r5, #1
 8001e48:	5c5b      	ldrb	r3, [r3, r1]
 8001e4a:	702b      	strb	r3, [r5, #0]
 8001e4c:	0033      	movs	r3, r6
 8001e4e:	0006      	movs	r6, r0
 8001e50:	429f      	cmp	r7, r3
 8001e52:	d9f3      	bls.n	8001e3c <_printf_i+0xf0>
 8001e54:	2f08      	cmp	r7, #8
 8001e56:	d109      	bne.n	8001e6c <_printf_i+0x120>
 8001e58:	6823      	ldr	r3, [r4, #0]
 8001e5a:	07db      	lsls	r3, r3, #31
 8001e5c:	d506      	bpl.n	8001e6c <_printf_i+0x120>
 8001e5e:	6862      	ldr	r2, [r4, #4]
 8001e60:	6923      	ldr	r3, [r4, #16]
 8001e62:	429a      	cmp	r2, r3
 8001e64:	dc02      	bgt.n	8001e6c <_printf_i+0x120>
 8001e66:	2330      	movs	r3, #48	@ 0x30
 8001e68:	3d01      	subs	r5, #1
 8001e6a:	702b      	strb	r3, [r5, #0]
 8001e6c:	9b03      	ldr	r3, [sp, #12]
 8001e6e:	1b5b      	subs	r3, r3, r5
 8001e70:	6123      	str	r3, [r4, #16]
 8001e72:	9b07      	ldr	r3, [sp, #28]
 8001e74:	0021      	movs	r1, r4
 8001e76:	9300      	str	r3, [sp, #0]
 8001e78:	9805      	ldr	r0, [sp, #20]
 8001e7a:	9b06      	ldr	r3, [sp, #24]
 8001e7c:	aa09      	add	r2, sp, #36	@ 0x24
 8001e7e:	f7ff fef5 	bl	8001c6c <_printf_common>
 8001e82:	3001      	adds	r0, #1
 8001e84:	d148      	bne.n	8001f18 <_printf_i+0x1cc>
 8001e86:	2001      	movs	r0, #1
 8001e88:	4240      	negs	r0, r0
 8001e8a:	b00b      	add	sp, #44	@ 0x2c
 8001e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e8e:	2220      	movs	r2, #32
 8001e90:	6809      	ldr	r1, [r1, #0]
 8001e92:	430a      	orrs	r2, r1
 8001e94:	6022      	str	r2, [r4, #0]
 8001e96:	2278      	movs	r2, #120	@ 0x78
 8001e98:	4932      	ldr	r1, [pc, #200]	@ (8001f64 <_printf_i+0x218>)
 8001e9a:	9104      	str	r1, [sp, #16]
 8001e9c:	0021      	movs	r1, r4
 8001e9e:	3145      	adds	r1, #69	@ 0x45
 8001ea0:	700a      	strb	r2, [r1, #0]
 8001ea2:	6819      	ldr	r1, [r3, #0]
 8001ea4:	6822      	ldr	r2, [r4, #0]
 8001ea6:	c940      	ldmia	r1!, {r6}
 8001ea8:	0610      	lsls	r0, r2, #24
 8001eaa:	d402      	bmi.n	8001eb2 <_printf_i+0x166>
 8001eac:	0650      	lsls	r0, r2, #25
 8001eae:	d500      	bpl.n	8001eb2 <_printf_i+0x166>
 8001eb0:	b2b6      	uxth	r6, r6
 8001eb2:	6019      	str	r1, [r3, #0]
 8001eb4:	07d3      	lsls	r3, r2, #31
 8001eb6:	d502      	bpl.n	8001ebe <_printf_i+0x172>
 8001eb8:	2320      	movs	r3, #32
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	6023      	str	r3, [r4, #0]
 8001ebe:	2e00      	cmp	r6, #0
 8001ec0:	d001      	beq.n	8001ec6 <_printf_i+0x17a>
 8001ec2:	2710      	movs	r7, #16
 8001ec4:	e7a8      	b.n	8001e18 <_printf_i+0xcc>
 8001ec6:	2220      	movs	r2, #32
 8001ec8:	6823      	ldr	r3, [r4, #0]
 8001eca:	4393      	bics	r3, r2
 8001ecc:	6023      	str	r3, [r4, #0]
 8001ece:	e7f8      	b.n	8001ec2 <_printf_i+0x176>
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	680d      	ldr	r5, [r1, #0]
 8001ed4:	1d10      	adds	r0, r2, #4
 8001ed6:	6949      	ldr	r1, [r1, #20]
 8001ed8:	6018      	str	r0, [r3, #0]
 8001eda:	6813      	ldr	r3, [r2, #0]
 8001edc:	062e      	lsls	r6, r5, #24
 8001ede:	d501      	bpl.n	8001ee4 <_printf_i+0x198>
 8001ee0:	6019      	str	r1, [r3, #0]
 8001ee2:	e002      	b.n	8001eea <_printf_i+0x19e>
 8001ee4:	066d      	lsls	r5, r5, #25
 8001ee6:	d5fb      	bpl.n	8001ee0 <_printf_i+0x194>
 8001ee8:	8019      	strh	r1, [r3, #0]
 8001eea:	2300      	movs	r3, #0
 8001eec:	9d03      	ldr	r5, [sp, #12]
 8001eee:	6123      	str	r3, [r4, #16]
 8001ef0:	e7bf      	b.n	8001e72 <_printf_i+0x126>
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	1d11      	adds	r1, r2, #4
 8001ef6:	6019      	str	r1, [r3, #0]
 8001ef8:	6815      	ldr	r5, [r2, #0]
 8001efa:	2100      	movs	r1, #0
 8001efc:	0028      	movs	r0, r5
 8001efe:	6862      	ldr	r2, [r4, #4]
 8001f00:	f000 f986 	bl	8002210 <memchr>
 8001f04:	2800      	cmp	r0, #0
 8001f06:	d001      	beq.n	8001f0c <_printf_i+0x1c0>
 8001f08:	1b40      	subs	r0, r0, r5
 8001f0a:	6060      	str	r0, [r4, #4]
 8001f0c:	6863      	ldr	r3, [r4, #4]
 8001f0e:	6123      	str	r3, [r4, #16]
 8001f10:	2300      	movs	r3, #0
 8001f12:	9a03      	ldr	r2, [sp, #12]
 8001f14:	7013      	strb	r3, [r2, #0]
 8001f16:	e7ac      	b.n	8001e72 <_printf_i+0x126>
 8001f18:	002a      	movs	r2, r5
 8001f1a:	6923      	ldr	r3, [r4, #16]
 8001f1c:	9906      	ldr	r1, [sp, #24]
 8001f1e:	9805      	ldr	r0, [sp, #20]
 8001f20:	9d07      	ldr	r5, [sp, #28]
 8001f22:	47a8      	blx	r5
 8001f24:	3001      	adds	r0, #1
 8001f26:	d0ae      	beq.n	8001e86 <_printf_i+0x13a>
 8001f28:	6823      	ldr	r3, [r4, #0]
 8001f2a:	079b      	lsls	r3, r3, #30
 8001f2c:	d415      	bmi.n	8001f5a <_printf_i+0x20e>
 8001f2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001f30:	68e0      	ldr	r0, [r4, #12]
 8001f32:	4298      	cmp	r0, r3
 8001f34:	daa9      	bge.n	8001e8a <_printf_i+0x13e>
 8001f36:	0018      	movs	r0, r3
 8001f38:	e7a7      	b.n	8001e8a <_printf_i+0x13e>
 8001f3a:	0022      	movs	r2, r4
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	9906      	ldr	r1, [sp, #24]
 8001f40:	9805      	ldr	r0, [sp, #20]
 8001f42:	9e07      	ldr	r6, [sp, #28]
 8001f44:	3219      	adds	r2, #25
 8001f46:	47b0      	blx	r6
 8001f48:	3001      	adds	r0, #1
 8001f4a:	d09c      	beq.n	8001e86 <_printf_i+0x13a>
 8001f4c:	3501      	adds	r5, #1
 8001f4e:	68e3      	ldr	r3, [r4, #12]
 8001f50:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001f52:	1a9b      	subs	r3, r3, r2
 8001f54:	42ab      	cmp	r3, r5
 8001f56:	dcf0      	bgt.n	8001f3a <_printf_i+0x1ee>
 8001f58:	e7e9      	b.n	8001f2e <_printf_i+0x1e2>
 8001f5a:	2500      	movs	r5, #0
 8001f5c:	e7f7      	b.n	8001f4e <_printf_i+0x202>
 8001f5e:	46c0      	nop			@ (mov r8, r8)
 8001f60:	08002281 	.word	0x08002281
 8001f64:	08002292 	.word	0x08002292

08001f68 <__sflush_r>:
 8001f68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001f6a:	220c      	movs	r2, #12
 8001f6c:	5e8b      	ldrsh	r3, [r1, r2]
 8001f6e:	0005      	movs	r5, r0
 8001f70:	000c      	movs	r4, r1
 8001f72:	071a      	lsls	r2, r3, #28
 8001f74:	d456      	bmi.n	8002024 <__sflush_r+0xbc>
 8001f76:	684a      	ldr	r2, [r1, #4]
 8001f78:	2a00      	cmp	r2, #0
 8001f7a:	dc02      	bgt.n	8001f82 <__sflush_r+0x1a>
 8001f7c:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8001f7e:	2a00      	cmp	r2, #0
 8001f80:	dd4e      	ble.n	8002020 <__sflush_r+0xb8>
 8001f82:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8001f84:	2f00      	cmp	r7, #0
 8001f86:	d04b      	beq.n	8002020 <__sflush_r+0xb8>
 8001f88:	2200      	movs	r2, #0
 8001f8a:	2080      	movs	r0, #128	@ 0x80
 8001f8c:	682e      	ldr	r6, [r5, #0]
 8001f8e:	602a      	str	r2, [r5, #0]
 8001f90:	001a      	movs	r2, r3
 8001f92:	0140      	lsls	r0, r0, #5
 8001f94:	6a21      	ldr	r1, [r4, #32]
 8001f96:	4002      	ands	r2, r0
 8001f98:	4203      	tst	r3, r0
 8001f9a:	d033      	beq.n	8002004 <__sflush_r+0x9c>
 8001f9c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001f9e:	89a3      	ldrh	r3, [r4, #12]
 8001fa0:	075b      	lsls	r3, r3, #29
 8001fa2:	d506      	bpl.n	8001fb2 <__sflush_r+0x4a>
 8001fa4:	6863      	ldr	r3, [r4, #4]
 8001fa6:	1ad2      	subs	r2, r2, r3
 8001fa8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <__sflush_r+0x4a>
 8001fae:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001fb0:	1ad2      	subs	r2, r2, r3
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	0028      	movs	r0, r5
 8001fb6:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8001fb8:	6a21      	ldr	r1, [r4, #32]
 8001fba:	47b8      	blx	r7
 8001fbc:	89a2      	ldrh	r2, [r4, #12]
 8001fbe:	1c43      	adds	r3, r0, #1
 8001fc0:	d106      	bne.n	8001fd0 <__sflush_r+0x68>
 8001fc2:	6829      	ldr	r1, [r5, #0]
 8001fc4:	291d      	cmp	r1, #29
 8001fc6:	d846      	bhi.n	8002056 <__sflush_r+0xee>
 8001fc8:	4b29      	ldr	r3, [pc, #164]	@ (8002070 <__sflush_r+0x108>)
 8001fca:	410b      	asrs	r3, r1
 8001fcc:	07db      	lsls	r3, r3, #31
 8001fce:	d442      	bmi.n	8002056 <__sflush_r+0xee>
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	6063      	str	r3, [r4, #4]
 8001fd4:	6923      	ldr	r3, [r4, #16]
 8001fd6:	6023      	str	r3, [r4, #0]
 8001fd8:	04d2      	lsls	r2, r2, #19
 8001fda:	d505      	bpl.n	8001fe8 <__sflush_r+0x80>
 8001fdc:	1c43      	adds	r3, r0, #1
 8001fde:	d102      	bne.n	8001fe6 <__sflush_r+0x7e>
 8001fe0:	682b      	ldr	r3, [r5, #0]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d100      	bne.n	8001fe8 <__sflush_r+0x80>
 8001fe6:	6560      	str	r0, [r4, #84]	@ 0x54
 8001fe8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001fea:	602e      	str	r6, [r5, #0]
 8001fec:	2900      	cmp	r1, #0
 8001fee:	d017      	beq.n	8002020 <__sflush_r+0xb8>
 8001ff0:	0023      	movs	r3, r4
 8001ff2:	3344      	adds	r3, #68	@ 0x44
 8001ff4:	4299      	cmp	r1, r3
 8001ff6:	d002      	beq.n	8001ffe <__sflush_r+0x96>
 8001ff8:	0028      	movs	r0, r5
 8001ffa:	f7ff fbed 	bl	80017d8 <_free_r>
 8001ffe:	2300      	movs	r3, #0
 8002000:	6363      	str	r3, [r4, #52]	@ 0x34
 8002002:	e00d      	b.n	8002020 <__sflush_r+0xb8>
 8002004:	2301      	movs	r3, #1
 8002006:	0028      	movs	r0, r5
 8002008:	47b8      	blx	r7
 800200a:	0002      	movs	r2, r0
 800200c:	1c43      	adds	r3, r0, #1
 800200e:	d1c6      	bne.n	8001f9e <__sflush_r+0x36>
 8002010:	682b      	ldr	r3, [r5, #0]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d0c3      	beq.n	8001f9e <__sflush_r+0x36>
 8002016:	2b1d      	cmp	r3, #29
 8002018:	d001      	beq.n	800201e <__sflush_r+0xb6>
 800201a:	2b16      	cmp	r3, #22
 800201c:	d11a      	bne.n	8002054 <__sflush_r+0xec>
 800201e:	602e      	str	r6, [r5, #0]
 8002020:	2000      	movs	r0, #0
 8002022:	e01e      	b.n	8002062 <__sflush_r+0xfa>
 8002024:	690e      	ldr	r6, [r1, #16]
 8002026:	2e00      	cmp	r6, #0
 8002028:	d0fa      	beq.n	8002020 <__sflush_r+0xb8>
 800202a:	680f      	ldr	r7, [r1, #0]
 800202c:	600e      	str	r6, [r1, #0]
 800202e:	1bba      	subs	r2, r7, r6
 8002030:	9201      	str	r2, [sp, #4]
 8002032:	2200      	movs	r2, #0
 8002034:	079b      	lsls	r3, r3, #30
 8002036:	d100      	bne.n	800203a <__sflush_r+0xd2>
 8002038:	694a      	ldr	r2, [r1, #20]
 800203a:	60a2      	str	r2, [r4, #8]
 800203c:	9b01      	ldr	r3, [sp, #4]
 800203e:	2b00      	cmp	r3, #0
 8002040:	ddee      	ble.n	8002020 <__sflush_r+0xb8>
 8002042:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002044:	0032      	movs	r2, r6
 8002046:	001f      	movs	r7, r3
 8002048:	0028      	movs	r0, r5
 800204a:	9b01      	ldr	r3, [sp, #4]
 800204c:	6a21      	ldr	r1, [r4, #32]
 800204e:	47b8      	blx	r7
 8002050:	2800      	cmp	r0, #0
 8002052:	dc07      	bgt.n	8002064 <__sflush_r+0xfc>
 8002054:	89a2      	ldrh	r2, [r4, #12]
 8002056:	2340      	movs	r3, #64	@ 0x40
 8002058:	2001      	movs	r0, #1
 800205a:	4313      	orrs	r3, r2
 800205c:	b21b      	sxth	r3, r3
 800205e:	81a3      	strh	r3, [r4, #12]
 8002060:	4240      	negs	r0, r0
 8002062:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002064:	9b01      	ldr	r3, [sp, #4]
 8002066:	1836      	adds	r6, r6, r0
 8002068:	1a1b      	subs	r3, r3, r0
 800206a:	9301      	str	r3, [sp, #4]
 800206c:	e7e6      	b.n	800203c <__sflush_r+0xd4>
 800206e:	46c0      	nop			@ (mov r8, r8)
 8002070:	dfbffffe 	.word	0xdfbffffe

08002074 <_fflush_r>:
 8002074:	690b      	ldr	r3, [r1, #16]
 8002076:	b570      	push	{r4, r5, r6, lr}
 8002078:	0005      	movs	r5, r0
 800207a:	000c      	movs	r4, r1
 800207c:	2b00      	cmp	r3, #0
 800207e:	d102      	bne.n	8002086 <_fflush_r+0x12>
 8002080:	2500      	movs	r5, #0
 8002082:	0028      	movs	r0, r5
 8002084:	bd70      	pop	{r4, r5, r6, pc}
 8002086:	2800      	cmp	r0, #0
 8002088:	d004      	beq.n	8002094 <_fflush_r+0x20>
 800208a:	6a03      	ldr	r3, [r0, #32]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d101      	bne.n	8002094 <_fflush_r+0x20>
 8002090:	f7ff f8ce 	bl	8001230 <__sinit>
 8002094:	220c      	movs	r2, #12
 8002096:	5ea3      	ldrsh	r3, [r4, r2]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d0f1      	beq.n	8002080 <_fflush_r+0xc>
 800209c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800209e:	07d2      	lsls	r2, r2, #31
 80020a0:	d404      	bmi.n	80020ac <_fflush_r+0x38>
 80020a2:	059b      	lsls	r3, r3, #22
 80020a4:	d402      	bmi.n	80020ac <_fflush_r+0x38>
 80020a6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80020a8:	f7ff fb93 	bl	80017d2 <__retarget_lock_acquire_recursive>
 80020ac:	0028      	movs	r0, r5
 80020ae:	0021      	movs	r1, r4
 80020b0:	f7ff ff5a 	bl	8001f68 <__sflush_r>
 80020b4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80020b6:	0005      	movs	r5, r0
 80020b8:	07db      	lsls	r3, r3, #31
 80020ba:	d4e2      	bmi.n	8002082 <_fflush_r+0xe>
 80020bc:	89a3      	ldrh	r3, [r4, #12]
 80020be:	059b      	lsls	r3, r3, #22
 80020c0:	d4df      	bmi.n	8002082 <_fflush_r+0xe>
 80020c2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80020c4:	f7ff fb86 	bl	80017d4 <__retarget_lock_release_recursive>
 80020c8:	e7db      	b.n	8002082 <_fflush_r+0xe>
	...

080020cc <__swhatbuf_r>:
 80020cc:	b570      	push	{r4, r5, r6, lr}
 80020ce:	000e      	movs	r6, r1
 80020d0:	001d      	movs	r5, r3
 80020d2:	230e      	movs	r3, #14
 80020d4:	5ec9      	ldrsh	r1, [r1, r3]
 80020d6:	0014      	movs	r4, r2
 80020d8:	b096      	sub	sp, #88	@ 0x58
 80020da:	2900      	cmp	r1, #0
 80020dc:	da0c      	bge.n	80020f8 <__swhatbuf_r+0x2c>
 80020de:	89b2      	ldrh	r2, [r6, #12]
 80020e0:	2380      	movs	r3, #128	@ 0x80
 80020e2:	0011      	movs	r1, r2
 80020e4:	4019      	ands	r1, r3
 80020e6:	421a      	tst	r2, r3
 80020e8:	d114      	bne.n	8002114 <__swhatbuf_r+0x48>
 80020ea:	2380      	movs	r3, #128	@ 0x80
 80020ec:	00db      	lsls	r3, r3, #3
 80020ee:	2000      	movs	r0, #0
 80020f0:	6029      	str	r1, [r5, #0]
 80020f2:	6023      	str	r3, [r4, #0]
 80020f4:	b016      	add	sp, #88	@ 0x58
 80020f6:	bd70      	pop	{r4, r5, r6, pc}
 80020f8:	466a      	mov	r2, sp
 80020fa:	f000 f853 	bl	80021a4 <_fstat_r>
 80020fe:	2800      	cmp	r0, #0
 8002100:	dbed      	blt.n	80020de <__swhatbuf_r+0x12>
 8002102:	23f0      	movs	r3, #240	@ 0xf0
 8002104:	9901      	ldr	r1, [sp, #4]
 8002106:	021b      	lsls	r3, r3, #8
 8002108:	4019      	ands	r1, r3
 800210a:	4b04      	ldr	r3, [pc, #16]	@ (800211c <__swhatbuf_r+0x50>)
 800210c:	18c9      	adds	r1, r1, r3
 800210e:	424b      	negs	r3, r1
 8002110:	4159      	adcs	r1, r3
 8002112:	e7ea      	b.n	80020ea <__swhatbuf_r+0x1e>
 8002114:	2100      	movs	r1, #0
 8002116:	2340      	movs	r3, #64	@ 0x40
 8002118:	e7e9      	b.n	80020ee <__swhatbuf_r+0x22>
 800211a:	46c0      	nop			@ (mov r8, r8)
 800211c:	ffffe000 	.word	0xffffe000

08002120 <__smakebuf_r>:
 8002120:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002122:	2602      	movs	r6, #2
 8002124:	898b      	ldrh	r3, [r1, #12]
 8002126:	0005      	movs	r5, r0
 8002128:	000c      	movs	r4, r1
 800212a:	b085      	sub	sp, #20
 800212c:	4233      	tst	r3, r6
 800212e:	d007      	beq.n	8002140 <__smakebuf_r+0x20>
 8002130:	0023      	movs	r3, r4
 8002132:	3347      	adds	r3, #71	@ 0x47
 8002134:	6023      	str	r3, [r4, #0]
 8002136:	6123      	str	r3, [r4, #16]
 8002138:	2301      	movs	r3, #1
 800213a:	6163      	str	r3, [r4, #20]
 800213c:	b005      	add	sp, #20
 800213e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002140:	ab03      	add	r3, sp, #12
 8002142:	aa02      	add	r2, sp, #8
 8002144:	f7ff ffc2 	bl	80020cc <__swhatbuf_r>
 8002148:	9f02      	ldr	r7, [sp, #8]
 800214a:	9001      	str	r0, [sp, #4]
 800214c:	0039      	movs	r1, r7
 800214e:	0028      	movs	r0, r5
 8002150:	f7ff fbb8 	bl	80018c4 <_malloc_r>
 8002154:	2800      	cmp	r0, #0
 8002156:	d108      	bne.n	800216a <__smakebuf_r+0x4a>
 8002158:	220c      	movs	r2, #12
 800215a:	5ea3      	ldrsh	r3, [r4, r2]
 800215c:	059a      	lsls	r2, r3, #22
 800215e:	d4ed      	bmi.n	800213c <__smakebuf_r+0x1c>
 8002160:	2203      	movs	r2, #3
 8002162:	4393      	bics	r3, r2
 8002164:	431e      	orrs	r6, r3
 8002166:	81a6      	strh	r6, [r4, #12]
 8002168:	e7e2      	b.n	8002130 <__smakebuf_r+0x10>
 800216a:	2380      	movs	r3, #128	@ 0x80
 800216c:	89a2      	ldrh	r2, [r4, #12]
 800216e:	6020      	str	r0, [r4, #0]
 8002170:	4313      	orrs	r3, r2
 8002172:	81a3      	strh	r3, [r4, #12]
 8002174:	9b03      	ldr	r3, [sp, #12]
 8002176:	6120      	str	r0, [r4, #16]
 8002178:	6167      	str	r7, [r4, #20]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d00c      	beq.n	8002198 <__smakebuf_r+0x78>
 800217e:	0028      	movs	r0, r5
 8002180:	230e      	movs	r3, #14
 8002182:	5ee1      	ldrsh	r1, [r4, r3]
 8002184:	f000 f820 	bl	80021c8 <_isatty_r>
 8002188:	2800      	cmp	r0, #0
 800218a:	d005      	beq.n	8002198 <__smakebuf_r+0x78>
 800218c:	2303      	movs	r3, #3
 800218e:	89a2      	ldrh	r2, [r4, #12]
 8002190:	439a      	bics	r2, r3
 8002192:	3b02      	subs	r3, #2
 8002194:	4313      	orrs	r3, r2
 8002196:	81a3      	strh	r3, [r4, #12]
 8002198:	89a3      	ldrh	r3, [r4, #12]
 800219a:	9a01      	ldr	r2, [sp, #4]
 800219c:	4313      	orrs	r3, r2
 800219e:	81a3      	strh	r3, [r4, #12]
 80021a0:	e7cc      	b.n	800213c <__smakebuf_r+0x1c>
	...

080021a4 <_fstat_r>:
 80021a4:	2300      	movs	r3, #0
 80021a6:	b570      	push	{r4, r5, r6, lr}
 80021a8:	4d06      	ldr	r5, [pc, #24]	@ (80021c4 <_fstat_r+0x20>)
 80021aa:	0004      	movs	r4, r0
 80021ac:	0008      	movs	r0, r1
 80021ae:	0011      	movs	r1, r2
 80021b0:	602b      	str	r3, [r5, #0]
 80021b2:	f7fe fbf4 	bl	800099e <_fstat>
 80021b6:	1c43      	adds	r3, r0, #1
 80021b8:	d103      	bne.n	80021c2 <_fstat_r+0x1e>
 80021ba:	682b      	ldr	r3, [r5, #0]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d000      	beq.n	80021c2 <_fstat_r+0x1e>
 80021c0:	6023      	str	r3, [r4, #0]
 80021c2:	bd70      	pop	{r4, r5, r6, pc}
 80021c4:	200012d8 	.word	0x200012d8

080021c8 <_isatty_r>:
 80021c8:	2300      	movs	r3, #0
 80021ca:	b570      	push	{r4, r5, r6, lr}
 80021cc:	4d06      	ldr	r5, [pc, #24]	@ (80021e8 <_isatty_r+0x20>)
 80021ce:	0004      	movs	r4, r0
 80021d0:	0008      	movs	r0, r1
 80021d2:	602b      	str	r3, [r5, #0]
 80021d4:	f7fe fbf1 	bl	80009ba <_isatty>
 80021d8:	1c43      	adds	r3, r0, #1
 80021da:	d103      	bne.n	80021e4 <_isatty_r+0x1c>
 80021dc:	682b      	ldr	r3, [r5, #0]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d000      	beq.n	80021e4 <_isatty_r+0x1c>
 80021e2:	6023      	str	r3, [r4, #0]
 80021e4:	bd70      	pop	{r4, r5, r6, pc}
 80021e6:	46c0      	nop			@ (mov r8, r8)
 80021e8:	200012d8 	.word	0x200012d8

080021ec <_sbrk_r>:
 80021ec:	2300      	movs	r3, #0
 80021ee:	b570      	push	{r4, r5, r6, lr}
 80021f0:	4d06      	ldr	r5, [pc, #24]	@ (800220c <_sbrk_r+0x20>)
 80021f2:	0004      	movs	r4, r0
 80021f4:	0008      	movs	r0, r1
 80021f6:	602b      	str	r3, [r5, #0]
 80021f8:	f7fe fbf4 	bl	80009e4 <_sbrk>
 80021fc:	1c43      	adds	r3, r0, #1
 80021fe:	d103      	bne.n	8002208 <_sbrk_r+0x1c>
 8002200:	682b      	ldr	r3, [r5, #0]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d000      	beq.n	8002208 <_sbrk_r+0x1c>
 8002206:	6023      	str	r3, [r4, #0]
 8002208:	bd70      	pop	{r4, r5, r6, pc}
 800220a:	46c0      	nop			@ (mov r8, r8)
 800220c:	200012d8 	.word	0x200012d8

08002210 <memchr>:
 8002210:	b2c9      	uxtb	r1, r1
 8002212:	1882      	adds	r2, r0, r2
 8002214:	4290      	cmp	r0, r2
 8002216:	d101      	bne.n	800221c <memchr+0xc>
 8002218:	2000      	movs	r0, #0
 800221a:	4770      	bx	lr
 800221c:	7803      	ldrb	r3, [r0, #0]
 800221e:	428b      	cmp	r3, r1
 8002220:	d0fb      	beq.n	800221a <memchr+0xa>
 8002222:	3001      	adds	r0, #1
 8002224:	e7f6      	b.n	8002214 <memchr+0x4>
	...

08002228 <_init>:
 8002228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800222a:	46c0      	nop			@ (mov r8, r8)
 800222c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800222e:	bc08      	pop	{r3}
 8002230:	469e      	mov	lr, r3
 8002232:	4770      	bx	lr

08002234 <_fini>:
 8002234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002236:	46c0      	nop			@ (mov r8, r8)
 8002238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800223a:	bc08      	pop	{r3}
 800223c:	469e      	mov	lr, r3
 800223e:	4770      	bx	lr
