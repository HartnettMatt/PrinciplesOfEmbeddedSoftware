
assignment6-serialio-HartnettMatt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e5c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000238  08002f1c  08002f1c  00003f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003154  08003154  00005060  2**0
                  CONTENTS
  4 .ARM          00000000  08003154  08003154  00005060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003154  08003154  00005060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003154  08003154  00004154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003158  08003158  00004158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800315c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000027c  20000060  080031bc  00005060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002dc  080031bc  000052dc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00005060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002719  00000000  00000000  00005088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000cf1  00000000  00000000  000077a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002a8  00000000  00000000  00008498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000001e0  00000000  00000000  00008740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014e00  00000000  00000000  00008920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003e93  00000000  00000000  0001d720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00069675  00000000  00000000  000215b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0008ac28  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001324  00000000  00000000  0008ac6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000090  00000000  00000000  0008bf90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000060 	.word	0x20000060
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002f04 	.word	0x08002f04

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000064 	.word	0x20000064
 8000104:	08002f04 	.word	0x08002f04

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <cbfifo_enqueue>:
#include "cbfifo.h"
#include <stddef.h>
#include <stdio.h>


size_t cbfifo_enqueue(cbfifo *cb, void *buf, size_t nbyte) {
 8000244:	b580      	push	{r7, lr}
 8000246:	b088      	sub	sp, #32
 8000248:	af00      	add	r7, sp, #0
 800024a:	60f8      	str	r0, [r7, #12]
 800024c:	60b9      	str	r1, [r7, #8]
 800024e:	607a      	str	r2, [r7, #4]
    // Error conditions
    if (buf == NULL || cb->is_full) {
 8000250:	68bb      	ldr	r3, [r7, #8]
 8000252:	2b00      	cmp	r3, #0
 8000254:	d004      	beq.n	8000260 <cbfifo_enqueue+0x1c>
 8000256:	68fb      	ldr	r3, [r7, #12]
 8000258:	2284      	movs	r2, #132	@ 0x84
 800025a:	589b      	ldr	r3, [r3, r2]
 800025c:	2b00      	cmp	r3, #0
 800025e:	d002      	beq.n	8000266 <cbfifo_enqueue+0x22>
        return (size_t)-1;
 8000260:	2301      	movs	r3, #1
 8000262:	425b      	negs	r3, r3
 8000264:	e03d      	b.n	80002e2 <cbfifo_enqueue+0x9e>
    }

    size_t available_space = BUFFER_SIZE - cbfifo_length(cb);
 8000266:	68fb      	ldr	r3, [r7, #12]
 8000268:	0018      	movs	r0, r3
 800026a:	f000 f886 	bl	800037a <cbfifo_length>
 800026e:	0003      	movs	r3, r0
 8000270:	2280      	movs	r2, #128	@ 0x80
 8000272:	1ad3      	subs	r3, r2, r3
 8000274:	617b      	str	r3, [r7, #20]
    size_t to_enqueue = nbyte;
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	61fb      	str	r3, [r7, #28]

    // Cap the enqueue length to the max available space
    if (to_enqueue > available_space) {
 800027a:	69fa      	ldr	r2, [r7, #28]
 800027c:	697b      	ldr	r3, [r7, #20]
 800027e:	429a      	cmp	r2, r3
 8000280:	d901      	bls.n	8000286 <cbfifo_enqueue+0x42>
        to_enqueue = available_space;
 8000282:	697b      	ldr	r3, [r7, #20]
 8000284:	61fb      	str	r3, [r7, #28]
    }

    // Loop through the buffer and add to FIFO at the head ptr
    for (size_t i = 0; i < to_enqueue; i++) {
 8000286:	2300      	movs	r3, #0
 8000288:	61bb      	str	r3, [r7, #24]
 800028a:	e016      	b.n	80002ba <cbfifo_enqueue+0x76>
        cb->fifo[cb->write] = ((uint8_t *)buf)[i];
 800028c:	68ba      	ldr	r2, [r7, #8]
 800028e:	69bb      	ldr	r3, [r7, #24]
 8000290:	18d3      	adds	r3, r2, r3
 8000292:	68fa      	ldr	r2, [r7, #12]
 8000294:	2180      	movs	r1, #128	@ 0x80
 8000296:	5c52      	ldrb	r2, [r2, r1]
 8000298:	7819      	ldrb	r1, [r3, #0]
 800029a:	68fb      	ldr	r3, [r7, #12]
 800029c:	5499      	strb	r1, [r3, r2]
        cb->write = (cb->write + 1) & (BUFFER_SIZE - 1); // Wrap around using bitwise AND
 800029e:	68fb      	ldr	r3, [r7, #12]
 80002a0:	2280      	movs	r2, #128	@ 0x80
 80002a2:	5c9b      	ldrb	r3, [r3, r2]
 80002a4:	3301      	adds	r3, #1
 80002a6:	b2db      	uxtb	r3, r3
 80002a8:	227f      	movs	r2, #127	@ 0x7f
 80002aa:	4013      	ands	r3, r2
 80002ac:	b2d9      	uxtb	r1, r3
 80002ae:	68fb      	ldr	r3, [r7, #12]
 80002b0:	2280      	movs	r2, #128	@ 0x80
 80002b2:	5499      	strb	r1, [r3, r2]
    for (size_t i = 0; i < to_enqueue; i++) {
 80002b4:	69bb      	ldr	r3, [r7, #24]
 80002b6:	3301      	adds	r3, #1
 80002b8:	61bb      	str	r3, [r7, #24]
 80002ba:	69ba      	ldr	r2, [r7, #24]
 80002bc:	69fb      	ldr	r3, [r7, #28]
 80002be:	429a      	cmp	r2, r3
 80002c0:	d3e4      	bcc.n	800028c <cbfifo_enqueue+0x48>
    }

    // If we had to cap, then the FIFO is full at this point
    if (to_enqueue > 0 && cb->read == cb->write) {
 80002c2:	69fb      	ldr	r3, [r7, #28]
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d00b      	beq.n	80002e0 <cbfifo_enqueue+0x9c>
 80002c8:	68fb      	ldr	r3, [r7, #12]
 80002ca:	2281      	movs	r2, #129	@ 0x81
 80002cc:	5c9a      	ldrb	r2, [r3, r2]
 80002ce:	68fb      	ldr	r3, [r7, #12]
 80002d0:	2180      	movs	r1, #128	@ 0x80
 80002d2:	5c5b      	ldrb	r3, [r3, r1]
 80002d4:	429a      	cmp	r2, r3
 80002d6:	d103      	bne.n	80002e0 <cbfifo_enqueue+0x9c>
        cb->is_full = 1;
 80002d8:	68fb      	ldr	r3, [r7, #12]
 80002da:	2284      	movs	r2, #132	@ 0x84
 80002dc:	2101      	movs	r1, #1
 80002de:	5099      	str	r1, [r3, r2]
    }
    return to_enqueue;
 80002e0:	69fb      	ldr	r3, [r7, #28]
}
 80002e2:	0018      	movs	r0, r3
 80002e4:	46bd      	mov	sp, r7
 80002e6:	b008      	add	sp, #32
 80002e8:	bd80      	pop	{r7, pc}

080002ea <cbfifo_dequeue>:

size_t cbfifo_dequeue(cbfifo *cb, void *buf, size_t nbyte) {
 80002ea:	b580      	push	{r7, lr}
 80002ec:	b088      	sub	sp, #32
 80002ee:	af00      	add	r7, sp, #0
 80002f0:	60f8      	str	r0, [r7, #12]
 80002f2:	60b9      	str	r1, [r7, #8]
 80002f4:	607a      	str	r2, [r7, #4]
    if (buf == NULL || nbyte == 0) {
 80002f6:	68bb      	ldr	r3, [r7, #8]
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d002      	beq.n	8000302 <cbfifo_dequeue+0x18>
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d102      	bne.n	8000308 <cbfifo_dequeue+0x1e>
        return (size_t)-1; // Return -1 if buffer is NULL
 8000302:	2301      	movs	r3, #1
 8000304:	425b      	negs	r3, r3
 8000306:	e034      	b.n	8000372 <cbfifo_dequeue+0x88>
    }
    size_t available_data = cbfifo_length(cb);
 8000308:	68fb      	ldr	r3, [r7, #12]
 800030a:	0018      	movs	r0, r3
 800030c:	f000 f835 	bl	800037a <cbfifo_length>
 8000310:	0003      	movs	r3, r0
 8000312:	617b      	str	r3, [r7, #20]
    size_t to_dequeue = nbyte;
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	61fb      	str	r3, [r7, #28]

    if (to_dequeue > available_data) {
 8000318:	69fa      	ldr	r2, [r7, #28]
 800031a:	697b      	ldr	r3, [r7, #20]
 800031c:	429a      	cmp	r2, r3
 800031e:	d901      	bls.n	8000324 <cbfifo_dequeue+0x3a>
        to_dequeue = available_data;
 8000320:	697b      	ldr	r3, [r7, #20]
 8000322:	61fb      	str	r3, [r7, #28]
    }

    for (size_t i = 0; i < to_dequeue; i++) {
 8000324:	2300      	movs	r3, #0
 8000326:	61bb      	str	r3, [r7, #24]
 8000328:	e017      	b.n	800035a <cbfifo_dequeue+0x70>
        ((uint8_t *)buf)[i] = cb->fifo[cb->read];
 800032a:	68fb      	ldr	r3, [r7, #12]
 800032c:	2281      	movs	r2, #129	@ 0x81
 800032e:	5c9b      	ldrb	r3, [r3, r2]
 8000330:	0019      	movs	r1, r3
 8000332:	68ba      	ldr	r2, [r7, #8]
 8000334:	69bb      	ldr	r3, [r7, #24]
 8000336:	18d3      	adds	r3, r2, r3
 8000338:	68fa      	ldr	r2, [r7, #12]
 800033a:	5c52      	ldrb	r2, [r2, r1]
 800033c:	701a      	strb	r2, [r3, #0]
        cb->read = (cb->read + 1) & (BUFFER_SIZE - 1); // Wrap around using bitwise AND
 800033e:	68fb      	ldr	r3, [r7, #12]
 8000340:	2281      	movs	r2, #129	@ 0x81
 8000342:	5c9b      	ldrb	r3, [r3, r2]
 8000344:	3301      	adds	r3, #1
 8000346:	b2db      	uxtb	r3, r3
 8000348:	227f      	movs	r2, #127	@ 0x7f
 800034a:	4013      	ands	r3, r2
 800034c:	b2d9      	uxtb	r1, r3
 800034e:	68fb      	ldr	r3, [r7, #12]
 8000350:	2281      	movs	r2, #129	@ 0x81
 8000352:	5499      	strb	r1, [r3, r2]
    for (size_t i = 0; i < to_dequeue; i++) {
 8000354:	69bb      	ldr	r3, [r7, #24]
 8000356:	3301      	adds	r3, #1
 8000358:	61bb      	str	r3, [r7, #24]
 800035a:	69ba      	ldr	r2, [r7, #24]
 800035c:	69fb      	ldr	r3, [r7, #28]
 800035e:	429a      	cmp	r2, r3
 8000360:	d3e3      	bcc.n	800032a <cbfifo_dequeue+0x40>
    }

    // If any bytes were removed, then the FIFO isn't full anymore
    if (to_dequeue > 0) {
 8000362:	69fb      	ldr	r3, [r7, #28]
 8000364:	2b00      	cmp	r3, #0
 8000366:	d003      	beq.n	8000370 <cbfifo_dequeue+0x86>
        cb->is_full = 0;
 8000368:	68fb      	ldr	r3, [r7, #12]
 800036a:	2284      	movs	r2, #132	@ 0x84
 800036c:	2100      	movs	r1, #0
 800036e:	5099      	str	r1, [r3, r2]
    }

    return to_dequeue;
 8000370:	69fb      	ldr	r3, [r7, #28]
}
 8000372:	0018      	movs	r0, r3
 8000374:	46bd      	mov	sp, r7
 8000376:	b008      	add	sp, #32
 8000378:	bd80      	pop	{r7, pc}

0800037a <cbfifo_length>:

    *byte = cb->fifo[cb->read];
    return cbfifo_length(cb);
}

size_t cbfifo_length(cbfifo *cb) {
 800037a:	b580      	push	{r7, lr}
 800037c:	b082      	sub	sp, #8
 800037e:	af00      	add	r7, sp, #0
 8000380:	6078      	str	r0, [r7, #4]
    // More reliable for changes in BUFFER_SIZE
    if (cb->is_full) {
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	2284      	movs	r2, #132	@ 0x84
 8000386:	589b      	ldr	r3, [r3, r2]
 8000388:	2b00      	cmp	r3, #0
 800038a:	d001      	beq.n	8000390 <cbfifo_length+0x16>
        // If the buffer is marked as full, return the maximum capacity
        return BUFFER_SIZE;
 800038c:	2380      	movs	r3, #128	@ 0x80
 800038e:	e01a      	b.n	80003c6 <cbfifo_length+0x4c>
    } else if (cb->write >= cb->read) {
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	2280      	movs	r2, #128	@ 0x80
 8000394:	5c9a      	ldrb	r2, [r3, r2]
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	2181      	movs	r1, #129	@ 0x81
 800039a:	5c5b      	ldrb	r3, [r3, r1]
 800039c:	429a      	cmp	r2, r3
 800039e:	d308      	bcc.n	80003b2 <cbfifo_length+0x38>
        // If write pointer is ahead or equal to read pointer, calculate length normally
        return cb->write - cb->read;
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	2280      	movs	r2, #128	@ 0x80
 80003a4:	5c9b      	ldrb	r3, [r3, r2]
 80003a6:	0019      	movs	r1, r3
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	2281      	movs	r2, #129	@ 0x81
 80003ac:	5c9b      	ldrb	r3, [r3, r2]
 80003ae:	1acb      	subs	r3, r1, r3
 80003b0:	e009      	b.n	80003c6 <cbfifo_length+0x4c>
    } else {
        // If write pointer has wrapped around, account for the circular structure
        return BUFFER_SIZE - (cb->read - cb->write);
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	2281      	movs	r2, #129	@ 0x81
 80003b6:	5c9b      	ldrb	r3, [r3, r2]
 80003b8:	0019      	movs	r1, r3
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	2280      	movs	r2, #128	@ 0x80
 80003be:	5c9b      	ldrb	r3, [r3, r2]
 80003c0:	1acb      	subs	r3, r1, r3
 80003c2:	2280      	movs	r2, #128	@ 0x80
 80003c4:	1ad3      	subs	r3, r2, r3
    }
}
 80003c6:	0018      	movs	r0, r3
 80003c8:	46bd      	mov	sp, r7
 80003ca:	b002      	add	sp, #8
 80003cc:	bd80      	pop	{r7, pc}

080003ce <cbfifo_capacity>:

size_t cbfifo_capacity(cbfifo *cb) {
 80003ce:	b580      	push	{r7, lr}
 80003d0:	b082      	sub	sp, #8
 80003d2:	af00      	add	r7, sp, #0
 80003d4:	6078      	str	r0, [r7, #4]
    // Capacity is statically set to BUFFER_SIZE
    return BUFFER_SIZE;
 80003d6:	2380      	movs	r3, #128	@ 0x80
}
 80003d8:	0018      	movs	r0, r3
 80003da:	46bd      	mov	sp, r7
 80003dc:	b002      	add	sp, #8
 80003de:	bd80      	pop	{r7, pc}

080003e0 <hexdump>:
#include "hexdump.h"
#include <stddef.h>
#include <stdint.h>

char *hexdump(char *str, size_t size, const void *loc, size_t nbytes) {
 80003e0:	b5b0      	push	{r4, r5, r7, lr}
 80003e2:	b08e      	sub	sp, #56	@ 0x38
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	60f8      	str	r0, [r7, #12]
 80003e8:	60b9      	str	r1, [r7, #8]
 80003ea:	607a      	str	r2, [r7, #4]
 80003ec:	603b      	str	r3, [r7, #0]
    if (nbytes > NBYTES_MAXSIZE) {
 80003ee:	683a      	ldr	r2, [r7, #0]
 80003f0:	2380      	movs	r3, #128	@ 0x80
 80003f2:	025b      	lsls	r3, r3, #9
 80003f4:	429a      	cmp	r2, r3
 80003f6:	d304      	bcc.n	8000402 <hexdump+0x22>
        *str = '\0';
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	2200      	movs	r2, #0
 80003fc:	701a      	strb	r2, [r3, #0]
        return str;
 80003fe:	68fb      	ldr	r3, [r7, #12]
 8000400:	e0a1      	b.n	8000546 <hexdump+0x166>
    }
    if (size == 0) {
 8000402:	68bb      	ldr	r3, [r7, #8]
 8000404:	2b00      	cmp	r3, #0
 8000406:	d101      	bne.n	800040c <hexdump+0x2c>
        return str;
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	e09c      	b.n	8000546 <hexdump+0x166>
    }

    // Define the characters used for hexadecimal representation.
    const char hex_chars[] = "0123456789ABCDEF";
 800040c:	2310      	movs	r3, #16
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	4a4f      	ldr	r2, [pc, #316]	@ (8000550 <hexdump+0x170>)
 8000412:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000414:	c313      	stmia	r3!, {r0, r1, r4}
 8000416:	6811      	ldr	r1, [r2, #0]
 8000418:	6019      	str	r1, [r3, #0]
 800041a:	7912      	ldrb	r2, [r2, #4]
 800041c:	711a      	strb	r2, [r3, #4]
    // Create a pointer to the memory location.
    const unsigned char *mem = (const unsigned char *)loc;
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	62bb      	str	r3, [r7, #40]	@ 0x28

    // Index for memory bytes
    uint32_t i = 0;
 8000422:	2300      	movs	r3, #0
 8000424:	637b      	str	r3, [r7, #52]	@ 0x34
    // Index for output string
    uint32_t o = 0;
 8000426:	2300      	movs	r3, #0
 8000428:	633b      	str	r3, [r7, #48]	@ 0x30

    while (i < nbytes) {
 800042a:	e081      	b.n	8000530 <hexdump+0x150>
        if ((i & 0b111) == 0) { // If i is divisible by 8
 800042c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800042e:	2207      	movs	r2, #7
 8000430:	4013      	ands	r3, r2
 8000432:	d147      	bne.n	80004c4 <hexdump+0xe4>
            // Create a readable integer type for the memory location
            uintptr_t address = (uintptr_t)(loc + i);
 8000434:	687a      	ldr	r2, [r7, #4]
 8000436:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000438:	18d3      	adds	r3, r2, r3
 800043a:	627b      	str	r3, [r7, #36]	@ 0x24
            // Add memory address location to str
            if (i != 0) {
 800043c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800043e:	2b00      	cmp	r3, #0
 8000440:	d00f      	beq.n	8000462 <hexdump+0x82>
                // Add newline if this isn't the first line
                // Added carriage return to look nicer in serial output for serialio
                str[o] = '\r';
 8000442:	68fa      	ldr	r2, [r7, #12]
 8000444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000446:	18d3      	adds	r3, r2, r3
 8000448:	220d      	movs	r2, #13
 800044a:	701a      	strb	r2, [r3, #0]
                o++;
 800044c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800044e:	3301      	adds	r3, #1
 8000450:	633b      	str	r3, [r7, #48]	@ 0x30
                str[o] = '\n';
 8000452:	68fa      	ldr	r2, [r7, #12]
 8000454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000456:	18d3      	adds	r3, r2, r3
 8000458:	220a      	movs	r2, #10
 800045a:	701a      	strb	r2, [r3, #0]
                o++;
 800045c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800045e:	3301      	adds	r3, #1
 8000460:	633b      	str	r3, [r7, #48]	@ 0x30
            }
            str[o] = '0';
 8000462:	68fa      	ldr	r2, [r7, #12]
 8000464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000466:	18d3      	adds	r3, r2, r3
 8000468:	2230      	movs	r2, #48	@ 0x30
 800046a:	701a      	strb	r2, [r3, #0]
            o++;
 800046c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800046e:	3301      	adds	r3, #1
 8000470:	633b      	str	r3, [r7, #48]	@ 0x30
            str[o] = 'x';
 8000472:	68fa      	ldr	r2, [r7, #12]
 8000474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000476:	18d3      	adds	r3, r2, r3
 8000478:	2278      	movs	r2, #120	@ 0x78
 800047a:	701a      	strb	r2, [r3, #0]
            o++;
 800047c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800047e:	3301      	adds	r3, #1
 8000480:	633b      	str	r3, [r7, #48]	@ 0x30
            // Add address itself
            for (int j = BUS_SIZE - 4; j >= 0; j -= 4) {
 8000482:	231c      	movs	r3, #28
 8000484:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000486:	e012      	b.n	80004ae <hexdump+0xce>
                str[o] = hex_chars[((address >> j) & 0xF)];
 8000488:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800048a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800048c:	40da      	lsrs	r2, r3
 800048e:	0013      	movs	r3, r2
 8000490:	220f      	movs	r2, #15
 8000492:	401a      	ands	r2, r3
 8000494:	68f9      	ldr	r1, [r7, #12]
 8000496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000498:	18cb      	adds	r3, r1, r3
 800049a:	2110      	movs	r1, #16
 800049c:	1879      	adds	r1, r7, r1
 800049e:	5c8a      	ldrb	r2, [r1, r2]
 80004a0:	701a      	strb	r2, [r3, #0]
                o++;
 80004a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80004a4:	3301      	adds	r3, #1
 80004a6:	633b      	str	r3, [r7, #48]	@ 0x30
            for (int j = BUS_SIZE - 4; j >= 0; j -= 4) {
 80004a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80004aa:	3b04      	subs	r3, #4
 80004ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80004ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	dae9      	bge.n	8000488 <hexdump+0xa8>
            }
            str[o] = ' ';
 80004b4:	68fa      	ldr	r2, [r7, #12]
 80004b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80004b8:	18d3      	adds	r3, r2, r3
 80004ba:	2220      	movs	r2, #32
 80004bc:	701a      	strb	r2, [r3, #0]
            o++;
 80004be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80004c0:	3301      	adds	r3, #1
 80004c2:	633b      	str	r3, [r7, #48]	@ 0x30
        }

        // Add a single byte to str
        unsigned char byte = mem[i]; // Get the byte from memory
 80004c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80004c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80004c8:	18d2      	adds	r2, r2, r3
 80004ca:	2023      	movs	r0, #35	@ 0x23
 80004cc:	183b      	adds	r3, r7, r0
 80004ce:	7812      	ldrb	r2, [r2, #0]
 80004d0:	701a      	strb	r2, [r3, #0]
        // Convert the high nibble (4 bits) to a hex character
        unsigned char high_nibble = (byte >> 4) & 0x0F;
 80004d2:	2122      	movs	r1, #34	@ 0x22
 80004d4:	187b      	adds	r3, r7, r1
 80004d6:	183a      	adds	r2, r7, r0
 80004d8:	7812      	ldrb	r2, [r2, #0]
 80004da:	0912      	lsrs	r2, r2, #4
 80004dc:	701a      	strb	r2, [r3, #0]
        str[o] = hex_chars[high_nibble];
 80004de:	187b      	adds	r3, r7, r1
 80004e0:	781a      	ldrb	r2, [r3, #0]
 80004e2:	68f9      	ldr	r1, [r7, #12]
 80004e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80004e6:	18cb      	adds	r3, r1, r3
 80004e8:	2410      	movs	r4, #16
 80004ea:	1939      	adds	r1, r7, r4
 80004ec:	5c8a      	ldrb	r2, [r1, r2]
 80004ee:	701a      	strb	r2, [r3, #0]
        o++;
 80004f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80004f2:	3301      	adds	r3, #1
 80004f4:	633b      	str	r3, [r7, #48]	@ 0x30
        // Convert the low nibble (4 bits) to a hex character
        unsigned char low_nibble = byte & 0x0F;
 80004f6:	2521      	movs	r5, #33	@ 0x21
 80004f8:	197b      	adds	r3, r7, r5
 80004fa:	183a      	adds	r2, r7, r0
 80004fc:	7812      	ldrb	r2, [r2, #0]
 80004fe:	210f      	movs	r1, #15
 8000500:	400a      	ands	r2, r1
 8000502:	701a      	strb	r2, [r3, #0]
        str[o] = hex_chars[low_nibble];
 8000504:	197b      	adds	r3, r7, r5
 8000506:	781a      	ldrb	r2, [r3, #0]
 8000508:	68f9      	ldr	r1, [r7, #12]
 800050a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800050c:	18cb      	adds	r3, r1, r3
 800050e:	1939      	adds	r1, r7, r4
 8000510:	5c8a      	ldrb	r2, [r1, r2]
 8000512:	701a      	strb	r2, [r3, #0]
        o++;
 8000514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000516:	3301      	adds	r3, #1
 8000518:	633b      	str	r3, [r7, #48]	@ 0x30
        str[o] = ' ';
 800051a:	68fa      	ldr	r2, [r7, #12]
 800051c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800051e:	18d3      	adds	r3, r2, r3
 8000520:	2220      	movs	r2, #32
 8000522:	701a      	strb	r2, [r3, #0]
        o++;
 8000524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000526:	3301      	adds	r3, #1
 8000528:	633b      	str	r3, [r7, #48]	@ 0x30

        // Increment to the next memory address
        i++;
 800052a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800052c:	3301      	adds	r3, #1
 800052e:	637b      	str	r3, [r7, #52]	@ 0x34
    while (i < nbytes) {
 8000530:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000532:	683b      	ldr	r3, [r7, #0]
 8000534:	429a      	cmp	r2, r3
 8000536:	d200      	bcs.n	800053a <hexdump+0x15a>
 8000538:	e778      	b.n	800042c <hexdump+0x4c>
    }

    str[o] = '\0';
 800053a:	68fa      	ldr	r2, [r7, #12]
 800053c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800053e:	18d3      	adds	r3, r2, r3
 8000540:	2200      	movs	r2, #0
 8000542:	701a      	strb	r2, [r3, #0]
    return str;
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	0018      	movs	r0, r3
 8000548:	46bd      	mov	sp, r7
 800054a:	b00e      	add	sp, #56	@ 0x38
 800054c:	bdb0      	pop	{r4, r5, r7, pc}
 800054e:	46c0      	nop			@ (mov r8, r8)
 8000550:	08002f1c 	.word	0x08002f1c

08000554 <main>:
#define BUFFER_SIZE 128

#include "usart.h"
#include "process_cmd.h"

int main(void) {
 8000554:	b590      	push	{r4, r7, lr}
 8000556:	b09d      	sub	sp, #116	@ 0x74
 8000558:	af00      	add	r7, sp, #0
    /*
	 * Clocks: Processor = 48 Mhz. AHB = 48 MHz. APB = 24 MHz.
	 *
	 */
    char buf[100]; // Buffer to store received string
    int idx = 0;   // Index for buffer
 800055a:	2300      	movs	r3, #0
 800055c:	66fb      	str	r3, [r7, #108]	@ 0x6c

    // Initialize USART
    usart_init();
 800055e:	f000 fc55 	bl	8000e0c <usart_init>
    // Initialize LED
    uled_init();
 8000562:	f000 fb6b 	bl	8000c3c <uled_init>

    // Optional cbfifo test - use only in debugging
    // test_cbfifo();

    printf("\r\n$$ Welcome to SerialIO!\r\n");
 8000566:	4b27      	ldr	r3, [pc, #156]	@ (8000604 <main+0xb0>)
 8000568:	0018      	movs	r0, r3
 800056a:	f001 f8af 	bl	80016cc <puts>

    while (1) {
        // Print the prompt "$$ "
        printf("$$ ");
 800056e:	4b26      	ldr	r3, [pc, #152]	@ (8000608 <main+0xb4>)
 8000570:	0018      	movs	r0, r3
 8000572:	f001 f845 	bl	8001600 <iprintf>

        // Reset buffer index
        idx = 0;
 8000576:	2300      	movs	r3, #0
 8000578:	66fb      	str	r3, [r7, #108]	@ 0x6c

        // Loop until newline is received
        while (1) {
            char ch = __io_getchar(); // Get a character
 800057a:	f000 fd8e 	bl	800109a <__io_getchar>
 800057e:	0003      	movs	r3, r0
 8000580:	b2da      	uxtb	r2, r3
 8000582:	1dfb      	adds	r3, r7, #7
 8000584:	701a      	strb	r2, [r3, #0]

            if (ch == '\n' || ch == '\r') {
 8000586:	1dfb      	adds	r3, r7, #7
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	2b0a      	cmp	r3, #10
 800058c:	d003      	beq.n	8000596 <main+0x42>
 800058e:	1dfb      	adds	r3, r7, #7
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b0d      	cmp	r3, #13
 8000594:	d111      	bne.n	80005ba <main+0x66>
                // End of input string (newline or carriage return)
                buf[idx] = '\0';           // Null-terminate the string
 8000596:	2408      	movs	r4, #8
 8000598:	193a      	adds	r2, r7, r4
 800059a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800059c:	18d3      	adds	r3, r2, r3
 800059e:	2200      	movs	r2, #0
 80005a0:	701a      	strb	r2, [r3, #0]
                usart_transmit("\r\n", 2); // Send newline for the terminal
 80005a2:	4b1a      	ldr	r3, [pc, #104]	@ (800060c <main+0xb8>)
 80005a4:	2102      	movs	r1, #2
 80005a6:	0018      	movs	r0, r3
 80005a8:	f000 fd10 	bl	8000fcc <usart_transmit>
                buf[idx++] = ch;
                usart_transmit(&ch, 1); // Echo back the character
            }
        }
        // Process command:
        process_command(buf, idx);
 80005ac:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80005ae:	193b      	adds	r3, r7, r4
 80005b0:	0011      	movs	r1, r2
 80005b2:	0018      	movs	r0, r3
 80005b4:	f000 f8ba 	bl	800072c <process_command>
        printf("$$ ");
 80005b8:	e7d9      	b.n	800056e <main+0x1a>
            } else if (ch == '\b' || ch == 127) { // Backspace or Delete key
 80005ba:	1dfb      	adds	r3, r7, #7
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	2b08      	cmp	r3, #8
 80005c0:	d003      	beq.n	80005ca <main+0x76>
 80005c2:	1dfb      	adds	r3, r7, #7
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	2b7f      	cmp	r3, #127	@ 0x7f
 80005c8:	d10b      	bne.n	80005e2 <main+0x8e>
                if (idx > 0) {
 80005ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	dd18      	ble.n	8000602 <main+0xae>
                    idx--;
 80005d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80005d2:	3b01      	subs	r3, #1
 80005d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
                    usart_transmit("\b \b", 3); // Erase character from terminal
 80005d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000610 <main+0xbc>)
 80005d8:	2103      	movs	r1, #3
 80005da:	0018      	movs	r0, r3
 80005dc:	f000 fcf6 	bl	8000fcc <usart_transmit>
                if (idx > 0) {
 80005e0:	e00f      	b.n	8000602 <main+0xae>
            } else if (idx < sizeof(buf) - 1) {
 80005e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80005e4:	2b62      	cmp	r3, #98	@ 0x62
 80005e6:	d8c8      	bhi.n	800057a <main+0x26>
                buf[idx++] = ch;
 80005e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80005ea:	1c5a      	adds	r2, r3, #1
 80005ec:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80005ee:	1dfa      	adds	r2, r7, #7
 80005f0:	7811      	ldrb	r1, [r2, #0]
 80005f2:	2208      	movs	r2, #8
 80005f4:	18ba      	adds	r2, r7, r2
 80005f6:	54d1      	strb	r1, [r2, r3]
                usart_transmit(&ch, 1); // Echo back the character
 80005f8:	1dfb      	adds	r3, r7, #7
 80005fa:	2101      	movs	r1, #1
 80005fc:	0018      	movs	r0, r3
 80005fe:	f000 fce5 	bl	8000fcc <usart_transmit>
        while (1) {
 8000602:	e7ba      	b.n	800057a <main+0x26>
 8000604:	08002f30 	.word	0x08002f30
 8000608:	08002f4c 	.word	0x08002f4c
 800060c:	08002f50 	.word	0x08002f50
 8000610:	08002f54 	.word	0x08002f54

08000614 <parse_hex>:

#include "hexdump.h"
#include "process_cmd.h"
#include "uled.h"

unsigned int parse_hex(const char *str) {
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
    unsigned int value = 0;
 800061c:	2300      	movs	r3, #0
 800061e:	60fb      	str	r3, [r7, #12]
    sscanf(str, "%x", &value);
 8000620:	230c      	movs	r3, #12
 8000622:	18fa      	adds	r2, r7, r3
 8000624:	4904      	ldr	r1, [pc, #16]	@ (8000638 <parse_hex+0x24>)
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	0018      	movs	r0, r3
 800062a:	f001 f919 	bl	8001860 <siscanf>
    return value;
 800062e:	68fb      	ldr	r3, [r7, #12]
}
 8000630:	0018      	movs	r0, r3
 8000632:	46bd      	mov	sp, r7
 8000634:	b004      	add	sp, #16
 8000636:	bd80      	pop	{r7, pc}
 8000638:	08002f58 	.word	0x08002f58

0800063c <is_valid_hex>:

int is_valid_hex(const char *str) {
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
    while (*str) {
 8000644:	e00e      	b.n	8000664 <is_valid_hex+0x28>
        if (!isxdigit((unsigned char)*str)) {
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	1c5a      	adds	r2, r3, #1
 800064c:	4b0a      	ldr	r3, [pc, #40]	@ (8000678 <is_valid_hex+0x3c>)
 800064e:	18d3      	adds	r3, r2, r3
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	001a      	movs	r2, r3
 8000654:	2344      	movs	r3, #68	@ 0x44
 8000656:	4013      	ands	r3, r2
 8000658:	d101      	bne.n	800065e <is_valid_hex+0x22>
            return 0;
 800065a:	2300      	movs	r3, #0
 800065c:	e007      	b.n	800066e <is_valid_hex+0x32>
        }
        str++;
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	3301      	adds	r3, #1
 8000662:	607b      	str	r3, [r7, #4]
    while (*str) {
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d1ec      	bne.n	8000646 <is_valid_hex+0xa>
    }
    return 1;
 800066c:	2301      	movs	r3, #1
}
 800066e:	0018      	movs	r0, r3
 8000670:	46bd      	mov	sp, r7
 8000672:	b002      	add	sp, #8
 8000674:	bd80      	pop	{r7, pc}
 8000676:	46c0      	nop			@ (mov r8, r8)
 8000678:	08003004 	.word	0x08003004

0800067c <parse_length>:

int parse_length(const char *str, int *valid) {
 800067c:	b580      	push	{r7, lr}
 800067e:	b084      	sub	sp, #16
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
 8000684:	6039      	str	r1, [r7, #0]
    *valid = 1;
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	2201      	movs	r2, #1
 800068a:	601a      	str	r2, [r3, #0]

    // Check if the length is in hexadecimal format
    if (strncmp(str, "0x", 2) == 0) {
 800068c:	4925      	ldr	r1, [pc, #148]	@ (8000724 <parse_length+0xa8>)
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	2202      	movs	r2, #2
 8000692:	0018      	movs	r0, r3
 8000694:	f001 fa26 	bl	8001ae4 <strncmp>
 8000698:	1e03      	subs	r3, r0, #0
 800069a:	d121      	bne.n	80006e0 <parse_length+0x64>
        // Skip "0x" prefix
        str += 2;
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	3302      	adds	r3, #2
 80006a0:	607b      	str	r3, [r7, #4]

        // Validate the rest of the string as hexadecimal
        const char *hex_str = str;
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	60fb      	str	r3, [r7, #12]
        while (*hex_str) {
 80006a6:	e011      	b.n	80006cc <parse_length+0x50>
            if (!isxdigit((unsigned char)*hex_str)) {
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	1c5a      	adds	r2, r3, #1
 80006ae:	4b1e      	ldr	r3, [pc, #120]	@ (8000728 <parse_length+0xac>)
 80006b0:	18d3      	adds	r3, r2, r3
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	001a      	movs	r2, r3
 80006b6:	2344      	movs	r3, #68	@ 0x44
 80006b8:	4013      	ands	r3, r2
 80006ba:	d104      	bne.n	80006c6 <parse_length+0x4a>
                *valid = 0;
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
                return 0;
 80006c2:	2300      	movs	r3, #0
 80006c4:	e02a      	b.n	800071c <parse_length+0xa0>
            }
            hex_str++;
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	3301      	adds	r3, #1
 80006ca:	60fb      	str	r3, [r7, #12]
        while (*hex_str) {
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d1e9      	bne.n	80006a8 <parse_length+0x2c>
        }
        // Convert the hexadecimal string to an integer
        return parse_hex(str);
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	0018      	movs	r0, r3
 80006d8:	f7ff ff9c 	bl	8000614 <parse_hex>
 80006dc:	0003      	movs	r3, r0
 80006de:	e01d      	b.n	800071c <parse_length+0xa0>
    }

    // Otherwise, validate as a decimal number
    const char *dec_str = str;
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	60bb      	str	r3, [r7, #8]
    while (*dec_str) {
 80006e4:	e011      	b.n	800070a <parse_length+0x8e>
        if (!isdigit((unsigned char)*dec_str)) {
 80006e6:	68bb      	ldr	r3, [r7, #8]
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	1c5a      	adds	r2, r3, #1
 80006ec:	4b0e      	ldr	r3, [pc, #56]	@ (8000728 <parse_length+0xac>)
 80006ee:	18d3      	adds	r3, r2, r3
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	001a      	movs	r2, r3
 80006f4:	2304      	movs	r3, #4
 80006f6:	4013      	ands	r3, r2
 80006f8:	d104      	bne.n	8000704 <parse_length+0x88>
            *valid = 0;
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
            return 0;
 8000700:	2300      	movs	r3, #0
 8000702:	e00b      	b.n	800071c <parse_length+0xa0>
        }
        dec_str++;
 8000704:	68bb      	ldr	r3, [r7, #8]
 8000706:	3301      	adds	r3, #1
 8000708:	60bb      	str	r3, [r7, #8]
    while (*dec_str) {
 800070a:	68bb      	ldr	r3, [r7, #8]
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d1e9      	bne.n	80006e6 <parse_length+0x6a>
    }
    // Convert the decimal string to an integer
    return atoi(str);
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	0018      	movs	r0, r3
 8000716:	f000 fe0f 	bl	8001338 <atoi>
 800071a:	0003      	movs	r3, r0
}
 800071c:	0018      	movs	r0, r3
 800071e:	46bd      	mov	sp, r7
 8000720:	b004      	add	sp, #16
 8000722:	bd80      	pop	{r7, pc}
 8000724:	08002f5c 	.word	0x08002f5c
 8000728:	08003004 	.word	0x08003004

0800072c <process_command>:

void process_command(char *input, size_t nbytes) {
 800072c:	b590      	push	{r4, r7, lr}
 800072e:	4cb8      	ldr	r4, [pc, #736]	@ (8000a10 <process_command+0x2e4>)
 8000730:	44a5      	add	sp, r4
 8000732:	af00      	add	r7, sp, #0
 8000734:	6078      	str	r0, [r7, #4]
 8000736:	6039      	str	r1, [r7, #0]
    // Convert the input string to uppercase and remove extra spaces
    char output[100];
    int out_idx = 0;
 8000738:	2300      	movs	r3, #0
 800073a:	22a3      	movs	r2, #163	@ 0xa3
 800073c:	0092      	lsls	r2, r2, #2
 800073e:	18ba      	adds	r2, r7, r2
 8000740:	6013      	str	r3, [r2, #0]
    int in_word = 0;
 8000742:	2300      	movs	r3, #0
 8000744:	22a2      	movs	r2, #162	@ 0xa2
 8000746:	0092      	lsls	r2, r2, #2
 8000748:	18ba      	adds	r2, r7, r2
 800074a:	6013      	str	r3, [r2, #0]

    // Skip leading whitespace
    while (*input && isspace((unsigned char)*input)) {
 800074c:	e002      	b.n	8000754 <process_command+0x28>
        input++;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	3301      	adds	r3, #1
 8000752:	607b      	str	r3, [r7, #4]
    while (*input && isspace((unsigned char)*input)) {
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d009      	beq.n	8000770 <process_command+0x44>
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	1c5a      	adds	r2, r3, #1
 8000762:	4bac      	ldr	r3, [pc, #688]	@ (8000a14 <process_command+0x2e8>)
 8000764:	18d3      	adds	r3, r2, r3
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	001a      	movs	r2, r3
 800076a:	2308      	movs	r3, #8
 800076c:	4013      	ands	r3, r2
 800076e:	d1ee      	bne.n	800074e <process_command+0x22>
    }

    // Check if the command is empty and return if so
    if (*input == '\0') {
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d100      	bne.n	800077a <process_command+0x4e>
 8000778:	e1b6      	b.n	8000ae8 <process_command+0x3bc>
        return;
    }

    // Check for "echo" command
    if (strncasecmp(input, "echo", 4) == 0) {
 800077a:	49a7      	ldr	r1, [pc, #668]	@ (8000a18 <process_command+0x2ec>)
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	2204      	movs	r2, #4
 8000780:	0018      	movs	r0, r3
 8000782:	f001 f98b 	bl	8001a9c <strncasecmp>
 8000786:	1e03      	subs	r3, r0, #0
 8000788:	d000      	beq.n	800078c <process_command+0x60>
 800078a:	e08c      	b.n	80008a6 <process_command+0x17a>
        input += 4;
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	3304      	adds	r3, #4
 8000790:	607b      	str	r3, [r7, #4]

        // Skip whitespace after "echo"
        while (*input && isspace((unsigned char)*input)) {
 8000792:	e002      	b.n	800079a <process_command+0x6e>
            input++;
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	3301      	adds	r3, #1
 8000798:	607b      	str	r3, [r7, #4]
        while (*input && isspace((unsigned char)*input)) {
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d056      	beq.n	8000850 <process_command+0x124>
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	1c5a      	adds	r2, r3, #1
 80007a8:	4b9a      	ldr	r3, [pc, #616]	@ (8000a14 <process_command+0x2e8>)
 80007aa:	18d3      	adds	r3, r2, r3
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	001a      	movs	r2, r3
 80007b0:	2308      	movs	r3, #8
 80007b2:	4013      	ands	r3, r2
 80007b4:	d1ee      	bne.n	8000794 <process_command+0x68>
        }

        // Process the rest of the input as the string to echo
        while (*input) {
 80007b6:	e04b      	b.n	8000850 <process_command+0x124>
            if (isspace((unsigned char)*input)) {
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	1c5a      	adds	r2, r3, #1
 80007be:	4b95      	ldr	r3, [pc, #596]	@ (8000a14 <process_command+0x2e8>)
 80007c0:	18d3      	adds	r3, r2, r3
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	001a      	movs	r2, r3
 80007c6:	2308      	movs	r3, #8
 80007c8:	4013      	ands	r3, r2
 80007ca:	d015      	beq.n	80007f8 <process_command+0xcc>
                if (in_word) {
 80007cc:	20a2      	movs	r0, #162	@ 0xa2
 80007ce:	0080      	lsls	r0, r0, #2
 80007d0:	183b      	adds	r3, r7, r0
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d038      	beq.n	800084a <process_command+0x11e>
                    // Add a single space between words
                    output[out_idx++] = ' ';
 80007d8:	21a3      	movs	r1, #163	@ 0xa3
 80007da:	0089      	lsls	r1, r1, #2
 80007dc:	187b      	adds	r3, r7, r1
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	1c5a      	adds	r2, r3, #1
 80007e2:	1879      	adds	r1, r7, r1
 80007e4:	600a      	str	r2, [r1, #0]
 80007e6:	2284      	movs	r2, #132	@ 0x84
 80007e8:	0092      	lsls	r2, r2, #2
 80007ea:	18ba      	adds	r2, r7, r2
 80007ec:	2120      	movs	r1, #32
 80007ee:	54d1      	strb	r1, [r2, r3]
                    in_word = 0;
 80007f0:	2300      	movs	r3, #0
 80007f2:	183a      	adds	r2, r7, r0
 80007f4:	6013      	str	r3, [r2, #0]
 80007f6:	e028      	b.n	800084a <process_command+0x11e>
                }
            } else {
                // Convert to uppercase and add to output
                output[out_idx++] = toupper((unsigned char)*input);
 80007f8:	4988      	ldr	r1, [pc, #544]	@ (8000a1c <process_command+0x2f0>)
 80007fa:	187b      	adds	r3, r7, r1
 80007fc:	687a      	ldr	r2, [r7, #4]
 80007fe:	7812      	ldrb	r2, [r2, #0]
 8000800:	701a      	strb	r2, [r3, #0]
 8000802:	187b      	adds	r3, r7, r1
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	1c5a      	adds	r2, r3, #1
 8000808:	4b82      	ldr	r3, [pc, #520]	@ (8000a14 <process_command+0x2e8>)
 800080a:	18d3      	adds	r3, r2, r3
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	001a      	movs	r2, r3
 8000810:	2303      	movs	r3, #3
 8000812:	4013      	ands	r3, r2
 8000814:	2b02      	cmp	r3, #2
 8000816:	d104      	bne.n	8000822 <process_command+0xf6>
 8000818:	187b      	adds	r3, r7, r1
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	3b20      	subs	r3, #32
 800081e:	001a      	movs	r2, r3
 8000820:	e002      	b.n	8000828 <process_command+0xfc>
 8000822:	4b7e      	ldr	r3, [pc, #504]	@ (8000a1c <process_command+0x2f0>)
 8000824:	18fb      	adds	r3, r7, r3
 8000826:	781a      	ldrb	r2, [r3, #0]
 8000828:	20a3      	movs	r0, #163	@ 0xa3
 800082a:	0080      	lsls	r0, r0, #2
 800082c:	183b      	adds	r3, r7, r0
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	1c59      	adds	r1, r3, #1
 8000832:	1838      	adds	r0, r7, r0
 8000834:	6001      	str	r1, [r0, #0]
 8000836:	b2d1      	uxtb	r1, r2
 8000838:	2284      	movs	r2, #132	@ 0x84
 800083a:	0092      	lsls	r2, r2, #2
 800083c:	18ba      	adds	r2, r7, r2
 800083e:	54d1      	strb	r1, [r2, r3]
                in_word = 1;
 8000840:	2301      	movs	r3, #1
 8000842:	22a2      	movs	r2, #162	@ 0xa2
 8000844:	0092      	lsls	r2, r2, #2
 8000846:	18ba      	adds	r2, r7, r2
 8000848:	6013      	str	r3, [r2, #0]
            }
            input++;
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	3301      	adds	r3, #1
 800084e:	607b      	str	r3, [r7, #4]
        while (*input) {
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d1af      	bne.n	80007b8 <process_command+0x8c>
        }

        // Remove any trailing space
        if (out_idx > 0 && output[out_idx - 1] == ' ') {
 8000858:	21a3      	movs	r1, #163	@ 0xa3
 800085a:	0089      	lsls	r1, r1, #2
 800085c:	187b      	adds	r3, r7, r1
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	2b00      	cmp	r3, #0
 8000862:	dd0d      	ble.n	8000880 <process_command+0x154>
 8000864:	187b      	adds	r3, r7, r1
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	3b01      	subs	r3, #1
 800086a:	2284      	movs	r2, #132	@ 0x84
 800086c:	0092      	lsls	r2, r2, #2
 800086e:	18ba      	adds	r2, r7, r2
 8000870:	5cd3      	ldrb	r3, [r2, r3]
 8000872:	2b20      	cmp	r3, #32
 8000874:	d104      	bne.n	8000880 <process_command+0x154>
            out_idx--;
 8000876:	187b      	adds	r3, r7, r1
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	3b01      	subs	r3, #1
 800087c:	187a      	adds	r2, r7, r1
 800087e:	6013      	str	r3, [r2, #0]
        }

        // Null-terminate the output string
        output[out_idx] = '\0';
 8000880:	2184      	movs	r1, #132	@ 0x84
 8000882:	0089      	lsls	r1, r1, #2
 8000884:	187a      	adds	r2, r7, r1
 8000886:	23a3      	movs	r3, #163	@ 0xa3
 8000888:	009b      	lsls	r3, r3, #2
 800088a:	18fb      	adds	r3, r7, r3
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	18d3      	adds	r3, r2, r3
 8000890:	2200      	movs	r2, #0
 8000892:	701a      	strb	r2, [r3, #0]

        // Send the processed string back to the terminal
        printf(output);
 8000894:	187b      	adds	r3, r7, r1
 8000896:	0018      	movs	r0, r3
 8000898:	f000 feb2 	bl	8001600 <iprintf>
        printf("\r\n");
 800089c:	4b60      	ldr	r3, [pc, #384]	@ (8000a20 <process_command+0x2f4>)
 800089e:	0018      	movs	r0, r3
 80008a0:	f000 ff14 	bl	80016cc <puts>
 80008a4:	e121      	b.n	8000aea <process_command+0x3be>

        // Check for LED command
    } else if (strncasecmp(input, "led", 3) == 0) {
 80008a6:	495f      	ldr	r1, [pc, #380]	@ (8000a24 <process_command+0x2f8>)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	2203      	movs	r2, #3
 80008ac:	0018      	movs	r0, r3
 80008ae:	f001 f8f5 	bl	8001a9c <strncasecmp>
 80008b2:	1e03      	subs	r3, r0, #0
 80008b4:	d12f      	bne.n	8000916 <process_command+0x1ea>
        input += 3;
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	3303      	adds	r3, #3
 80008ba:	607b      	str	r3, [r7, #4]
        // Skip whitespace after "led"
        while (*input && isspace((unsigned char)*input)) {
 80008bc:	e002      	b.n	80008c4 <process_command+0x198>
            input++;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	3301      	adds	r3, #1
 80008c2:	607b      	str	r3, [r7, #4]
        while (*input && isspace((unsigned char)*input)) {
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d009      	beq.n	80008e0 <process_command+0x1b4>
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	1c5a      	adds	r2, r3, #1
 80008d2:	4b50      	ldr	r3, [pc, #320]	@ (8000a14 <process_command+0x2e8>)
 80008d4:	18d3      	adds	r3, r2, r3
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	001a      	movs	r2, r3
 80008da:	2308      	movs	r3, #8
 80008dc:	4013      	ands	r3, r2
 80008de:	d1ee      	bne.n	80008be <process_command+0x192>
        }
        if (strncasecmp(input, "off", 3) == 0) {
 80008e0:	4951      	ldr	r1, [pc, #324]	@ (8000a28 <process_command+0x2fc>)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	2203      	movs	r2, #3
 80008e6:	0018      	movs	r0, r3
 80008e8:	f001 f8d8 	bl	8001a9c <strncasecmp>
 80008ec:	1e03      	subs	r3, r0, #0
 80008ee:	d102      	bne.n	80008f6 <process_command+0x1ca>
            uled_off();
 80008f0:	f000 f9d8 	bl	8000ca4 <uled_off>
 80008f4:	e0f9      	b.n	8000aea <process_command+0x3be>
        } else if (strncasecmp(input, "on", 2) == 0) {
 80008f6:	494d      	ldr	r1, [pc, #308]	@ (8000a2c <process_command+0x300>)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	2202      	movs	r2, #2
 80008fc:	0018      	movs	r0, r3
 80008fe:	f001 f8cd 	bl	8001a9c <strncasecmp>
 8000902:	1e03      	subs	r3, r0, #0
 8000904:	d102      	bne.n	800090c <process_command+0x1e0>
            uled_on();
 8000906:	f000 f9bf 	bl	8000c88 <uled_on>
 800090a:	e0ee      	b.n	8000aea <process_command+0x3be>
        } else {
            // Send an error message
            printf("Unknown LED command\r\n");
 800090c:	4b48      	ldr	r3, [pc, #288]	@ (8000a30 <process_command+0x304>)
 800090e:	0018      	movs	r0, r3
 8000910:	f000 fedc 	bl	80016cc <puts>
 8000914:	e0e9      	b.n	8000aea <process_command+0x3be>
        }

        // Check for "hexdump" command
    } else if (strncasecmp(input, "hexdump", 7) == 0) {
 8000916:	4947      	ldr	r1, [pc, #284]	@ (8000a34 <process_command+0x308>)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	2207      	movs	r2, #7
 800091c:	0018      	movs	r0, r3
 800091e:	f001 f8bd 	bl	8001a9c <strncasecmp>
 8000922:	1e03      	subs	r3, r0, #0
 8000924:	d000      	beq.n	8000928 <process_command+0x1fc>
 8000926:	e0d2      	b.n	8000ace <process_command+0x3a2>
        input += 7;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	3307      	adds	r3, #7
 800092c:	607b      	str	r3, [r7, #4]

        // Skip whitespace after "hexdump"
        while (*input && isspace((unsigned char)*input)) {
 800092e:	e002      	b.n	8000936 <process_command+0x20a>
            input++;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	3301      	adds	r3, #1
 8000934:	607b      	str	r3, [r7, #4]
        while (*input && isspace((unsigned char)*input)) {
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d009      	beq.n	8000952 <process_command+0x226>
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	1c5a      	adds	r2, r3, #1
 8000944:	4b33      	ldr	r3, [pc, #204]	@ (8000a14 <process_command+0x2e8>)
 8000946:	18d3      	adds	r3, r2, r3
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	001a      	movs	r2, r3
 800094c:	2308      	movs	r3, #8
 800094e:	4013      	ands	r3, r2
 8000950:	d1ee      	bne.n	8000930 <process_command+0x204>
        }

        // Extract the Start argument (hexadecimal address)
        char *start_str = input;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	22a1      	movs	r2, #161	@ 0xa1
 8000956:	0092      	lsls	r2, r2, #2
 8000958:	18ba      	adds	r2, r7, r2
 800095a:	6013      	str	r3, [r2, #0]
        while (*input && !isspace((unsigned char)*input)) {
 800095c:	e002      	b.n	8000964 <process_command+0x238>
            input++;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	3301      	adds	r3, #1
 8000962:	607b      	str	r3, [r7, #4]
        while (*input && !isspace((unsigned char)*input)) {
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d009      	beq.n	8000980 <process_command+0x254>
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	1c5a      	adds	r2, r3, #1
 8000972:	4b28      	ldr	r3, [pc, #160]	@ (8000a14 <process_command+0x2e8>)
 8000974:	18d3      	adds	r3, r2, r3
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	001a      	movs	r2, r3
 800097a:	2308      	movs	r3, #8
 800097c:	4013      	ands	r3, r2
 800097e:	d0ee      	beq.n	800095e <process_command+0x232>
        }

        // Null-terminate Start argument and move to the Len argument
        if (*input)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d008      	beq.n	800099a <process_command+0x26e>
            *input++ = '\0';
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	1c5a      	adds	r2, r3, #1
 800098c:	607a      	str	r2, [r7, #4]
 800098e:	2200      	movs	r2, #0
 8000990:	701a      	strb	r2, [r3, #0]

        // Skip whitespace to reach Len argument
        while (*input && isspace((unsigned char)*input)) {
 8000992:	e002      	b.n	800099a <process_command+0x26e>
            input++;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	3301      	adds	r3, #1
 8000998:	607b      	str	r3, [r7, #4]
        while (*input && isspace((unsigned char)*input)) {
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d009      	beq.n	80009b6 <process_command+0x28a>
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	1c5a      	adds	r2, r3, #1
 80009a8:	4b1a      	ldr	r3, [pc, #104]	@ (8000a14 <process_command+0x2e8>)
 80009aa:	18d3      	adds	r3, r2, r3
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	001a      	movs	r2, r3
 80009b0:	2308      	movs	r3, #8
 80009b2:	4013      	ands	r3, r2
 80009b4:	d1ee      	bne.n	8000994 <process_command+0x268>
        }

        // Extract the Len argument
        char *len_str = input;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	22a0      	movs	r2, #160	@ 0xa0
 80009ba:	0092      	lsls	r2, r2, #2
 80009bc:	18ba      	adds	r2, r7, r2
 80009be:	6013      	str	r3, [r2, #0]
        while (*input && !isspace((unsigned char)*input)) {
 80009c0:	e002      	b.n	80009c8 <process_command+0x29c>
            input++;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	3301      	adds	r3, #1
 80009c6:	607b      	str	r3, [r7, #4]
        while (*input && !isspace((unsigned char)*input)) {
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d009      	beq.n	80009e4 <process_command+0x2b8>
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	1c5a      	adds	r2, r3, #1
 80009d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000a14 <process_command+0x2e8>)
 80009d8:	18d3      	adds	r3, r2, r3
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	001a      	movs	r2, r3
 80009de:	2308      	movs	r3, #8
 80009e0:	4013      	ands	r3, r2
 80009e2:	d0ee      	beq.n	80009c2 <process_command+0x296>
        }

        // Null-terminate Len argument
        if (*input)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d002      	beq.n	80009f2 <process_command+0x2c6>
            *input = '\0';
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	2200      	movs	r2, #0
 80009f0:	701a      	strb	r2, [r3, #0]

        // Validate Start argument as a hexadecimal address
        if (!is_valid_hex(start_str)) {
 80009f2:	23a1      	movs	r3, #161	@ 0xa1
 80009f4:	009b      	lsls	r3, r3, #2
 80009f6:	18fb      	adds	r3, r7, r3
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	0018      	movs	r0, r3
 80009fc:	f7ff fe1e 	bl	800063c <is_valid_hex>
 8000a00:	1e03      	subs	r3, r0, #0
 8000a02:	d11b      	bne.n	8000a3c <process_command+0x310>
            printf("Error: invalid start address\r\n");
 8000a04:	4b0c      	ldr	r3, [pc, #48]	@ (8000a38 <process_command+0x30c>)
 8000a06:	0018      	movs	r0, r3
 8000a08:	f000 fe60 	bl	80016cc <puts>
            return;
 8000a0c:	e06d      	b.n	8000aea <process_command+0x3be>
 8000a0e:	46c0      	nop			@ (mov r8, r8)
 8000a10:	fffffd6c 	.word	0xfffffd6c
 8000a14:	08003004 	.word	0x08003004
 8000a18:	08002f60 	.word	0x08002f60
 8000a1c:	00000277 	.word	0x00000277
 8000a20:	08002f68 	.word	0x08002f68
 8000a24:	08002f6c 	.word	0x08002f6c
 8000a28:	08002f70 	.word	0x08002f70
 8000a2c:	08002f74 	.word	0x08002f74
 8000a30:	08002f78 	.word	0x08002f78
 8000a34:	08002f90 	.word	0x08002f90
 8000a38:	08002f98 	.word	0x08002f98
        }
        void *start_addr = (void *)(uintptr_t)parse_hex(start_str);
 8000a3c:	23a1      	movs	r3, #161	@ 0xa1
 8000a3e:	009b      	lsls	r3, r3, #2
 8000a40:	18fb      	adds	r3, r7, r3
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	0018      	movs	r0, r3
 8000a46:	f7ff fde5 	bl	8000614 <parse_hex>
 8000a4a:	0003      	movs	r3, r0
 8000a4c:	229f      	movs	r2, #159	@ 0x9f
 8000a4e:	0092      	lsls	r2, r2, #2
 8000a50:	18ba      	adds	r2, r7, r2
 8000a52:	6013      	str	r3, [r2, #0]

        // Validate and parse Len argument
        int len_valid = 0;
 8000a54:	2300      	movs	r3, #0
 8000a56:	2483      	movs	r4, #131	@ 0x83
 8000a58:	00a4      	lsls	r4, r4, #2
 8000a5a:	193a      	adds	r2, r7, r4
 8000a5c:	6013      	str	r3, [r2, #0]
        int len = parse_length(len_str, &len_valid);
 8000a5e:	193a      	adds	r2, r7, r4
 8000a60:	23a0      	movs	r3, #160	@ 0xa0
 8000a62:	009b      	lsls	r3, r3, #2
 8000a64:	18fb      	adds	r3, r7, r3
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	0011      	movs	r1, r2
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	f7ff fe06 	bl	800067c <parse_length>
 8000a70:	0003      	movs	r3, r0
 8000a72:	229e      	movs	r2, #158	@ 0x9e
 8000a74:	0092      	lsls	r2, r2, #2
 8000a76:	18b9      	adds	r1, r7, r2
 8000a78:	600b      	str	r3, [r1, #0]
        if (!len_valid || len < 0 || len > MAX_LEN) {
 8000a7a:	193b      	adds	r3, r7, r4
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d009      	beq.n	8000a96 <process_command+0x36a>
 8000a82:	18bb      	adds	r3, r7, r2
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	db05      	blt.n	8000a96 <process_command+0x36a>
 8000a8a:	18bb      	adds	r3, r7, r2
 8000a8c:	681a      	ldr	r2, [r3, #0]
 8000a8e:	23a0      	movs	r3, #160	@ 0xa0
 8000a90:	009b      	lsls	r3, r3, #2
 8000a92:	429a      	cmp	r2, r3
 8000a94:	dd04      	ble.n	8000aa0 <process_command+0x374>
            printf("Error: invalid length\r\n");
 8000a96:	4b17      	ldr	r3, [pc, #92]	@ (8000af4 <process_command+0x3c8>)
 8000a98:	0018      	movs	r0, r3
 8000a9a:	f000 fe17 	bl	80016cc <puts>
            return;
 8000a9e:	e024      	b.n	8000aea <process_command+0x3be>

        // Buffer to hold the hexdump output
        char hexdump_output[512];

        // Call the hexdump function and print the output
        hexdump(hexdump_output, sizeof(hexdump_output), start_addr, (size_t)len);
 8000aa0:	239e      	movs	r3, #158	@ 0x9e
 8000aa2:	009b      	lsls	r3, r3, #2
 8000aa4:	18fb      	adds	r3, r7, r3
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	229f      	movs	r2, #159	@ 0x9f
 8000aaa:	0092      	lsls	r2, r2, #2
 8000aac:	18ba      	adds	r2, r7, r2
 8000aae:	6812      	ldr	r2, [r2, #0]
 8000ab0:	2180      	movs	r1, #128	@ 0x80
 8000ab2:	0089      	lsls	r1, r1, #2
 8000ab4:	240c      	movs	r4, #12
 8000ab6:	1938      	adds	r0, r7, r4
 8000ab8:	f7ff fc92 	bl	80003e0 <hexdump>
        printf(hexdump_output);
 8000abc:	193b      	adds	r3, r7, r4
 8000abe:	0018      	movs	r0, r3
 8000ac0:	f000 fd9e 	bl	8001600 <iprintf>
        printf("\r\n");
 8000ac4:	4b0c      	ldr	r3, [pc, #48]	@ (8000af8 <process_command+0x3cc>)
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	f000 fe00 	bl	80016cc <puts>
 8000acc:	e00d      	b.n	8000aea <process_command+0x3be>
        // ADD NEW COMMANDS HERE IF YOU'D LIKE
        // Add a new else if here and compare the input to your desired command
        // Increment input by the number of your characters in your command, then start programming!
    } else {
        // If command is not recognized, send an error message
        printf("Unknown command: ");
 8000ace:	4b0b      	ldr	r3, [pc, #44]	@ (8000afc <process_command+0x3d0>)
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	f000 fd95 	bl	8001600 <iprintf>
        printf(input);
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	0018      	movs	r0, r3
 8000ada:	f000 fd91 	bl	8001600 <iprintf>
        printf("\n\r");
 8000ade:	4b08      	ldr	r3, [pc, #32]	@ (8000b00 <process_command+0x3d4>)
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	f000 fd8d 	bl	8001600 <iprintf>
 8000ae6:	e000      	b.n	8000aea <process_command+0x3be>
        return;
 8000ae8:	46c0      	nop			@ (mov r8, r8)
    }
 8000aea:	46bd      	mov	sp, r7
 8000aec:	23a5      	movs	r3, #165	@ 0xa5
 8000aee:	009b      	lsls	r3, r3, #2
 8000af0:	449d      	add	sp, r3
 8000af2:	bd90      	pop	{r4, r7, pc}
 8000af4:	08002fb8 	.word	0x08002fb8
 8000af8:	08002f68 	.word	0x08002f68
 8000afc:	08002fd0 	.word	0x08002fd0
 8000b00:	08002fe4 	.word	0x08002fe4

08000b04 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b086      	sub	sp, #24
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	60f8      	str	r0, [r7, #12]
 8000b0c:	60b9      	str	r1, [r7, #8]
 8000b0e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b10:	2300      	movs	r3, #0
 8000b12:	617b      	str	r3, [r7, #20]
 8000b14:	e00a      	b.n	8000b2c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b16:	f000 fac0 	bl	800109a <__io_getchar>
 8000b1a:	0001      	movs	r1, r0
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	1c5a      	adds	r2, r3, #1
 8000b20:	60ba      	str	r2, [r7, #8]
 8000b22:	b2ca      	uxtb	r2, r1
 8000b24:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	3301      	adds	r3, #1
 8000b2a:	617b      	str	r3, [r7, #20]
 8000b2c:	697a      	ldr	r2, [r7, #20]
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	429a      	cmp	r2, r3
 8000b32:	dbf0      	blt.n	8000b16 <_read+0x12>
  }

  return len;
 8000b34:	687b      	ldr	r3, [r7, #4]
}
 8000b36:	0018      	movs	r0, r3
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	b006      	add	sp, #24
 8000b3c:	bd80      	pop	{r7, pc}

08000b3e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	b086      	sub	sp, #24
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	60f8      	str	r0, [r7, #12]
 8000b46:	60b9      	str	r1, [r7, #8]
 8000b48:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	617b      	str	r3, [r7, #20]
 8000b4e:	e009      	b.n	8000b64 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	1c5a      	adds	r2, r3, #1
 8000b54:	60ba      	str	r2, [r7, #8]
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	0018      	movs	r0, r3
 8000b5a:	f000 fa8b 	bl	8001074 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	3301      	adds	r3, #1
 8000b62:	617b      	str	r3, [r7, #20]
 8000b64:	697a      	ldr	r2, [r7, #20]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	dbf1      	blt.n	8000b50 <_write+0x12>
  }
  return len;
 8000b6c:	687b      	ldr	r3, [r7, #4]
}
 8000b6e:	0018      	movs	r0, r3
 8000b70:	46bd      	mov	sp, r7
 8000b72:	b006      	add	sp, #24
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <_close>:

int _close(int file)
{
 8000b76:	b580      	push	{r7, lr}
 8000b78:	b082      	sub	sp, #8
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	425b      	negs	r3, r3
}
 8000b82:	0018      	movs	r0, r3
 8000b84:	46bd      	mov	sp, r7
 8000b86:	b002      	add	sp, #8
 8000b88:	bd80      	pop	{r7, pc}

08000b8a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	b082      	sub	sp, #8
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	6078      	str	r0, [r7, #4]
 8000b92:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	2280      	movs	r2, #128	@ 0x80
 8000b98:	0192      	lsls	r2, r2, #6
 8000b9a:	605a      	str	r2, [r3, #4]
  return 0;
 8000b9c:	2300      	movs	r3, #0
}
 8000b9e:	0018      	movs	r0, r3
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	b002      	add	sp, #8
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <_isatty>:

int _isatty(int file)
{
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	b082      	sub	sp, #8
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000bae:	2301      	movs	r3, #1
}
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	b002      	add	sp, #8
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	60f8      	str	r0, [r7, #12]
 8000bc0:	60b9      	str	r1, [r7, #8]
 8000bc2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bc4:	2300      	movs	r3, #0
}
 8000bc6:	0018      	movs	r0, r3
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	b004      	add	sp, #16
 8000bcc:	bd80      	pop	{r7, pc}
	...

08000bd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b086      	sub	sp, #24
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bd8:	4a14      	ldr	r2, [pc, #80]	@ (8000c2c <_sbrk+0x5c>)
 8000bda:	4b15      	ldr	r3, [pc, #84]	@ (8000c30 <_sbrk+0x60>)
 8000bdc:	1ad3      	subs	r3, r2, r3
 8000bde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000be4:	4b13      	ldr	r3, [pc, #76]	@ (8000c34 <_sbrk+0x64>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d102      	bne.n	8000bf2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bec:	4b11      	ldr	r3, [pc, #68]	@ (8000c34 <_sbrk+0x64>)
 8000bee:	4a12      	ldr	r2, [pc, #72]	@ (8000c38 <_sbrk+0x68>)
 8000bf0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bf2:	4b10      	ldr	r3, [pc, #64]	@ (8000c34 <_sbrk+0x64>)
 8000bf4:	681a      	ldr	r2, [r3, #0]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	18d3      	adds	r3, r2, r3
 8000bfa:	693a      	ldr	r2, [r7, #16]
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	d207      	bcs.n	8000c10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c00:	f000 ffd0 	bl	8001ba4 <__errno>
 8000c04:	0003      	movs	r3, r0
 8000c06:	220c      	movs	r2, #12
 8000c08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	425b      	negs	r3, r3
 8000c0e:	e009      	b.n	8000c24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c10:	4b08      	ldr	r3, [pc, #32]	@ (8000c34 <_sbrk+0x64>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c16:	4b07      	ldr	r3, [pc, #28]	@ (8000c34 <_sbrk+0x64>)
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	18d2      	adds	r2, r2, r3
 8000c1e:	4b05      	ldr	r3, [pc, #20]	@ (8000c34 <_sbrk+0x64>)
 8000c20:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000c22:	68fb      	ldr	r3, [r7, #12]
}
 8000c24:	0018      	movs	r0, r3
 8000c26:	46bd      	mov	sp, r7
 8000c28:	b006      	add	sp, #24
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	20008000 	.word	0x20008000
 8000c30:	00000400 	.word	0x00000400
 8000c34:	2000007c 	.word	0x2000007c
 8000c38:	200002e0 	.word	0x200002e0

08000c3c <uled_init>:
//#include "log.h"
#include <stm32f091xc.h>
#include "uled.h"
#include "utilities.h"

int uled_init(void) {
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0

	// This section of code was taken from Alex Dean's Github
	// https://github.com/alexander-g-dean/ESF/blob/master/ST/Code/ch2/Basic-LED/main.c
	// Enable peripheral clock of GPIOA (for LD2)
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8000c40:	4b0f      	ldr	r3, [pc, #60]	@ (8000c80 <uled_init+0x44>)
 8000c42:	695a      	ldr	r2, [r3, #20]
 8000c44:	4b0e      	ldr	r3, [pc, #56]	@ (8000c80 <uled_init+0x44>)
 8000c46:	2180      	movs	r1, #128	@ 0x80
 8000c48:	0289      	lsls	r1, r1, #10
 8000c4a:	430a      	orrs	r2, r1
 8000c4c:	615a      	str	r2, [r3, #20]
	// Configure PA5 in output mode (01=1)
	MODIFY_FIELD(GPIOA->MODER, GPIO_MODER_MODER5, ESF_GPIO_MODER_OUTPUT);
 8000c4e:	2390      	movs	r3, #144	@ 0x90
 8000c50:	05db      	lsls	r3, r3, #23
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a0b      	ldr	r2, [pc, #44]	@ (8000c84 <uled_init+0x48>)
 8000c56:	401a      	ands	r2, r3
 8000c58:	2390      	movs	r3, #144	@ 0x90
 8000c5a:	05db      	lsls	r3, r3, #23
 8000c5c:	2180      	movs	r1, #128	@ 0x80
 8000c5e:	00c9      	lsls	r1, r1, #3
 8000c60:	430a      	orrs	r2, r1
 8000c62:	601a      	str	r2, [r3, #0]
	// Turn off LD2
	GPIOA->BSRR |= LD2_OFF_MSK;
 8000c64:	2390      	movs	r3, #144	@ 0x90
 8000c66:	05db      	lsls	r3, r3, #23
 8000c68:	699a      	ldr	r2, [r3, #24]
 8000c6a:	2390      	movs	r3, #144	@ 0x90
 8000c6c:	05db      	lsls	r3, r3, #23
 8000c6e:	2180      	movs	r1, #128	@ 0x80
 8000c70:	0389      	lsls	r1, r1, #14
 8000c72:	430a      	orrs	r2, r1
 8000c74:	619a      	str	r2, [r3, #24]
	// End of Alex Dean Code

	return 0;
 8000c76:	2300      	movs	r3, #0

}
 8000c78:	0018      	movs	r0, r3
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	46c0      	nop			@ (mov r8, r8)
 8000c80:	40021000 	.word	0x40021000
 8000c84:	fffff3ff 	.word	0xfffff3ff

08000c88 <uled_on>:

// Note: since this program is always in debug mode, LOG will always be on, which is undesirable.
// LOG is left in for posterity and future debugging.

int uled_on(void){
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
//	LOG("ULED ON\r\n");
	GPIOA->BSRR |= LD2_ON_MSK;
 8000c8c:	2390      	movs	r3, #144	@ 0x90
 8000c8e:	05db      	lsls	r3, r3, #23
 8000c90:	699a      	ldr	r2, [r3, #24]
 8000c92:	2390      	movs	r3, #144	@ 0x90
 8000c94:	05db      	lsls	r3, r3, #23
 8000c96:	2120      	movs	r1, #32
 8000c98:	430a      	orrs	r2, r1
 8000c9a:	619a      	str	r2, [r3, #24]
	return 0;
 8000c9c:	2300      	movs	r3, #0
}
 8000c9e:	0018      	movs	r0, r3
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <uled_off>:

int uled_off(void){
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
//	LOG("ULED OFF\r\n");
	GPIOA->BSRR |= LD2_OFF_MSK;
 8000ca8:	2390      	movs	r3, #144	@ 0x90
 8000caa:	05db      	lsls	r3, r3, #23
 8000cac:	699a      	ldr	r2, [r3, #24]
 8000cae:	2390      	movs	r3, #144	@ 0x90
 8000cb0:	05db      	lsls	r3, r3, #23
 8000cb2:	2180      	movs	r1, #128	@ 0x80
 8000cb4:	0389      	lsls	r1, r1, #14
 8000cb6:	430a      	orrs	r2, r1
 8000cb8:	619a      	str	r2, [r3, #24]
	return 0;
 8000cba:	2300      	movs	r3, #0
}
 8000cbc:	0018      	movs	r0, r3
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
	...

08000cc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	0002      	movs	r2, r0
 8000ccc:	1dfb      	adds	r3, r7, #7
 8000cce:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000cd0:	1dfb      	adds	r3, r7, #7
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	2b7f      	cmp	r3, #127	@ 0x7f
 8000cd6:	d809      	bhi.n	8000cec <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cd8:	1dfb      	adds	r3, r7, #7
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	001a      	movs	r2, r3
 8000cde:	231f      	movs	r3, #31
 8000ce0:	401a      	ands	r2, r3
 8000ce2:	4b04      	ldr	r3, [pc, #16]	@ (8000cf4 <__NVIC_EnableIRQ+0x30>)
 8000ce4:	2101      	movs	r1, #1
 8000ce6:	4091      	lsls	r1, r2
 8000ce8:	000a      	movs	r2, r1
 8000cea:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000cec:	46c0      	nop			@ (mov r8, r8)
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	b002      	add	sp, #8
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	e000e100 	.word	0xe000e100

08000cf8 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	0002      	movs	r2, r0
 8000d00:	1dfb      	adds	r3, r7, #7
 8000d02:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d04:	1dfb      	adds	r3, r7, #7
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	2b7f      	cmp	r3, #127	@ 0x7f
 8000d0a:	d80a      	bhi.n	8000d22 <__NVIC_ClearPendingIRQ+0x2a>
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d0c:	1dfb      	adds	r3, r7, #7
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	001a      	movs	r2, r3
 8000d12:	231f      	movs	r3, #31
 8000d14:	4013      	ands	r3, r2
 8000d16:	4905      	ldr	r1, [pc, #20]	@ (8000d2c <__NVIC_ClearPendingIRQ+0x34>)
 8000d18:	2201      	movs	r2, #1
 8000d1a:	409a      	lsls	r2, r3
 8000d1c:	23c0      	movs	r3, #192	@ 0xc0
 8000d1e:	005b      	lsls	r3, r3, #1
 8000d20:	50ca      	str	r2, [r1, r3]
  }
}
 8000d22:	46c0      	nop			@ (mov r8, r8)
 8000d24:	46bd      	mov	sp, r7
 8000d26:	b002      	add	sp, #8
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	46c0      	nop			@ (mov r8, r8)
 8000d2c:	e000e100 	.word	0xe000e100

08000d30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d30:	b590      	push	{r4, r7, lr}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	0002      	movs	r2, r0
 8000d38:	6039      	str	r1, [r7, #0]
 8000d3a:	1dfb      	adds	r3, r7, #7
 8000d3c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d3e:	1dfb      	adds	r3, r7, #7
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	2b7f      	cmp	r3, #127	@ 0x7f
 8000d44:	d828      	bhi.n	8000d98 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d46:	4a2f      	ldr	r2, [pc, #188]	@ (8000e04 <__NVIC_SetPriority+0xd4>)
 8000d48:	1dfb      	adds	r3, r7, #7
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	b25b      	sxtb	r3, r3
 8000d4e:	089b      	lsrs	r3, r3, #2
 8000d50:	33c0      	adds	r3, #192	@ 0xc0
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	589b      	ldr	r3, [r3, r2]
 8000d56:	1dfa      	adds	r2, r7, #7
 8000d58:	7812      	ldrb	r2, [r2, #0]
 8000d5a:	0011      	movs	r1, r2
 8000d5c:	2203      	movs	r2, #3
 8000d5e:	400a      	ands	r2, r1
 8000d60:	00d2      	lsls	r2, r2, #3
 8000d62:	21ff      	movs	r1, #255	@ 0xff
 8000d64:	4091      	lsls	r1, r2
 8000d66:	000a      	movs	r2, r1
 8000d68:	43d2      	mvns	r2, r2
 8000d6a:	401a      	ands	r2, r3
 8000d6c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	019b      	lsls	r3, r3, #6
 8000d72:	22ff      	movs	r2, #255	@ 0xff
 8000d74:	401a      	ands	r2, r3
 8000d76:	1dfb      	adds	r3, r7, #7
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	0018      	movs	r0, r3
 8000d7c:	2303      	movs	r3, #3
 8000d7e:	4003      	ands	r3, r0
 8000d80:	00db      	lsls	r3, r3, #3
 8000d82:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d84:	481f      	ldr	r0, [pc, #124]	@ (8000e04 <__NVIC_SetPriority+0xd4>)
 8000d86:	1dfb      	adds	r3, r7, #7
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	b25b      	sxtb	r3, r3
 8000d8c:	089b      	lsrs	r3, r3, #2
 8000d8e:	430a      	orrs	r2, r1
 8000d90:	33c0      	adds	r3, #192	@ 0xc0
 8000d92:	009b      	lsls	r3, r3, #2
 8000d94:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000d96:	e031      	b.n	8000dfc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d98:	4a1b      	ldr	r2, [pc, #108]	@ (8000e08 <__NVIC_SetPriority+0xd8>)
 8000d9a:	1dfb      	adds	r3, r7, #7
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	0019      	movs	r1, r3
 8000da0:	230f      	movs	r3, #15
 8000da2:	400b      	ands	r3, r1
 8000da4:	3b08      	subs	r3, #8
 8000da6:	089b      	lsrs	r3, r3, #2
 8000da8:	3306      	adds	r3, #6
 8000daa:	009b      	lsls	r3, r3, #2
 8000dac:	18d3      	adds	r3, r2, r3
 8000dae:	3304      	adds	r3, #4
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	1dfa      	adds	r2, r7, #7
 8000db4:	7812      	ldrb	r2, [r2, #0]
 8000db6:	0011      	movs	r1, r2
 8000db8:	2203      	movs	r2, #3
 8000dba:	400a      	ands	r2, r1
 8000dbc:	00d2      	lsls	r2, r2, #3
 8000dbe:	21ff      	movs	r1, #255	@ 0xff
 8000dc0:	4091      	lsls	r1, r2
 8000dc2:	000a      	movs	r2, r1
 8000dc4:	43d2      	mvns	r2, r2
 8000dc6:	401a      	ands	r2, r3
 8000dc8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	019b      	lsls	r3, r3, #6
 8000dce:	22ff      	movs	r2, #255	@ 0xff
 8000dd0:	401a      	ands	r2, r3
 8000dd2:	1dfb      	adds	r3, r7, #7
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	0018      	movs	r0, r3
 8000dd8:	2303      	movs	r3, #3
 8000dda:	4003      	ands	r3, r0
 8000ddc:	00db      	lsls	r3, r3, #3
 8000dde:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000de0:	4809      	ldr	r0, [pc, #36]	@ (8000e08 <__NVIC_SetPriority+0xd8>)
 8000de2:	1dfb      	adds	r3, r7, #7
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	001c      	movs	r4, r3
 8000de8:	230f      	movs	r3, #15
 8000dea:	4023      	ands	r3, r4
 8000dec:	3b08      	subs	r3, #8
 8000dee:	089b      	lsrs	r3, r3, #2
 8000df0:	430a      	orrs	r2, r1
 8000df2:	3306      	adds	r3, #6
 8000df4:	009b      	lsls	r3, r3, #2
 8000df6:	18c3      	adds	r3, r0, r3
 8000df8:	3304      	adds	r3, #4
 8000dfa:	601a      	str	r2, [r3, #0]
}
 8000dfc:	46c0      	nop			@ (mov r8, r8)
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	b003      	add	sp, #12
 8000e02:	bd90      	pop	{r4, r7, pc}
 8000e04:	e000e100 	.word	0xe000e100
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <usart_init>:
cbfifo tx_cb = {
    .write = 0,
    .read = 0,
    .is_full = 0};

int usart_init() {
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0

    // This code was taken from Alex Dean's Github: https://github.com/alexander-g-dean/ESF.git
    RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8000e10:	4b43      	ldr	r3, [pc, #268]	@ (8000f20 <usart_init+0x114>)
 8000e12:	69da      	ldr	r2, [r3, #28]
 8000e14:	4b42      	ldr	r3, [pc, #264]	@ (8000f20 <usart_init+0x114>)
 8000e16:	2180      	movs	r1, #128	@ 0x80
 8000e18:	0289      	lsls	r1, r1, #10
 8000e1a:	430a      	orrs	r2, r1
 8000e1c:	61da      	str	r2, [r3, #28]
    RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8000e1e:	4b40      	ldr	r3, [pc, #256]	@ (8000f20 <usart_init+0x114>)
 8000e20:	695a      	ldr	r2, [r3, #20]
 8000e22:	4b3f      	ldr	r3, [pc, #252]	@ (8000f20 <usart_init+0x114>)
 8000e24:	2180      	movs	r1, #128	@ 0x80
 8000e26:	0289      	lsls	r1, r1, #10
 8000e28:	430a      	orrs	r2, r1
 8000e2a:	615a      	str	r2, [r3, #20]

    // GPIO A pin 2 and 3 in alternate function 1 (USART2)
    // Set mode field to 2 for alternate function
    MODIFY_FIELD(GPIOA->MODER, GPIO_MODER_MODER2, ESF_GPIO_MODER_ALT_FUNC);
 8000e2c:	2390      	movs	r3, #144	@ 0x90
 8000e2e:	05db      	lsls	r3, r3, #23
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	2230      	movs	r2, #48	@ 0x30
 8000e34:	4393      	bics	r3, r2
 8000e36:	001a      	movs	r2, r3
 8000e38:	2390      	movs	r3, #144	@ 0x90
 8000e3a:	05db      	lsls	r3, r3, #23
 8000e3c:	2120      	movs	r1, #32
 8000e3e:	430a      	orrs	r2, r1
 8000e40:	601a      	str	r2, [r3, #0]
    MODIFY_FIELD(GPIOA->MODER, GPIO_MODER_MODER3, ESF_GPIO_MODER_ALT_FUNC);
 8000e42:	2390      	movs	r3, #144	@ 0x90
 8000e44:	05db      	lsls	r3, r3, #23
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	22c0      	movs	r2, #192	@ 0xc0
 8000e4a:	4393      	bics	r3, r2
 8000e4c:	001a      	movs	r2, r3
 8000e4e:	2390      	movs	r3, #144	@ 0x90
 8000e50:	05db      	lsls	r3, r3, #23
 8000e52:	2180      	movs	r1, #128	@ 0x80
 8000e54:	430a      	orrs	r2, r1
 8000e56:	601a      	str	r2, [r3, #0]
    // Select USART2 (AF = 1) as alternate function
    MODIFY_FIELD(GPIOA->AFR[0], GPIO_AFRL_AFSEL2, 1);
 8000e58:	2390      	movs	r3, #144	@ 0x90
 8000e5a:	05db      	lsls	r3, r3, #23
 8000e5c:	6a1b      	ldr	r3, [r3, #32]
 8000e5e:	4a31      	ldr	r2, [pc, #196]	@ (8000f24 <usart_init+0x118>)
 8000e60:	401a      	ands	r2, r3
 8000e62:	2390      	movs	r3, #144	@ 0x90
 8000e64:	05db      	lsls	r3, r3, #23
 8000e66:	2180      	movs	r1, #128	@ 0x80
 8000e68:	0049      	lsls	r1, r1, #1
 8000e6a:	430a      	orrs	r2, r1
 8000e6c:	621a      	str	r2, [r3, #32]
    MODIFY_FIELD(GPIOA->AFR[0], GPIO_AFRL_AFSEL3, 1);
 8000e6e:	2390      	movs	r3, #144	@ 0x90
 8000e70:	05db      	lsls	r3, r3, #23
 8000e72:	6a1b      	ldr	r3, [r3, #32]
 8000e74:	4a2c      	ldr	r2, [pc, #176]	@ (8000f28 <usart_init+0x11c>)
 8000e76:	401a      	ands	r2, r3
 8000e78:	2390      	movs	r3, #144	@ 0x90
 8000e7a:	05db      	lsls	r3, r3, #23
 8000e7c:	2180      	movs	r1, #128	@ 0x80
 8000e7e:	0149      	lsls	r1, r1, #5
 8000e80:	430a      	orrs	r2, r1
 8000e82:	621a      	str	r2, [r3, #32]
    // End of Alex Dean Code


    // Set baud rate
    USART2->BRR = USART_BRR;
 8000e84:	4b29      	ldr	r3, [pc, #164]	@ (8000f2c <usart_init+0x120>)
 8000e86:	4a2a      	ldr	r2, [pc, #168]	@ (8000f30 <usart_init+0x124>)
 8000e88:	60da      	str	r2, [r3, #12]
    // set M0 and M1 fields based on data size
    MODIFY_FIELD(USART2->CR1, USART_CR1_M, USART_M_VAL);
 8000e8a:	4b28      	ldr	r3, [pc, #160]	@ (8000f2c <usart_init+0x120>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a29      	ldr	r2, [pc, #164]	@ (8000f34 <usart_init+0x128>)
 8000e90:	401a      	ands	r2, r3
 8000e92:	4b26      	ldr	r3, [pc, #152]	@ (8000f2c <usart_init+0x120>)
 8000e94:	2180      	movs	r1, #128	@ 0x80
 8000e96:	0149      	lsls	r1, r1, #5
 8000e98:	430a      	orrs	r2, r1
 8000e9a:	601a      	str	r2, [r3, #0]
    // Set parity generation and checking
    MODIFY_FIELD(USART2->CR1, USART_CR1_PCE, USART_PCE_VAL);
 8000e9c:	4b23      	ldr	r3, [pc, #140]	@ (8000f2c <usart_init+0x120>)
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	4b22      	ldr	r3, [pc, #136]	@ (8000f2c <usart_init+0x120>)
 8000ea2:	2180      	movs	r1, #128	@ 0x80
 8000ea4:	00c9      	lsls	r1, r1, #3
 8000ea6:	430a      	orrs	r2, r1
 8000ea8:	601a      	str	r2, [r3, #0]
    MODIFY_FIELD(USART2->CR1, USART_CR1_PS, USART_PS_VAL);
 8000eaa:	4b20      	ldr	r3, [pc, #128]	@ (8000f2c <usart_init+0x120>)
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	4b1f      	ldr	r3, [pc, #124]	@ (8000f2c <usart_init+0x120>)
 8000eb0:	2180      	movs	r1, #128	@ 0x80
 8000eb2:	0089      	lsls	r1, r1, #2
 8000eb4:	430a      	orrs	r2, r1
 8000eb6:	601a      	str	r2, [r3, #0]
    // Number of stop bits
    MODIFY_FIELD(USART2->CR2, USART_CR2_STOP, STOP_BITS);
 8000eb8:	4b1c      	ldr	r3, [pc, #112]	@ (8000f2c <usart_init+0x120>)
 8000eba:	685a      	ldr	r2, [r3, #4]
 8000ebc:	4b1b      	ldr	r3, [pc, #108]	@ (8000f2c <usart_init+0x120>)
 8000ebe:	491e      	ldr	r1, [pc, #120]	@ (8000f38 <usart_init+0x12c>)
 8000ec0:	400a      	ands	r2, r1
 8000ec2:	605a      	str	r2, [r3, #4]

    // Enable transmitter and receiver and USART
    MODIFY_FIELD(USART2->CR1, USART_CR1_TE, 1);
 8000ec4:	4b19      	ldr	r3, [pc, #100]	@ (8000f2c <usart_init+0x120>)
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	4b18      	ldr	r3, [pc, #96]	@ (8000f2c <usart_init+0x120>)
 8000eca:	2108      	movs	r1, #8
 8000ecc:	430a      	orrs	r2, r1
 8000ece:	601a      	str	r2, [r3, #0]
    MODIFY_FIELD(USART2->CR1, USART_CR1_RE, 1);
 8000ed0:	4b16      	ldr	r3, [pc, #88]	@ (8000f2c <usart_init+0x120>)
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	4b15      	ldr	r3, [pc, #84]	@ (8000f2c <usart_init+0x120>)
 8000ed6:	2104      	movs	r1, #4
 8000ed8:	430a      	orrs	r2, r1
 8000eda:	601a      	str	r2, [r3, #0]
    MODIFY_FIELD(USART2->CR1, USART_CR1_UE, 1);
 8000edc:	4b13      	ldr	r3, [pc, #76]	@ (8000f2c <usart_init+0x120>)
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	4b12      	ldr	r3, [pc, #72]	@ (8000f2c <usart_init+0x120>)
 8000ee2:	2101      	movs	r1, #1
 8000ee4:	430a      	orrs	r2, r1
 8000ee6:	601a      	str	r2, [r3, #0]

    // Enable RX interrupts
    MODIFY_FIELD(USART2->CR1, USART_CR1_RXNEIE, 1);
 8000ee8:	4b10      	ldr	r3, [pc, #64]	@ (8000f2c <usart_init+0x120>)
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	4b0f      	ldr	r3, [pc, #60]	@ (8000f2c <usart_init+0x120>)
 8000eee:	2120      	movs	r1, #32
 8000ef0:	430a      	orrs	r2, r1
 8000ef2:	601a      	str	r2, [r3, #0]

    // Enable USART2 interrupts in NVIC
    NVIC_SetPriority(USART2_IRQn, 2);
 8000ef4:	2102      	movs	r1, #2
 8000ef6:	201c      	movs	r0, #28
 8000ef8:	f7ff ff1a 	bl	8000d30 <__NVIC_SetPriority>
    NVIC_ClearPendingIRQ(USART2_IRQn);
 8000efc:	201c      	movs	r0, #28
 8000efe:	f7ff fefb 	bl	8000cf8 <__NVIC_ClearPendingIRQ>
    NVIC_EnableIRQ(USART2_IRQn);
 8000f02:	201c      	movs	r0, #28
 8000f04:	f7ff fede 	bl	8000cc4 <__NVIC_EnableIRQ>

    setbuf(stdout, NULL); // Necessary to remove printf buffering that causes issues
 8000f08:	4b0c      	ldr	r3, [pc, #48]	@ (8000f3c <usart_init+0x130>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	689b      	ldr	r3, [r3, #8]
 8000f0e:	2100      	movs	r1, #0
 8000f10:	0018      	movs	r0, r3
 8000f12:	f000 fbe5 	bl	80016e0 <setbuf>

    return 0;
 8000f16:	2300      	movs	r3, #0
}
 8000f18:	0018      	movs	r0, r3
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	46c0      	nop			@ (mov r8, r8)
 8000f20:	40021000 	.word	0x40021000
 8000f24:	fffff0ff 	.word	0xfffff0ff
 8000f28:	ffff0fff 	.word	0xffff0fff
 8000f2c:	40004400 	.word	0x40004400
 8000f30:	000004e2 	.word	0x000004e2
 8000f34:	efffefff 	.word	0xefffefff
 8000f38:	ffffcfff 	.word	0xffffcfff
 8000f3c:	20000010 	.word	0x20000010

08000f40 <USART2_IRQHandler>:

// This code was copied from Alex Dean and modified by Matt Hartnett
void USART2_IRQHandler(void) {
 8000f40:	b590      	push	{r4, r7, lr}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
    uint8_t ch;
    if (USART2->ISR & USART_ISR_RXNE) { // Receive buffer not empty
 8000f46:	4b1e      	ldr	r3, [pc, #120]	@ (8000fc0 <USART2_IRQHandler+0x80>)
 8000f48:	69db      	ldr	r3, [r3, #28]
 8000f4a:	2220      	movs	r2, #32
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	d017      	beq.n	8000f80 <USART2_IRQHandler+0x40>
        // Reading from RDR will clear RXNE
        ch = USART2->RDR;
 8000f50:	4b1b      	ldr	r3, [pc, #108]	@ (8000fc0 <USART2_IRQHandler+0x80>)
 8000f52:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000f54:	b29b      	uxth	r3, r3
 8000f56:	b2da      	uxtb	r2, r3
 8000f58:	1dfb      	adds	r3, r7, #7
 8000f5a:	701a      	strb	r2, [r3, #0]
        if (cbfifo_length(&rx_cb) != cbfifo_capacity(&rx_cb)) {
 8000f5c:	4b19      	ldr	r3, [pc, #100]	@ (8000fc4 <USART2_IRQHandler+0x84>)
 8000f5e:	0018      	movs	r0, r3
 8000f60:	f7ff fa0b 	bl	800037a <cbfifo_length>
 8000f64:	0004      	movs	r4, r0
 8000f66:	4b17      	ldr	r3, [pc, #92]	@ (8000fc4 <USART2_IRQHandler+0x84>)
 8000f68:	0018      	movs	r0, r3
 8000f6a:	f7ff fa30 	bl	80003ce <cbfifo_capacity>
 8000f6e:	0003      	movs	r3, r0
 8000f70:	429c      	cmp	r4, r3
 8000f72:	d005      	beq.n	8000f80 <USART2_IRQHandler+0x40>
            cbfifo_enqueue(&rx_cb, &ch, sizeof(ch));
 8000f74:	1df9      	adds	r1, r7, #7
 8000f76:	4b13      	ldr	r3, [pc, #76]	@ (8000fc4 <USART2_IRQHandler+0x84>)
 8000f78:	2201      	movs	r2, #1
 8000f7a:	0018      	movs	r0, r3
 8000f7c:	f7ff f962 	bl	8000244 <cbfifo_enqueue>
        }
    }
    if (USART2->ISR & USART_ISR_TXE) { // Transmit buffer empty
 8000f80:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc0 <USART2_IRQHandler+0x80>)
 8000f82:	69db      	ldr	r3, [r3, #28]
 8000f84:	2280      	movs	r2, #128	@ 0x80
 8000f86:	4013      	ands	r3, r2
 8000f88:	d016      	beq.n	8000fb8 <USART2_IRQHandler+0x78>
        // Writing to TDR will clear TXE
        if (cbfifo_length(&tx_cb) != 0) { // More data to send
 8000f8a:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc8 <USART2_IRQHandler+0x88>)
 8000f8c:	0018      	movs	r0, r3
 8000f8e:	f7ff f9f4 	bl	800037a <cbfifo_length>
 8000f92:	1e03      	subs	r3, r0, #0
 8000f94:	d00a      	beq.n	8000fac <USART2_IRQHandler+0x6c>
            cbfifo_dequeue(&tx_cb, &ch, sizeof(ch));
 8000f96:	1df9      	adds	r1, r7, #7
 8000f98:	4b0b      	ldr	r3, [pc, #44]	@ (8000fc8 <USART2_IRQHandler+0x88>)
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	0018      	movs	r0, r3
 8000f9e:	f7ff f9a4 	bl	80002ea <cbfifo_dequeue>
            USART2->TDR = ch;
 8000fa2:	1dfb      	adds	r3, r7, #7
 8000fa4:	781a      	ldrb	r2, [r3, #0]
 8000fa6:	4b06      	ldr	r3, [pc, #24]	@ (8000fc0 <USART2_IRQHandler+0x80>)
 8000fa8:	851a      	strh	r2, [r3, #40]	@ 0x28
        } else { // Disable transmitter interrupt
            MODIFY_FIELD(USART2->CR1, USART_CR1_TXEIE, 0);
        }
    }
}
 8000faa:	e005      	b.n	8000fb8 <USART2_IRQHandler+0x78>
            MODIFY_FIELD(USART2->CR1, USART_CR1_TXEIE, 0);
 8000fac:	4b04      	ldr	r3, [pc, #16]	@ (8000fc0 <USART2_IRQHandler+0x80>)
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	4b03      	ldr	r3, [pc, #12]	@ (8000fc0 <USART2_IRQHandler+0x80>)
 8000fb2:	2180      	movs	r1, #128	@ 0x80
 8000fb4:	438a      	bics	r2, r1
 8000fb6:	601a      	str	r2, [r3, #0]
}
 8000fb8:	46c0      	nop			@ (mov r8, r8)
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	b003      	add	sp, #12
 8000fbe:	bd90      	pop	{r4, r7, pc}
 8000fc0:	40004400 	.word	0x40004400
 8000fc4:	20000080 	.word	0x20000080
 8000fc8:	20000108 	.word	0x20000108

08000fcc <usart_transmit>:


void usart_transmit(char *buf, int nbyte) {
 8000fcc:	b590      	push	{r4, r7, lr}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	6039      	str	r1, [r7, #0]
    while (nbyte > 0) {
 8000fd6:	e018      	b.n	800100a <usart_transmit+0x3e>
        while (cbfifo_length(&tx_cb) == cbfifo_capacity(&tx_cb))
 8000fd8:	46c0      	nop			@ (mov r8, r8)
 8000fda:	4b12      	ldr	r3, [pc, #72]	@ (8001024 <usart_transmit+0x58>)
 8000fdc:	0018      	movs	r0, r3
 8000fde:	f7ff f9cc 	bl	800037a <cbfifo_length>
 8000fe2:	0004      	movs	r4, r0
 8000fe4:	4b0f      	ldr	r3, [pc, #60]	@ (8001024 <usart_transmit+0x58>)
 8000fe6:	0018      	movs	r0, r3
 8000fe8:	f7ff f9f1 	bl	80003ce <cbfifo_capacity>
 8000fec:	0003      	movs	r3, r0
 8000fee:	429c      	cmp	r4, r3
 8000ff0:	d0f3      	beq.n	8000fda <usart_transmit+0xe>
            ; // Wait until TX CB is not full
        cbfifo_enqueue(&tx_cb, buf, 1);
 8000ff2:	6879      	ldr	r1, [r7, #4]
 8000ff4:	4b0b      	ldr	r3, [pc, #44]	@ (8001024 <usart_transmit+0x58>)
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	0018      	movs	r0, r3
 8000ffa:	f7ff f923 	bl	8000244 <cbfifo_enqueue>
        buf++;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	3301      	adds	r3, #1
 8001002:	607b      	str	r3, [r7, #4]
        nbyte--;
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	3b01      	subs	r3, #1
 8001008:	603b      	str	r3, [r7, #0]
    while (nbyte > 0) {
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	2b00      	cmp	r3, #0
 800100e:	dce3      	bgt.n	8000fd8 <usart_transmit+0xc>
    }
    MODIFY_FIELD(USART2->CR1, USART_CR1_TXEIE, 1); // Enable TXE interrupt
 8001010:	4b05      	ldr	r3, [pc, #20]	@ (8001028 <usart_transmit+0x5c>)
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	4b04      	ldr	r3, [pc, #16]	@ (8001028 <usart_transmit+0x5c>)
 8001016:	2180      	movs	r1, #128	@ 0x80
 8001018:	430a      	orrs	r2, r1
 800101a:	601a      	str	r2, [r3, #0]
}
 800101c:	46c0      	nop			@ (mov r8, r8)
 800101e:	46bd      	mov	sp, r7
 8001020:	b003      	add	sp, #12
 8001022:	bd90      	pop	{r4, r7, pc}
 8001024:	20000108 	.word	0x20000108
 8001028:	40004400 	.word	0x40004400

0800102c <usart_receive_blocking>:

void usart_receive_blocking(char *buf, int num_chars) {
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	6039      	str	r1, [r7, #0]
    // This function gets num_chars, blocking if they aren't all ready yet
    while (num_chars > 0) {
 8001036:	e012      	b.n	800105e <usart_receive_blocking+0x32>
        while (cbfifo_length(&rx_cb) == 0) // Block until some data is received
 8001038:	46c0      	nop			@ (mov r8, r8)
 800103a:	4b0d      	ldr	r3, [pc, #52]	@ (8001070 <usart_receive_blocking+0x44>)
 800103c:	0018      	movs	r0, r3
 800103e:	f7ff f99c 	bl	800037a <cbfifo_length>
 8001042:	1e03      	subs	r3, r0, #0
 8001044:	d0f9      	beq.n	800103a <usart_receive_blocking+0xe>
            ;
        cbfifo_dequeue(&rx_cb, buf, 1);
 8001046:	6879      	ldr	r1, [r7, #4]
 8001048:	4b09      	ldr	r3, [pc, #36]	@ (8001070 <usart_receive_blocking+0x44>)
 800104a:	2201      	movs	r2, #1
 800104c:	0018      	movs	r0, r3
 800104e:	f7ff f94c 	bl	80002ea <cbfifo_dequeue>
        num_chars--; // Got another character
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	3b01      	subs	r3, #1
 8001056:	603b      	str	r3, [r7, #0]
        buf++;       // Advance buffer pointer to space for next character
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	3301      	adds	r3, #1
 800105c:	607b      	str	r3, [r7, #4]
    while (num_chars > 0) {
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	2b00      	cmp	r3, #0
 8001062:	dce9      	bgt.n	8001038 <usart_receive_blocking+0xc>
    }
}
 8001064:	46c0      	nop			@ (mov r8, r8)
 8001066:	46c0      	nop			@ (mov r8, r8)
 8001068:	46bd      	mov	sp, r7
 800106a:	b002      	add	sp, #8
 800106c:	bd80      	pop	{r7, pc}
 800106e:	46c0      	nop			@ (mov r8, r8)
 8001070:	20000080 	.word	0x20000080

08001074 <__io_putchar>:
    while ((USART2->ISR & USART_ISR_RXNE) == 0)
        ;
    return USART2->RDR;
}

int __io_putchar(int ch) {
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
    char buf = (char)ch;  // Convert int to char for transmission
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	b2da      	uxtb	r2, r3
 8001080:	210f      	movs	r1, #15
 8001082:	187b      	adds	r3, r7, r1
 8001084:	701a      	strb	r2, [r3, #0]
    usart_transmit(&buf, 1);  // Send one character
 8001086:	187b      	adds	r3, r7, r1
 8001088:	2101      	movs	r1, #1
 800108a:	0018      	movs	r0, r3
 800108c:	f7ff ff9e 	bl	8000fcc <usart_transmit>
    return 1;  // Indicate success
 8001090:	2301      	movs	r3, #1
}
 8001092:	0018      	movs	r0, r3
 8001094:	46bd      	mov	sp, r7
 8001096:	b004      	add	sp, #16
 8001098:	bd80      	pop	{r7, pc}

0800109a <__io_getchar>:

int __io_getchar(void) {
 800109a:	b580      	push	{r7, lr}
 800109c:	b082      	sub	sp, #8
 800109e:	af00      	add	r7, sp, #0
    char buf;
    usart_receive_blocking(&buf, 1);  // Receive one character in blocking mode
 80010a0:	1dfb      	adds	r3, r7, #7
 80010a2:	2101      	movs	r1, #1
 80010a4:	0018      	movs	r0, r3
 80010a6:	f7ff ffc1 	bl	800102c <usart_receive_blocking>
    return (int)buf;  // Return the received character
 80010aa:	1dfb      	adds	r3, r7, #7
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	0018      	movs	r0, r3
 80010b0:	46bd      	mov	sp, r7
 80010b2:	b002      	add	sp, #8
 80010b4:	bd80      	pop	{r7, pc}
	...

080010b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010b8:	480e      	ldr	r0, [pc, #56]	@ (80010f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010ba:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80010bc:	f000 f866 	bl	800118c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010c0:	480d      	ldr	r0, [pc, #52]	@ (80010f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80010c2:	490e      	ldr	r1, [pc, #56]	@ (80010fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80010c4:	4a0e      	ldr	r2, [pc, #56]	@ (8001100 <LoopForever+0xe>)
  movs r3, #0
 80010c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010c8:	e002      	b.n	80010d0 <LoopCopyDataInit>

080010ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ce:	3304      	adds	r3, #4

080010d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010d4:	d3f9      	bcc.n	80010ca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010d6:	4a0b      	ldr	r2, [pc, #44]	@ (8001104 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010d8:	4c0b      	ldr	r4, [pc, #44]	@ (8001108 <LoopForever+0x16>)
  movs r3, #0
 80010da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010dc:	e001      	b.n	80010e2 <LoopFillZerobss>

080010de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010e0:	3204      	adds	r2, #4

080010e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010e4:	d3fb      	bcc.n	80010de <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80010e6:	f000 fd63 	bl	8001bb0 <__libc_init_array>
/* LP - Update system core clocks */
  bl SystemCoreClockUpdate
 80010ea:	f000 f895 	bl	8001218 <SystemCoreClockUpdate>
/* Call the application's entry point.*/
  bl main
 80010ee:	f7ff fa31 	bl	8000554 <main>

080010f2 <LoopForever>:

LoopForever:
  b LoopForever
 80010f2:	e7fe      	b.n	80010f2 <LoopForever>
  ldr   r0, =_estack
 80010f4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80010f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010fc:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001100:	0800315c 	.word	0x0800315c
  ldr r2, =_sbss
 8001104:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001108:	200002dc 	.word	0x200002dc

0800110c <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800110c:	e7fe      	b.n	800110c <ADC_COMP_IRQHandler>
	...

08001110 <Set_Clocks_To_48MHz>:
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
 8001114:	4b1a      	ldr	r3, [pc, #104]	@ (8001180 <Set_Clocks_To_48MHz+0x70>)
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	4b19      	ldr	r3, [pc, #100]	@ (8001180 <Set_Clocks_To_48MHz+0x70>)
 800111a:	2101      	movs	r1, #1
 800111c:	430a      	orrs	r2, r1
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	4b18      	ldr	r3, [pc, #96]	@ (8001184 <Set_Clocks_To_48MHz+0x74>)
 8001122:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001124:	4b17      	ldr	r3, [pc, #92]	@ (8001184 <Set_Clocks_To_48MHz+0x74>)
 8001126:	2180      	movs	r1, #128	@ 0x80
 8001128:	0249      	lsls	r1, r1, #9
 800112a:	430a      	orrs	r2, r1
 800112c:	635a      	str	r2, [r3, #52]	@ 0x34
 800112e:	46c0      	nop			@ (mov r8, r8)
 8001130:	4b14      	ldr	r3, [pc, #80]	@ (8001184 <Set_Clocks_To_48MHz+0x74>)
 8001132:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001134:	2380      	movs	r3, #128	@ 0x80
 8001136:	029b      	lsls	r3, r3, #10
 8001138:	4013      	ands	r3, r2
 800113a:	d0f9      	beq.n	8001130 <Set_Clocks_To_48MHz+0x20>
 800113c:	4b11      	ldr	r3, [pc, #68]	@ (8001184 <Set_Clocks_To_48MHz+0x74>)
 800113e:	685a      	ldr	r2, [r3, #4]
 8001140:	4b10      	ldr	r3, [pc, #64]	@ (8001184 <Set_Clocks_To_48MHz+0x74>)
 8001142:	21f0      	movs	r1, #240	@ 0xf0
 8001144:	438a      	bics	r2, r1
 8001146:	605a      	str	r2, [r3, #4]
 8001148:	4b0e      	ldr	r3, [pc, #56]	@ (8001184 <Set_Clocks_To_48MHz+0x74>)
 800114a:	685a      	ldr	r2, [r3, #4]
 800114c:	4b0d      	ldr	r3, [pc, #52]	@ (8001184 <Set_Clocks_To_48MHz+0x74>)
 800114e:	2103      	movs	r1, #3
 8001150:	430a      	orrs	r2, r1
 8001152:	605a      	str	r2, [r3, #4]
 8001154:	46c0      	nop			@ (mov r8, r8)
 8001156:	4b0b      	ldr	r3, [pc, #44]	@ (8001184 <Set_Clocks_To_48MHz+0x74>)
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	089a      	lsrs	r2, r3, #2
 800115c:	4b09      	ldr	r3, [pc, #36]	@ (8001184 <Set_Clocks_To_48MHz+0x74>)
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	4053      	eors	r3, r2
 8001162:	2203      	movs	r2, #3
 8001164:	4013      	ands	r3, r2
 8001166:	d1f6      	bne.n	8001156 <Set_Clocks_To_48MHz+0x46>
 8001168:	4b06      	ldr	r3, [pc, #24]	@ (8001184 <Set_Clocks_To_48MHz+0x74>)
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	4a06      	ldr	r2, [pc, #24]	@ (8001188 <Set_Clocks_To_48MHz+0x78>)
 800116e:	401a      	ands	r2, r3
 8001170:	4b04      	ldr	r3, [pc, #16]	@ (8001184 <Set_Clocks_To_48MHz+0x74>)
 8001172:	2180      	movs	r1, #128	@ 0x80
 8001174:	00c9      	lsls	r1, r1, #3
 8001176:	430a      	orrs	r2, r1
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	46c0      	nop			@ (mov r8, r8)
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	40022000 	.word	0x40022000
 8001184:	40021000 	.word	0x40021000
 8001188:	fffff8ff 	.word	0xfffff8ff

0800118c <SystemInit>:
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
 8001190:	4b1b      	ldr	r3, [pc, #108]	@ (8001200 <SystemInit+0x74>)
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	4b1a      	ldr	r3, [pc, #104]	@ (8001200 <SystemInit+0x74>)
 8001196:	2101      	movs	r1, #1
 8001198:	430a      	orrs	r2, r1
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	4b18      	ldr	r3, [pc, #96]	@ (8001200 <SystemInit+0x74>)
 800119e:	685a      	ldr	r2, [r3, #4]
 80011a0:	4b17      	ldr	r3, [pc, #92]	@ (8001200 <SystemInit+0x74>)
 80011a2:	4918      	ldr	r1, [pc, #96]	@ (8001204 <SystemInit+0x78>)
 80011a4:	400a      	ands	r2, r1
 80011a6:	605a      	str	r2, [r3, #4]
 80011a8:	4b15      	ldr	r3, [pc, #84]	@ (8001200 <SystemInit+0x74>)
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	4b14      	ldr	r3, [pc, #80]	@ (8001200 <SystemInit+0x74>)
 80011ae:	4916      	ldr	r1, [pc, #88]	@ (8001208 <SystemInit+0x7c>)
 80011b0:	400a      	ands	r2, r1
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	4b12      	ldr	r3, [pc, #72]	@ (8001200 <SystemInit+0x74>)
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	4b11      	ldr	r3, [pc, #68]	@ (8001200 <SystemInit+0x74>)
 80011ba:	4914      	ldr	r1, [pc, #80]	@ (800120c <SystemInit+0x80>)
 80011bc:	400a      	ands	r2, r1
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001200 <SystemInit+0x74>)
 80011c2:	685a      	ldr	r2, [r3, #4]
 80011c4:	4b0e      	ldr	r3, [pc, #56]	@ (8001200 <SystemInit+0x74>)
 80011c6:	4912      	ldr	r1, [pc, #72]	@ (8001210 <SystemInit+0x84>)
 80011c8:	400a      	ands	r2, r1
 80011ca:	605a      	str	r2, [r3, #4]
 80011cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001200 <SystemInit+0x74>)
 80011ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80011d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001200 <SystemInit+0x74>)
 80011d2:	210f      	movs	r1, #15
 80011d4:	438a      	bics	r2, r1
 80011d6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80011d8:	4b09      	ldr	r3, [pc, #36]	@ (8001200 <SystemInit+0x74>)
 80011da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80011dc:	4b08      	ldr	r3, [pc, #32]	@ (8001200 <SystemInit+0x74>)
 80011de:	490d      	ldr	r1, [pc, #52]	@ (8001214 <SystemInit+0x88>)
 80011e0:	400a      	ands	r2, r1
 80011e2:	631a      	str	r2, [r3, #48]	@ 0x30
 80011e4:	4b06      	ldr	r3, [pc, #24]	@ (8001200 <SystemInit+0x74>)
 80011e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80011e8:	4b05      	ldr	r3, [pc, #20]	@ (8001200 <SystemInit+0x74>)
 80011ea:	2101      	movs	r1, #1
 80011ec:	438a      	bics	r2, r1
 80011ee:	635a      	str	r2, [r3, #52]	@ 0x34
 80011f0:	4b03      	ldr	r3, [pc, #12]	@ (8001200 <SystemInit+0x74>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	609a      	str	r2, [r3, #8]
 80011f6:	f7ff ff8b 	bl	8001110 <Set_Clocks_To_48MHz>
 80011fa:	46c0      	nop			@ (mov r8, r8)
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40021000 	.word	0x40021000
 8001204:	08ffb80c 	.word	0x08ffb80c
 8001208:	fef6ffff 	.word	0xfef6ffff
 800120c:	fffbffff 	.word	0xfffbffff
 8001210:	ffc0ffff 	.word	0xffc0ffff
 8001214:	fff0feac 	.word	0xfff0feac

08001218 <SystemCoreClockUpdate>:
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	2300      	movs	r3, #0
 8001220:	60fb      	str	r3, [r7, #12]
 8001222:	2300      	movs	r3, #0
 8001224:	60bb      	str	r3, [r7, #8]
 8001226:	2300      	movs	r3, #0
 8001228:	607b      	str	r3, [r7, #4]
 800122a:	2300      	movs	r3, #0
 800122c:	603b      	str	r3, [r7, #0]
 800122e:	4b3d      	ldr	r3, [pc, #244]	@ (8001324 <SystemCoreClockUpdate+0x10c>)
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	220c      	movs	r2, #12
 8001234:	4013      	ands	r3, r2
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	2b0c      	cmp	r3, #12
 800123c:	d00f      	beq.n	800125e <SystemCoreClockUpdate+0x46>
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	2b0c      	cmp	r3, #12
 8001242:	d859      	bhi.n	80012f8 <SystemCoreClockUpdate+0xe0>
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	2b08      	cmp	r3, #8
 8001248:	d015      	beq.n	8001276 <SystemCoreClockUpdate+0x5e>
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	2b08      	cmp	r3, #8
 800124e:	d853      	bhi.n	80012f8 <SystemCoreClockUpdate+0xe0>
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d007      	beq.n	8001266 <SystemCoreClockUpdate+0x4e>
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	2b04      	cmp	r3, #4
 800125a:	d008      	beq.n	800126e <SystemCoreClockUpdate+0x56>
 800125c:	e04c      	b.n	80012f8 <SystemCoreClockUpdate+0xe0>
 800125e:	4b32      	ldr	r3, [pc, #200]	@ (8001328 <SystemCoreClockUpdate+0x110>)
 8001260:	4a32      	ldr	r2, [pc, #200]	@ (800132c <SystemCoreClockUpdate+0x114>)
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	e04c      	b.n	8001300 <SystemCoreClockUpdate+0xe8>
 8001266:	4b30      	ldr	r3, [pc, #192]	@ (8001328 <SystemCoreClockUpdate+0x110>)
 8001268:	4a31      	ldr	r2, [pc, #196]	@ (8001330 <SystemCoreClockUpdate+0x118>)
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	e048      	b.n	8001300 <SystemCoreClockUpdate+0xe8>
 800126e:	4b2e      	ldr	r3, [pc, #184]	@ (8001328 <SystemCoreClockUpdate+0x110>)
 8001270:	4a2f      	ldr	r2, [pc, #188]	@ (8001330 <SystemCoreClockUpdate+0x118>)
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	e044      	b.n	8001300 <SystemCoreClockUpdate+0xe8>
 8001276:	4b2b      	ldr	r3, [pc, #172]	@ (8001324 <SystemCoreClockUpdate+0x10c>)
 8001278:	685a      	ldr	r2, [r3, #4]
 800127a:	23f0      	movs	r3, #240	@ 0xf0
 800127c:	039b      	lsls	r3, r3, #14
 800127e:	4013      	ands	r3, r2
 8001280:	60bb      	str	r3, [r7, #8]
 8001282:	4b28      	ldr	r3, [pc, #160]	@ (8001324 <SystemCoreClockUpdate+0x10c>)
 8001284:	685a      	ldr	r2, [r3, #4]
 8001286:	23c0      	movs	r3, #192	@ 0xc0
 8001288:	025b      	lsls	r3, r3, #9
 800128a:	4013      	ands	r3, r2
 800128c:	607b      	str	r3, [r7, #4]
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	0c9b      	lsrs	r3, r3, #18
 8001292:	3302      	adds	r3, #2
 8001294:	60bb      	str	r3, [r7, #8]
 8001296:	4b23      	ldr	r3, [pc, #140]	@ (8001324 <SystemCoreClockUpdate+0x10c>)
 8001298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800129a:	220f      	movs	r2, #15
 800129c:	4013      	ands	r3, r2
 800129e:	3301      	adds	r3, #1
 80012a0:	603b      	str	r3, [r7, #0]
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	2380      	movs	r3, #128	@ 0x80
 80012a6:	025b      	lsls	r3, r3, #9
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d10a      	bne.n	80012c2 <SystemCoreClockUpdate+0xaa>
 80012ac:	6839      	ldr	r1, [r7, #0]
 80012ae:	4820      	ldr	r0, [pc, #128]	@ (8001330 <SystemCoreClockUpdate+0x118>)
 80012b0:	f7fe ff3c 	bl	800012c <__udivsi3>
 80012b4:	0003      	movs	r3, r0
 80012b6:	001a      	movs	r2, r3
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	435a      	muls	r2, r3
 80012bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001328 <SystemCoreClockUpdate+0x110>)
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	e01e      	b.n	8001300 <SystemCoreClockUpdate+0xe8>
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	23c0      	movs	r3, #192	@ 0xc0
 80012c6:	025b      	lsls	r3, r3, #9
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d10a      	bne.n	80012e2 <SystemCoreClockUpdate+0xca>
 80012cc:	6839      	ldr	r1, [r7, #0]
 80012ce:	4817      	ldr	r0, [pc, #92]	@ (800132c <SystemCoreClockUpdate+0x114>)
 80012d0:	f7fe ff2c 	bl	800012c <__udivsi3>
 80012d4:	0003      	movs	r3, r0
 80012d6:	001a      	movs	r2, r3
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	435a      	muls	r2, r3
 80012dc:	4b12      	ldr	r3, [pc, #72]	@ (8001328 <SystemCoreClockUpdate+0x110>)
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	e00e      	b.n	8001300 <SystemCoreClockUpdate+0xe8>
 80012e2:	6839      	ldr	r1, [r7, #0]
 80012e4:	4812      	ldr	r0, [pc, #72]	@ (8001330 <SystemCoreClockUpdate+0x118>)
 80012e6:	f7fe ff21 	bl	800012c <__udivsi3>
 80012ea:	0003      	movs	r3, r0
 80012ec:	001a      	movs	r2, r3
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	435a      	muls	r2, r3
 80012f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001328 <SystemCoreClockUpdate+0x110>)
 80012f4:	601a      	str	r2, [r3, #0]
 80012f6:	e003      	b.n	8001300 <SystemCoreClockUpdate+0xe8>
 80012f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001328 <SystemCoreClockUpdate+0x110>)
 80012fa:	4a0d      	ldr	r2, [pc, #52]	@ (8001330 <SystemCoreClockUpdate+0x118>)
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	46c0      	nop			@ (mov r8, r8)
 8001300:	4b08      	ldr	r3, [pc, #32]	@ (8001324 <SystemCoreClockUpdate+0x10c>)
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	091b      	lsrs	r3, r3, #4
 8001306:	220f      	movs	r2, #15
 8001308:	4013      	ands	r3, r2
 800130a:	4a0a      	ldr	r2, [pc, #40]	@ (8001334 <SystemCoreClockUpdate+0x11c>)
 800130c:	5cd3      	ldrb	r3, [r2, r3]
 800130e:	60fb      	str	r3, [r7, #12]
 8001310:	4b05      	ldr	r3, [pc, #20]	@ (8001328 <SystemCoreClockUpdate+0x110>)
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	40da      	lsrs	r2, r3
 8001318:	4b03      	ldr	r3, [pc, #12]	@ (8001328 <SystemCoreClockUpdate+0x110>)
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	46c0      	nop			@ (mov r8, r8)
 800131e:	46bd      	mov	sp, r7
 8001320:	b004      	add	sp, #16
 8001322:	bd80      	pop	{r7, pc}
 8001324:	40021000 	.word	0x40021000
 8001328:	20000000 	.word	0x20000000
 800132c:	02dc6c00 	.word	0x02dc6c00
 8001330:	007a1200 	.word	0x007a1200
 8001334:	08002ff4 	.word	0x08002ff4

08001338 <atoi>:
 8001338:	b510      	push	{r4, lr}
 800133a:	220a      	movs	r2, #10
 800133c:	2100      	movs	r1, #0
 800133e:	f000 f88f 	bl	8001460 <strtol>
 8001342:	bd10      	pop	{r4, pc}

08001344 <_strtol_l.constprop.0>:
 8001344:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001346:	b085      	sub	sp, #20
 8001348:	0017      	movs	r7, r2
 800134a:	001e      	movs	r6, r3
 800134c:	9003      	str	r0, [sp, #12]
 800134e:	9101      	str	r1, [sp, #4]
 8001350:	2b24      	cmp	r3, #36	@ 0x24
 8001352:	d844      	bhi.n	80013de <_strtol_l.constprop.0+0x9a>
 8001354:	000c      	movs	r4, r1
 8001356:	2b01      	cmp	r3, #1
 8001358:	d041      	beq.n	80013de <_strtol_l.constprop.0+0x9a>
 800135a:	4b3d      	ldr	r3, [pc, #244]	@ (8001450 <_strtol_l.constprop.0+0x10c>)
 800135c:	2208      	movs	r2, #8
 800135e:	469c      	mov	ip, r3
 8001360:	0023      	movs	r3, r4
 8001362:	4661      	mov	r1, ip
 8001364:	781d      	ldrb	r5, [r3, #0]
 8001366:	3401      	adds	r4, #1
 8001368:	5d48      	ldrb	r0, [r1, r5]
 800136a:	0001      	movs	r1, r0
 800136c:	4011      	ands	r1, r2
 800136e:	4210      	tst	r0, r2
 8001370:	d1f6      	bne.n	8001360 <_strtol_l.constprop.0+0x1c>
 8001372:	2d2d      	cmp	r5, #45	@ 0x2d
 8001374:	d13a      	bne.n	80013ec <_strtol_l.constprop.0+0xa8>
 8001376:	7825      	ldrb	r5, [r4, #0]
 8001378:	1c9c      	adds	r4, r3, #2
 800137a:	2301      	movs	r3, #1
 800137c:	9300      	str	r3, [sp, #0]
 800137e:	2210      	movs	r2, #16
 8001380:	0033      	movs	r3, r6
 8001382:	4393      	bics	r3, r2
 8001384:	d109      	bne.n	800139a <_strtol_l.constprop.0+0x56>
 8001386:	2d30      	cmp	r5, #48	@ 0x30
 8001388:	d136      	bne.n	80013f8 <_strtol_l.constprop.0+0xb4>
 800138a:	2120      	movs	r1, #32
 800138c:	7823      	ldrb	r3, [r4, #0]
 800138e:	438b      	bics	r3, r1
 8001390:	2b58      	cmp	r3, #88	@ 0x58
 8001392:	d131      	bne.n	80013f8 <_strtol_l.constprop.0+0xb4>
 8001394:	0016      	movs	r6, r2
 8001396:	7865      	ldrb	r5, [r4, #1]
 8001398:	3402      	adds	r4, #2
 800139a:	4a2e      	ldr	r2, [pc, #184]	@ (8001454 <_strtol_l.constprop.0+0x110>)
 800139c:	9b00      	ldr	r3, [sp, #0]
 800139e:	4694      	mov	ip, r2
 80013a0:	4463      	add	r3, ip
 80013a2:	0031      	movs	r1, r6
 80013a4:	0018      	movs	r0, r3
 80013a6:	9302      	str	r3, [sp, #8]
 80013a8:	f7fe ff46 	bl	8000238 <__aeabi_uidivmod>
 80013ac:	2200      	movs	r2, #0
 80013ae:	4684      	mov	ip, r0
 80013b0:	0010      	movs	r0, r2
 80013b2:	002b      	movs	r3, r5
 80013b4:	3b30      	subs	r3, #48	@ 0x30
 80013b6:	2b09      	cmp	r3, #9
 80013b8:	d825      	bhi.n	8001406 <_strtol_l.constprop.0+0xc2>
 80013ba:	001d      	movs	r5, r3
 80013bc:	42ae      	cmp	r6, r5
 80013be:	dd31      	ble.n	8001424 <_strtol_l.constprop.0+0xe0>
 80013c0:	1c53      	adds	r3, r2, #1
 80013c2:	d009      	beq.n	80013d8 <_strtol_l.constprop.0+0x94>
 80013c4:	2201      	movs	r2, #1
 80013c6:	4252      	negs	r2, r2
 80013c8:	4584      	cmp	ip, r0
 80013ca:	d305      	bcc.n	80013d8 <_strtol_l.constprop.0+0x94>
 80013cc:	d101      	bne.n	80013d2 <_strtol_l.constprop.0+0x8e>
 80013ce:	42a9      	cmp	r1, r5
 80013d0:	db25      	blt.n	800141e <_strtol_l.constprop.0+0xda>
 80013d2:	2201      	movs	r2, #1
 80013d4:	4370      	muls	r0, r6
 80013d6:	1828      	adds	r0, r5, r0
 80013d8:	7825      	ldrb	r5, [r4, #0]
 80013da:	3401      	adds	r4, #1
 80013dc:	e7e9      	b.n	80013b2 <_strtol_l.constprop.0+0x6e>
 80013de:	f000 fbe1 	bl	8001ba4 <__errno>
 80013e2:	2316      	movs	r3, #22
 80013e4:	6003      	str	r3, [r0, #0]
 80013e6:	2000      	movs	r0, #0
 80013e8:	b005      	add	sp, #20
 80013ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013ec:	9100      	str	r1, [sp, #0]
 80013ee:	2d2b      	cmp	r5, #43	@ 0x2b
 80013f0:	d1c5      	bne.n	800137e <_strtol_l.constprop.0+0x3a>
 80013f2:	7825      	ldrb	r5, [r4, #0]
 80013f4:	1c9c      	adds	r4, r3, #2
 80013f6:	e7c2      	b.n	800137e <_strtol_l.constprop.0+0x3a>
 80013f8:	2e00      	cmp	r6, #0
 80013fa:	d1ce      	bne.n	800139a <_strtol_l.constprop.0+0x56>
 80013fc:	3608      	adds	r6, #8
 80013fe:	2d30      	cmp	r5, #48	@ 0x30
 8001400:	d0cb      	beq.n	800139a <_strtol_l.constprop.0+0x56>
 8001402:	3602      	adds	r6, #2
 8001404:	e7c9      	b.n	800139a <_strtol_l.constprop.0+0x56>
 8001406:	002b      	movs	r3, r5
 8001408:	3b41      	subs	r3, #65	@ 0x41
 800140a:	2b19      	cmp	r3, #25
 800140c:	d801      	bhi.n	8001412 <_strtol_l.constprop.0+0xce>
 800140e:	3d37      	subs	r5, #55	@ 0x37
 8001410:	e7d4      	b.n	80013bc <_strtol_l.constprop.0+0x78>
 8001412:	002b      	movs	r3, r5
 8001414:	3b61      	subs	r3, #97	@ 0x61
 8001416:	2b19      	cmp	r3, #25
 8001418:	d804      	bhi.n	8001424 <_strtol_l.constprop.0+0xe0>
 800141a:	3d57      	subs	r5, #87	@ 0x57
 800141c:	e7ce      	b.n	80013bc <_strtol_l.constprop.0+0x78>
 800141e:	2201      	movs	r2, #1
 8001420:	4252      	negs	r2, r2
 8001422:	e7d9      	b.n	80013d8 <_strtol_l.constprop.0+0x94>
 8001424:	1c53      	adds	r3, r2, #1
 8001426:	d108      	bne.n	800143a <_strtol_l.constprop.0+0xf6>
 8001428:	2322      	movs	r3, #34	@ 0x22
 800142a:	9a03      	ldr	r2, [sp, #12]
 800142c:	9802      	ldr	r0, [sp, #8]
 800142e:	6013      	str	r3, [r2, #0]
 8001430:	2f00      	cmp	r7, #0
 8001432:	d0d9      	beq.n	80013e8 <_strtol_l.constprop.0+0xa4>
 8001434:	1e63      	subs	r3, r4, #1
 8001436:	9301      	str	r3, [sp, #4]
 8001438:	e007      	b.n	800144a <_strtol_l.constprop.0+0x106>
 800143a:	9b00      	ldr	r3, [sp, #0]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d000      	beq.n	8001442 <_strtol_l.constprop.0+0xfe>
 8001440:	4240      	negs	r0, r0
 8001442:	2f00      	cmp	r7, #0
 8001444:	d0d0      	beq.n	80013e8 <_strtol_l.constprop.0+0xa4>
 8001446:	2a00      	cmp	r2, #0
 8001448:	d1f4      	bne.n	8001434 <_strtol_l.constprop.0+0xf0>
 800144a:	9b01      	ldr	r3, [sp, #4]
 800144c:	603b      	str	r3, [r7, #0]
 800144e:	e7cb      	b.n	80013e8 <_strtol_l.constprop.0+0xa4>
 8001450:	08003005 	.word	0x08003005
 8001454:	7fffffff 	.word	0x7fffffff

08001458 <_strtol_r>:
 8001458:	b510      	push	{r4, lr}
 800145a:	f7ff ff73 	bl	8001344 <_strtol_l.constprop.0>
 800145e:	bd10      	pop	{r4, pc}

08001460 <strtol>:
 8001460:	b510      	push	{r4, lr}
 8001462:	4c04      	ldr	r4, [pc, #16]	@ (8001474 <strtol+0x14>)
 8001464:	0013      	movs	r3, r2
 8001466:	000a      	movs	r2, r1
 8001468:	0001      	movs	r1, r0
 800146a:	6820      	ldr	r0, [r4, #0]
 800146c:	f7ff ff6a 	bl	8001344 <_strtol_l.constprop.0>
 8001470:	bd10      	pop	{r4, pc}
 8001472:	46c0      	nop			@ (mov r8, r8)
 8001474:	20000010 	.word	0x20000010

08001478 <std>:
 8001478:	2300      	movs	r3, #0
 800147a:	b510      	push	{r4, lr}
 800147c:	0004      	movs	r4, r0
 800147e:	6003      	str	r3, [r0, #0]
 8001480:	6043      	str	r3, [r0, #4]
 8001482:	6083      	str	r3, [r0, #8]
 8001484:	8181      	strh	r1, [r0, #12]
 8001486:	6643      	str	r3, [r0, #100]	@ 0x64
 8001488:	81c2      	strh	r2, [r0, #14]
 800148a:	6103      	str	r3, [r0, #16]
 800148c:	6143      	str	r3, [r0, #20]
 800148e:	6183      	str	r3, [r0, #24]
 8001490:	0019      	movs	r1, r3
 8001492:	2208      	movs	r2, #8
 8001494:	305c      	adds	r0, #92	@ 0x5c
 8001496:	f000 faf9 	bl	8001a8c <memset>
 800149a:	4b0b      	ldr	r3, [pc, #44]	@ (80014c8 <std+0x50>)
 800149c:	6224      	str	r4, [r4, #32]
 800149e:	6263      	str	r3, [r4, #36]	@ 0x24
 80014a0:	4b0a      	ldr	r3, [pc, #40]	@ (80014cc <std+0x54>)
 80014a2:	62a3      	str	r3, [r4, #40]	@ 0x28
 80014a4:	4b0a      	ldr	r3, [pc, #40]	@ (80014d0 <std+0x58>)
 80014a6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80014a8:	4b0a      	ldr	r3, [pc, #40]	@ (80014d4 <std+0x5c>)
 80014aa:	6323      	str	r3, [r4, #48]	@ 0x30
 80014ac:	4b0a      	ldr	r3, [pc, #40]	@ (80014d8 <std+0x60>)
 80014ae:	429c      	cmp	r4, r3
 80014b0:	d005      	beq.n	80014be <std+0x46>
 80014b2:	4b0a      	ldr	r3, [pc, #40]	@ (80014dc <std+0x64>)
 80014b4:	429c      	cmp	r4, r3
 80014b6:	d002      	beq.n	80014be <std+0x46>
 80014b8:	4b09      	ldr	r3, [pc, #36]	@ (80014e0 <std+0x68>)
 80014ba:	429c      	cmp	r4, r3
 80014bc:	d103      	bne.n	80014c6 <std+0x4e>
 80014be:	0020      	movs	r0, r4
 80014c0:	3058      	adds	r0, #88	@ 0x58
 80014c2:	f000 fb99 	bl	8001bf8 <__retarget_lock_init_recursive>
 80014c6:	bd10      	pop	{r4, pc}
 80014c8:	080018b1 	.word	0x080018b1
 80014cc:	080018dd 	.word	0x080018dd
 80014d0:	08001915 	.word	0x08001915
 80014d4:	08001941 	.word	0x08001941
 80014d8:	20000190 	.word	0x20000190
 80014dc:	200001f8 	.word	0x200001f8
 80014e0:	20000260 	.word	0x20000260

080014e4 <stdio_exit_handler>:
 80014e4:	b510      	push	{r4, lr}
 80014e6:	4a03      	ldr	r2, [pc, #12]	@ (80014f4 <stdio_exit_handler+0x10>)
 80014e8:	4903      	ldr	r1, [pc, #12]	@ (80014f8 <stdio_exit_handler+0x14>)
 80014ea:	4804      	ldr	r0, [pc, #16]	@ (80014fc <stdio_exit_handler+0x18>)
 80014ec:	f000 f86c 	bl	80015c8 <_fwalk_sglue>
 80014f0:	bd10      	pop	{r4, pc}
 80014f2:	46c0      	nop			@ (mov r8, r8)
 80014f4:	20000004 	.word	0x20000004
 80014f8:	08002ad9 	.word	0x08002ad9
 80014fc:	20000014 	.word	0x20000014

08001500 <cleanup_stdio>:
 8001500:	6841      	ldr	r1, [r0, #4]
 8001502:	4b0b      	ldr	r3, [pc, #44]	@ (8001530 <cleanup_stdio+0x30>)
 8001504:	b510      	push	{r4, lr}
 8001506:	0004      	movs	r4, r0
 8001508:	4299      	cmp	r1, r3
 800150a:	d001      	beq.n	8001510 <cleanup_stdio+0x10>
 800150c:	f001 fae4 	bl	8002ad8 <_fflush_r>
 8001510:	68a1      	ldr	r1, [r4, #8]
 8001512:	4b08      	ldr	r3, [pc, #32]	@ (8001534 <cleanup_stdio+0x34>)
 8001514:	4299      	cmp	r1, r3
 8001516:	d002      	beq.n	800151e <cleanup_stdio+0x1e>
 8001518:	0020      	movs	r0, r4
 800151a:	f001 fadd 	bl	8002ad8 <_fflush_r>
 800151e:	68e1      	ldr	r1, [r4, #12]
 8001520:	4b05      	ldr	r3, [pc, #20]	@ (8001538 <cleanup_stdio+0x38>)
 8001522:	4299      	cmp	r1, r3
 8001524:	d002      	beq.n	800152c <cleanup_stdio+0x2c>
 8001526:	0020      	movs	r0, r4
 8001528:	f001 fad6 	bl	8002ad8 <_fflush_r>
 800152c:	bd10      	pop	{r4, pc}
 800152e:	46c0      	nop			@ (mov r8, r8)
 8001530:	20000190 	.word	0x20000190
 8001534:	200001f8 	.word	0x200001f8
 8001538:	20000260 	.word	0x20000260

0800153c <global_stdio_init.part.0>:
 800153c:	b510      	push	{r4, lr}
 800153e:	4b09      	ldr	r3, [pc, #36]	@ (8001564 <global_stdio_init.part.0+0x28>)
 8001540:	4a09      	ldr	r2, [pc, #36]	@ (8001568 <global_stdio_init.part.0+0x2c>)
 8001542:	2104      	movs	r1, #4
 8001544:	601a      	str	r2, [r3, #0]
 8001546:	4809      	ldr	r0, [pc, #36]	@ (800156c <global_stdio_init.part.0+0x30>)
 8001548:	2200      	movs	r2, #0
 800154a:	f7ff ff95 	bl	8001478 <std>
 800154e:	2201      	movs	r2, #1
 8001550:	2109      	movs	r1, #9
 8001552:	4807      	ldr	r0, [pc, #28]	@ (8001570 <global_stdio_init.part.0+0x34>)
 8001554:	f7ff ff90 	bl	8001478 <std>
 8001558:	2202      	movs	r2, #2
 800155a:	2112      	movs	r1, #18
 800155c:	4805      	ldr	r0, [pc, #20]	@ (8001574 <global_stdio_init.part.0+0x38>)
 800155e:	f7ff ff8b 	bl	8001478 <std>
 8001562:	bd10      	pop	{r4, pc}
 8001564:	200002c8 	.word	0x200002c8
 8001568:	080014e5 	.word	0x080014e5
 800156c:	20000190 	.word	0x20000190
 8001570:	200001f8 	.word	0x200001f8
 8001574:	20000260 	.word	0x20000260

08001578 <__sfp_lock_acquire>:
 8001578:	b510      	push	{r4, lr}
 800157a:	4802      	ldr	r0, [pc, #8]	@ (8001584 <__sfp_lock_acquire+0xc>)
 800157c:	f000 fb3d 	bl	8001bfa <__retarget_lock_acquire_recursive>
 8001580:	bd10      	pop	{r4, pc}
 8001582:	46c0      	nop			@ (mov r8, r8)
 8001584:	200002d1 	.word	0x200002d1

08001588 <__sfp_lock_release>:
 8001588:	b510      	push	{r4, lr}
 800158a:	4802      	ldr	r0, [pc, #8]	@ (8001594 <__sfp_lock_release+0xc>)
 800158c:	f000 fb36 	bl	8001bfc <__retarget_lock_release_recursive>
 8001590:	bd10      	pop	{r4, pc}
 8001592:	46c0      	nop			@ (mov r8, r8)
 8001594:	200002d1 	.word	0x200002d1

08001598 <__sinit>:
 8001598:	b510      	push	{r4, lr}
 800159a:	0004      	movs	r4, r0
 800159c:	f7ff ffec 	bl	8001578 <__sfp_lock_acquire>
 80015a0:	6a23      	ldr	r3, [r4, #32]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d002      	beq.n	80015ac <__sinit+0x14>
 80015a6:	f7ff ffef 	bl	8001588 <__sfp_lock_release>
 80015aa:	bd10      	pop	{r4, pc}
 80015ac:	4b04      	ldr	r3, [pc, #16]	@ (80015c0 <__sinit+0x28>)
 80015ae:	6223      	str	r3, [r4, #32]
 80015b0:	4b04      	ldr	r3, [pc, #16]	@ (80015c4 <__sinit+0x2c>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d1f6      	bne.n	80015a6 <__sinit+0xe>
 80015b8:	f7ff ffc0 	bl	800153c <global_stdio_init.part.0>
 80015bc:	e7f3      	b.n	80015a6 <__sinit+0xe>
 80015be:	46c0      	nop			@ (mov r8, r8)
 80015c0:	08001501 	.word	0x08001501
 80015c4:	200002c8 	.word	0x200002c8

080015c8 <_fwalk_sglue>:
 80015c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80015ca:	0014      	movs	r4, r2
 80015cc:	2600      	movs	r6, #0
 80015ce:	9000      	str	r0, [sp, #0]
 80015d0:	9101      	str	r1, [sp, #4]
 80015d2:	68a5      	ldr	r5, [r4, #8]
 80015d4:	6867      	ldr	r7, [r4, #4]
 80015d6:	3f01      	subs	r7, #1
 80015d8:	d504      	bpl.n	80015e4 <_fwalk_sglue+0x1c>
 80015da:	6824      	ldr	r4, [r4, #0]
 80015dc:	2c00      	cmp	r4, #0
 80015de:	d1f8      	bne.n	80015d2 <_fwalk_sglue+0xa>
 80015e0:	0030      	movs	r0, r6
 80015e2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80015e4:	89ab      	ldrh	r3, [r5, #12]
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d908      	bls.n	80015fc <_fwalk_sglue+0x34>
 80015ea:	220e      	movs	r2, #14
 80015ec:	5eab      	ldrsh	r3, [r5, r2]
 80015ee:	3301      	adds	r3, #1
 80015f0:	d004      	beq.n	80015fc <_fwalk_sglue+0x34>
 80015f2:	0029      	movs	r1, r5
 80015f4:	9800      	ldr	r0, [sp, #0]
 80015f6:	9b01      	ldr	r3, [sp, #4]
 80015f8:	4798      	blx	r3
 80015fa:	4306      	orrs	r6, r0
 80015fc:	3568      	adds	r5, #104	@ 0x68
 80015fe:	e7ea      	b.n	80015d6 <_fwalk_sglue+0xe>

08001600 <iprintf>:
 8001600:	b40f      	push	{r0, r1, r2, r3}
 8001602:	b507      	push	{r0, r1, r2, lr}
 8001604:	4905      	ldr	r1, [pc, #20]	@ (800161c <iprintf+0x1c>)
 8001606:	ab04      	add	r3, sp, #16
 8001608:	6808      	ldr	r0, [r1, #0]
 800160a:	cb04      	ldmia	r3!, {r2}
 800160c:	6881      	ldr	r1, [r0, #8]
 800160e:	9301      	str	r3, [sp, #4]
 8001610:	f000 fde2 	bl	80021d8 <_vfiprintf_r>
 8001614:	b003      	add	sp, #12
 8001616:	bc08      	pop	{r3}
 8001618:	b004      	add	sp, #16
 800161a:	4718      	bx	r3
 800161c:	20000010 	.word	0x20000010

08001620 <_puts_r>:
 8001620:	6a03      	ldr	r3, [r0, #32]
 8001622:	b570      	push	{r4, r5, r6, lr}
 8001624:	0005      	movs	r5, r0
 8001626:	000e      	movs	r6, r1
 8001628:	6884      	ldr	r4, [r0, #8]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d101      	bne.n	8001632 <_puts_r+0x12>
 800162e:	f7ff ffb3 	bl	8001598 <__sinit>
 8001632:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001634:	07db      	lsls	r3, r3, #31
 8001636:	d405      	bmi.n	8001644 <_puts_r+0x24>
 8001638:	89a3      	ldrh	r3, [r4, #12]
 800163a:	059b      	lsls	r3, r3, #22
 800163c:	d402      	bmi.n	8001644 <_puts_r+0x24>
 800163e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001640:	f000 fadb 	bl	8001bfa <__retarget_lock_acquire_recursive>
 8001644:	89a3      	ldrh	r3, [r4, #12]
 8001646:	071b      	lsls	r3, r3, #28
 8001648:	d502      	bpl.n	8001650 <_puts_r+0x30>
 800164a:	6923      	ldr	r3, [r4, #16]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d11f      	bne.n	8001690 <_puts_r+0x70>
 8001650:	0021      	movs	r1, r4
 8001652:	0028      	movs	r0, r5
 8001654:	f000 f9bc 	bl	80019d0 <__swsetup_r>
 8001658:	2800      	cmp	r0, #0
 800165a:	d019      	beq.n	8001690 <_puts_r+0x70>
 800165c:	2501      	movs	r5, #1
 800165e:	426d      	negs	r5, r5
 8001660:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001662:	07db      	lsls	r3, r3, #31
 8001664:	d405      	bmi.n	8001672 <_puts_r+0x52>
 8001666:	89a3      	ldrh	r3, [r4, #12]
 8001668:	059b      	lsls	r3, r3, #22
 800166a:	d402      	bmi.n	8001672 <_puts_r+0x52>
 800166c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800166e:	f000 fac5 	bl	8001bfc <__retarget_lock_release_recursive>
 8001672:	0028      	movs	r0, r5
 8001674:	bd70      	pop	{r4, r5, r6, pc}
 8001676:	3601      	adds	r6, #1
 8001678:	60a3      	str	r3, [r4, #8]
 800167a:	2b00      	cmp	r3, #0
 800167c:	da04      	bge.n	8001688 <_puts_r+0x68>
 800167e:	69a2      	ldr	r2, [r4, #24]
 8001680:	429a      	cmp	r2, r3
 8001682:	dc16      	bgt.n	80016b2 <_puts_r+0x92>
 8001684:	290a      	cmp	r1, #10
 8001686:	d014      	beq.n	80016b2 <_puts_r+0x92>
 8001688:	6823      	ldr	r3, [r4, #0]
 800168a:	1c5a      	adds	r2, r3, #1
 800168c:	6022      	str	r2, [r4, #0]
 800168e:	7019      	strb	r1, [r3, #0]
 8001690:	68a3      	ldr	r3, [r4, #8]
 8001692:	7831      	ldrb	r1, [r6, #0]
 8001694:	3b01      	subs	r3, #1
 8001696:	2900      	cmp	r1, #0
 8001698:	d1ed      	bne.n	8001676 <_puts_r+0x56>
 800169a:	60a3      	str	r3, [r4, #8]
 800169c:	2b00      	cmp	r3, #0
 800169e:	da0f      	bge.n	80016c0 <_puts_r+0xa0>
 80016a0:	0022      	movs	r2, r4
 80016a2:	0028      	movs	r0, r5
 80016a4:	310a      	adds	r1, #10
 80016a6:	f000 f951 	bl	800194c <__swbuf_r>
 80016aa:	3001      	adds	r0, #1
 80016ac:	d0d6      	beq.n	800165c <_puts_r+0x3c>
 80016ae:	250a      	movs	r5, #10
 80016b0:	e7d6      	b.n	8001660 <_puts_r+0x40>
 80016b2:	0022      	movs	r2, r4
 80016b4:	0028      	movs	r0, r5
 80016b6:	f000 f949 	bl	800194c <__swbuf_r>
 80016ba:	3001      	adds	r0, #1
 80016bc:	d1e8      	bne.n	8001690 <_puts_r+0x70>
 80016be:	e7cd      	b.n	800165c <_puts_r+0x3c>
 80016c0:	6823      	ldr	r3, [r4, #0]
 80016c2:	1c5a      	adds	r2, r3, #1
 80016c4:	6022      	str	r2, [r4, #0]
 80016c6:	220a      	movs	r2, #10
 80016c8:	701a      	strb	r2, [r3, #0]
 80016ca:	e7f0      	b.n	80016ae <_puts_r+0x8e>

080016cc <puts>:
 80016cc:	b510      	push	{r4, lr}
 80016ce:	4b03      	ldr	r3, [pc, #12]	@ (80016dc <puts+0x10>)
 80016d0:	0001      	movs	r1, r0
 80016d2:	6818      	ldr	r0, [r3, #0]
 80016d4:	f7ff ffa4 	bl	8001620 <_puts_r>
 80016d8:	bd10      	pop	{r4, pc}
 80016da:	46c0      	nop			@ (mov r8, r8)
 80016dc:	20000010 	.word	0x20000010

080016e0 <setbuf>:
 80016e0:	b510      	push	{r4, lr}
 80016e2:	2380      	movs	r3, #128	@ 0x80
 80016e4:	424a      	negs	r2, r1
 80016e6:	414a      	adcs	r2, r1
 80016e8:	00db      	lsls	r3, r3, #3
 80016ea:	0052      	lsls	r2, r2, #1
 80016ec:	f000 f802 	bl	80016f4 <setvbuf>
 80016f0:	bd10      	pop	{r4, pc}
	...

080016f4 <setvbuf>:
 80016f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016f6:	001d      	movs	r5, r3
 80016f8:	4b57      	ldr	r3, [pc, #348]	@ (8001858 <setvbuf+0x164>)
 80016fa:	b085      	sub	sp, #20
 80016fc:	681e      	ldr	r6, [r3, #0]
 80016fe:	0004      	movs	r4, r0
 8001700:	000f      	movs	r7, r1
 8001702:	9200      	str	r2, [sp, #0]
 8001704:	2e00      	cmp	r6, #0
 8001706:	d005      	beq.n	8001714 <setvbuf+0x20>
 8001708:	6a33      	ldr	r3, [r6, #32]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d102      	bne.n	8001714 <setvbuf+0x20>
 800170e:	0030      	movs	r0, r6
 8001710:	f7ff ff42 	bl	8001598 <__sinit>
 8001714:	9b00      	ldr	r3, [sp, #0]
 8001716:	2b02      	cmp	r3, #2
 8001718:	d005      	beq.n	8001726 <setvbuf+0x32>
 800171a:	2b01      	cmp	r3, #1
 800171c:	d900      	bls.n	8001720 <setvbuf+0x2c>
 800171e:	e097      	b.n	8001850 <setvbuf+0x15c>
 8001720:	2d00      	cmp	r5, #0
 8001722:	da00      	bge.n	8001726 <setvbuf+0x32>
 8001724:	e094      	b.n	8001850 <setvbuf+0x15c>
 8001726:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001728:	07db      	lsls	r3, r3, #31
 800172a:	d405      	bmi.n	8001738 <setvbuf+0x44>
 800172c:	89a3      	ldrh	r3, [r4, #12]
 800172e:	059b      	lsls	r3, r3, #22
 8001730:	d402      	bmi.n	8001738 <setvbuf+0x44>
 8001732:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001734:	f000 fa61 	bl	8001bfa <__retarget_lock_acquire_recursive>
 8001738:	0021      	movs	r1, r4
 800173a:	0030      	movs	r0, r6
 800173c:	f001 f9cc 	bl	8002ad8 <_fflush_r>
 8001740:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001742:	2900      	cmp	r1, #0
 8001744:	d008      	beq.n	8001758 <setvbuf+0x64>
 8001746:	0023      	movs	r3, r4
 8001748:	3344      	adds	r3, #68	@ 0x44
 800174a:	4299      	cmp	r1, r3
 800174c:	d002      	beq.n	8001754 <setvbuf+0x60>
 800174e:	0030      	movs	r0, r6
 8001750:	f000 fa56 	bl	8001c00 <_free_r>
 8001754:	2300      	movs	r3, #0
 8001756:	6363      	str	r3, [r4, #52]	@ 0x34
 8001758:	2300      	movs	r3, #0
 800175a:	61a3      	str	r3, [r4, #24]
 800175c:	6063      	str	r3, [r4, #4]
 800175e:	89a3      	ldrh	r3, [r4, #12]
 8001760:	061b      	lsls	r3, r3, #24
 8001762:	d503      	bpl.n	800176c <setvbuf+0x78>
 8001764:	0030      	movs	r0, r6
 8001766:	6921      	ldr	r1, [r4, #16]
 8001768:	f000 fa4a 	bl	8001c00 <_free_r>
 800176c:	89a3      	ldrh	r3, [r4, #12]
 800176e:	4a3b      	ldr	r2, [pc, #236]	@ (800185c <setvbuf+0x168>)
 8001770:	4013      	ands	r3, r2
 8001772:	81a3      	strh	r3, [r4, #12]
 8001774:	9b00      	ldr	r3, [sp, #0]
 8001776:	2b02      	cmp	r3, #2
 8001778:	d060      	beq.n	800183c <setvbuf+0x148>
 800177a:	ab03      	add	r3, sp, #12
 800177c:	0021      	movs	r1, r4
 800177e:	0030      	movs	r0, r6
 8001780:	aa02      	add	r2, sp, #8
 8001782:	f001 f9d5 	bl	8002b30 <__swhatbuf_r>
 8001786:	89a3      	ldrh	r3, [r4, #12]
 8001788:	4303      	orrs	r3, r0
 800178a:	81a3      	strh	r3, [r4, #12]
 800178c:	2d00      	cmp	r5, #0
 800178e:	d124      	bne.n	80017da <setvbuf+0xe6>
 8001790:	9d02      	ldr	r5, [sp, #8]
 8001792:	0028      	movs	r0, r5
 8001794:	f000 fa7e 	bl	8001c94 <malloc>
 8001798:	9501      	str	r5, [sp, #4]
 800179a:	1e07      	subs	r7, r0, #0
 800179c:	d148      	bne.n	8001830 <setvbuf+0x13c>
 800179e:	9b02      	ldr	r3, [sp, #8]
 80017a0:	9301      	str	r3, [sp, #4]
 80017a2:	42ab      	cmp	r3, r5
 80017a4:	d13f      	bne.n	8001826 <setvbuf+0x132>
 80017a6:	2501      	movs	r5, #1
 80017a8:	426d      	negs	r5, r5
 80017aa:	220c      	movs	r2, #12
 80017ac:	5ea3      	ldrsh	r3, [r4, r2]
 80017ae:	2202      	movs	r2, #2
 80017b0:	431a      	orrs	r2, r3
 80017b2:	81a2      	strh	r2, [r4, #12]
 80017b4:	2200      	movs	r2, #0
 80017b6:	60a2      	str	r2, [r4, #8]
 80017b8:	0022      	movs	r2, r4
 80017ba:	3247      	adds	r2, #71	@ 0x47
 80017bc:	6022      	str	r2, [r4, #0]
 80017be:	6122      	str	r2, [r4, #16]
 80017c0:	2201      	movs	r2, #1
 80017c2:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 80017c4:	6162      	str	r2, [r4, #20]
 80017c6:	4211      	tst	r1, r2
 80017c8:	d104      	bne.n	80017d4 <setvbuf+0xe0>
 80017ca:	059b      	lsls	r3, r3, #22
 80017cc:	d402      	bmi.n	80017d4 <setvbuf+0xe0>
 80017ce:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80017d0:	f000 fa14 	bl	8001bfc <__retarget_lock_release_recursive>
 80017d4:	0028      	movs	r0, r5
 80017d6:	b005      	add	sp, #20
 80017d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017da:	2f00      	cmp	r7, #0
 80017dc:	d0d9      	beq.n	8001792 <setvbuf+0x9e>
 80017de:	6a33      	ldr	r3, [r6, #32]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d102      	bne.n	80017ea <setvbuf+0xf6>
 80017e4:	0030      	movs	r0, r6
 80017e6:	f7ff fed7 	bl	8001598 <__sinit>
 80017ea:	9b00      	ldr	r3, [sp, #0]
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d103      	bne.n	80017f8 <setvbuf+0x104>
 80017f0:	89a3      	ldrh	r3, [r4, #12]
 80017f2:	9a00      	ldr	r2, [sp, #0]
 80017f4:	431a      	orrs	r2, r3
 80017f6:	81a2      	strh	r2, [r4, #12]
 80017f8:	220c      	movs	r2, #12
 80017fa:	5ea3      	ldrsh	r3, [r4, r2]
 80017fc:	2208      	movs	r2, #8
 80017fe:	0019      	movs	r1, r3
 8001800:	6027      	str	r7, [r4, #0]
 8001802:	6127      	str	r7, [r4, #16]
 8001804:	6165      	str	r5, [r4, #20]
 8001806:	4011      	ands	r1, r2
 8001808:	4213      	tst	r3, r2
 800180a:	d01b      	beq.n	8001844 <setvbuf+0x150>
 800180c:	07da      	lsls	r2, r3, #31
 800180e:	d517      	bpl.n	8001840 <setvbuf+0x14c>
 8001810:	2200      	movs	r2, #0
 8001812:	426d      	negs	r5, r5
 8001814:	60a2      	str	r2, [r4, #8]
 8001816:	61a5      	str	r5, [r4, #24]
 8001818:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800181a:	07d2      	lsls	r2, r2, #31
 800181c:	d401      	bmi.n	8001822 <setvbuf+0x12e>
 800181e:	059b      	lsls	r3, r3, #22
 8001820:	d512      	bpl.n	8001848 <setvbuf+0x154>
 8001822:	2500      	movs	r5, #0
 8001824:	e7d6      	b.n	80017d4 <setvbuf+0xe0>
 8001826:	9801      	ldr	r0, [sp, #4]
 8001828:	f000 fa34 	bl	8001c94 <malloc>
 800182c:	1e07      	subs	r7, r0, #0
 800182e:	d0ba      	beq.n	80017a6 <setvbuf+0xb2>
 8001830:	2380      	movs	r3, #128	@ 0x80
 8001832:	89a2      	ldrh	r2, [r4, #12]
 8001834:	9d01      	ldr	r5, [sp, #4]
 8001836:	4313      	orrs	r3, r2
 8001838:	81a3      	strh	r3, [r4, #12]
 800183a:	e7d0      	b.n	80017de <setvbuf+0xea>
 800183c:	2500      	movs	r5, #0
 800183e:	e7b4      	b.n	80017aa <setvbuf+0xb6>
 8001840:	60a5      	str	r5, [r4, #8]
 8001842:	e7e9      	b.n	8001818 <setvbuf+0x124>
 8001844:	60a1      	str	r1, [r4, #8]
 8001846:	e7e7      	b.n	8001818 <setvbuf+0x124>
 8001848:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800184a:	f000 f9d7 	bl	8001bfc <__retarget_lock_release_recursive>
 800184e:	e7e8      	b.n	8001822 <setvbuf+0x12e>
 8001850:	2501      	movs	r5, #1
 8001852:	426d      	negs	r5, r5
 8001854:	e7be      	b.n	80017d4 <setvbuf+0xe0>
 8001856:	46c0      	nop			@ (mov r8, r8)
 8001858:	20000010 	.word	0x20000010
 800185c:	fffff35c 	.word	0xfffff35c

08001860 <siscanf>:
 8001860:	b40e      	push	{r1, r2, r3}
 8001862:	b530      	push	{r4, r5, lr}
 8001864:	2381      	movs	r3, #129	@ 0x81
 8001866:	b09c      	sub	sp, #112	@ 0x70
 8001868:	466a      	mov	r2, sp
 800186a:	ac1f      	add	r4, sp, #124	@ 0x7c
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	cc20      	ldmia	r4!, {r5}
 8001870:	8293      	strh	r3, [r2, #20]
 8001872:	9002      	str	r0, [sp, #8]
 8001874:	9006      	str	r0, [sp, #24]
 8001876:	f7fe fc47 	bl	8000108 <strlen>
 800187a:	4b0b      	ldr	r3, [pc, #44]	@ (80018a8 <siscanf+0x48>)
 800187c:	466a      	mov	r2, sp
 800187e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8001880:	2300      	movs	r3, #0
 8001882:	9003      	str	r0, [sp, #12]
 8001884:	9007      	str	r0, [sp, #28]
 8001886:	4809      	ldr	r0, [pc, #36]	@ (80018ac <siscanf+0x4c>)
 8001888:	930f      	str	r3, [sp, #60]	@ 0x3c
 800188a:	9314      	str	r3, [sp, #80]	@ 0x50
 800188c:	3b01      	subs	r3, #1
 800188e:	82d3      	strh	r3, [r2, #22]
 8001890:	a902      	add	r1, sp, #8
 8001892:	0023      	movs	r3, r4
 8001894:	002a      	movs	r2, r5
 8001896:	6800      	ldr	r0, [r0, #0]
 8001898:	9401      	str	r4, [sp, #4]
 800189a:	f000 fb13 	bl	8001ec4 <__ssvfiscanf_r>
 800189e:	b01c      	add	sp, #112	@ 0x70
 80018a0:	bc30      	pop	{r4, r5}
 80018a2:	bc08      	pop	{r3}
 80018a4:	b003      	add	sp, #12
 80018a6:	4718      	bx	r3
 80018a8:	080018d9 	.word	0x080018d9
 80018ac:	20000010 	.word	0x20000010

080018b0 <__sread>:
 80018b0:	b570      	push	{r4, r5, r6, lr}
 80018b2:	000c      	movs	r4, r1
 80018b4:	250e      	movs	r5, #14
 80018b6:	5f49      	ldrsh	r1, [r1, r5]
 80018b8:	f000 f94c 	bl	8001b54 <_read_r>
 80018bc:	2800      	cmp	r0, #0
 80018be:	db03      	blt.n	80018c8 <__sread+0x18>
 80018c0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80018c2:	181b      	adds	r3, r3, r0
 80018c4:	6563      	str	r3, [r4, #84]	@ 0x54
 80018c6:	bd70      	pop	{r4, r5, r6, pc}
 80018c8:	89a3      	ldrh	r3, [r4, #12]
 80018ca:	4a02      	ldr	r2, [pc, #8]	@ (80018d4 <__sread+0x24>)
 80018cc:	4013      	ands	r3, r2
 80018ce:	81a3      	strh	r3, [r4, #12]
 80018d0:	e7f9      	b.n	80018c6 <__sread+0x16>
 80018d2:	46c0      	nop			@ (mov r8, r8)
 80018d4:	ffffefff 	.word	0xffffefff

080018d8 <__seofread>:
 80018d8:	2000      	movs	r0, #0
 80018da:	4770      	bx	lr

080018dc <__swrite>:
 80018dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018de:	001f      	movs	r7, r3
 80018e0:	898b      	ldrh	r3, [r1, #12]
 80018e2:	0005      	movs	r5, r0
 80018e4:	000c      	movs	r4, r1
 80018e6:	0016      	movs	r6, r2
 80018e8:	05db      	lsls	r3, r3, #23
 80018ea:	d505      	bpl.n	80018f8 <__swrite+0x1c>
 80018ec:	230e      	movs	r3, #14
 80018ee:	5ec9      	ldrsh	r1, [r1, r3]
 80018f0:	2200      	movs	r2, #0
 80018f2:	2302      	movs	r3, #2
 80018f4:	f000 f91a 	bl	8001b2c <_lseek_r>
 80018f8:	89a3      	ldrh	r3, [r4, #12]
 80018fa:	4a05      	ldr	r2, [pc, #20]	@ (8001910 <__swrite+0x34>)
 80018fc:	0028      	movs	r0, r5
 80018fe:	4013      	ands	r3, r2
 8001900:	81a3      	strh	r3, [r4, #12]
 8001902:	0032      	movs	r2, r6
 8001904:	230e      	movs	r3, #14
 8001906:	5ee1      	ldrsh	r1, [r4, r3]
 8001908:	003b      	movs	r3, r7
 800190a:	f000 f937 	bl	8001b7c <_write_r>
 800190e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001910:	ffffefff 	.word	0xffffefff

08001914 <__sseek>:
 8001914:	b570      	push	{r4, r5, r6, lr}
 8001916:	000c      	movs	r4, r1
 8001918:	250e      	movs	r5, #14
 800191a:	5f49      	ldrsh	r1, [r1, r5]
 800191c:	f000 f906 	bl	8001b2c <_lseek_r>
 8001920:	89a3      	ldrh	r3, [r4, #12]
 8001922:	1c42      	adds	r2, r0, #1
 8001924:	d103      	bne.n	800192e <__sseek+0x1a>
 8001926:	4a05      	ldr	r2, [pc, #20]	@ (800193c <__sseek+0x28>)
 8001928:	4013      	ands	r3, r2
 800192a:	81a3      	strh	r3, [r4, #12]
 800192c:	bd70      	pop	{r4, r5, r6, pc}
 800192e:	2280      	movs	r2, #128	@ 0x80
 8001930:	0152      	lsls	r2, r2, #5
 8001932:	4313      	orrs	r3, r2
 8001934:	81a3      	strh	r3, [r4, #12]
 8001936:	6560      	str	r0, [r4, #84]	@ 0x54
 8001938:	e7f8      	b.n	800192c <__sseek+0x18>
 800193a:	46c0      	nop			@ (mov r8, r8)
 800193c:	ffffefff 	.word	0xffffefff

08001940 <__sclose>:
 8001940:	b510      	push	{r4, lr}
 8001942:	230e      	movs	r3, #14
 8001944:	5ec9      	ldrsh	r1, [r1, r3]
 8001946:	f000 f8df 	bl	8001b08 <_close_r>
 800194a:	bd10      	pop	{r4, pc}

0800194c <__swbuf_r>:
 800194c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800194e:	0006      	movs	r6, r0
 8001950:	000d      	movs	r5, r1
 8001952:	0014      	movs	r4, r2
 8001954:	2800      	cmp	r0, #0
 8001956:	d004      	beq.n	8001962 <__swbuf_r+0x16>
 8001958:	6a03      	ldr	r3, [r0, #32]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d101      	bne.n	8001962 <__swbuf_r+0x16>
 800195e:	f7ff fe1b 	bl	8001598 <__sinit>
 8001962:	69a3      	ldr	r3, [r4, #24]
 8001964:	60a3      	str	r3, [r4, #8]
 8001966:	89a3      	ldrh	r3, [r4, #12]
 8001968:	071b      	lsls	r3, r3, #28
 800196a:	d502      	bpl.n	8001972 <__swbuf_r+0x26>
 800196c:	6923      	ldr	r3, [r4, #16]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d109      	bne.n	8001986 <__swbuf_r+0x3a>
 8001972:	0021      	movs	r1, r4
 8001974:	0030      	movs	r0, r6
 8001976:	f000 f82b 	bl	80019d0 <__swsetup_r>
 800197a:	2800      	cmp	r0, #0
 800197c:	d003      	beq.n	8001986 <__swbuf_r+0x3a>
 800197e:	2501      	movs	r5, #1
 8001980:	426d      	negs	r5, r5
 8001982:	0028      	movs	r0, r5
 8001984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001986:	6923      	ldr	r3, [r4, #16]
 8001988:	6820      	ldr	r0, [r4, #0]
 800198a:	b2ef      	uxtb	r7, r5
 800198c:	1ac0      	subs	r0, r0, r3
 800198e:	6963      	ldr	r3, [r4, #20]
 8001990:	b2ed      	uxtb	r5, r5
 8001992:	4283      	cmp	r3, r0
 8001994:	dc05      	bgt.n	80019a2 <__swbuf_r+0x56>
 8001996:	0021      	movs	r1, r4
 8001998:	0030      	movs	r0, r6
 800199a:	f001 f89d 	bl	8002ad8 <_fflush_r>
 800199e:	2800      	cmp	r0, #0
 80019a0:	d1ed      	bne.n	800197e <__swbuf_r+0x32>
 80019a2:	68a3      	ldr	r3, [r4, #8]
 80019a4:	3001      	adds	r0, #1
 80019a6:	3b01      	subs	r3, #1
 80019a8:	60a3      	str	r3, [r4, #8]
 80019aa:	6823      	ldr	r3, [r4, #0]
 80019ac:	1c5a      	adds	r2, r3, #1
 80019ae:	6022      	str	r2, [r4, #0]
 80019b0:	701f      	strb	r7, [r3, #0]
 80019b2:	6963      	ldr	r3, [r4, #20]
 80019b4:	4283      	cmp	r3, r0
 80019b6:	d004      	beq.n	80019c2 <__swbuf_r+0x76>
 80019b8:	89a3      	ldrh	r3, [r4, #12]
 80019ba:	07db      	lsls	r3, r3, #31
 80019bc:	d5e1      	bpl.n	8001982 <__swbuf_r+0x36>
 80019be:	2d0a      	cmp	r5, #10
 80019c0:	d1df      	bne.n	8001982 <__swbuf_r+0x36>
 80019c2:	0021      	movs	r1, r4
 80019c4:	0030      	movs	r0, r6
 80019c6:	f001 f887 	bl	8002ad8 <_fflush_r>
 80019ca:	2800      	cmp	r0, #0
 80019cc:	d0d9      	beq.n	8001982 <__swbuf_r+0x36>
 80019ce:	e7d6      	b.n	800197e <__swbuf_r+0x32>

080019d0 <__swsetup_r>:
 80019d0:	4b2d      	ldr	r3, [pc, #180]	@ (8001a88 <__swsetup_r+0xb8>)
 80019d2:	b570      	push	{r4, r5, r6, lr}
 80019d4:	0005      	movs	r5, r0
 80019d6:	6818      	ldr	r0, [r3, #0]
 80019d8:	000c      	movs	r4, r1
 80019da:	2800      	cmp	r0, #0
 80019dc:	d004      	beq.n	80019e8 <__swsetup_r+0x18>
 80019de:	6a03      	ldr	r3, [r0, #32]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d101      	bne.n	80019e8 <__swsetup_r+0x18>
 80019e4:	f7ff fdd8 	bl	8001598 <__sinit>
 80019e8:	230c      	movs	r3, #12
 80019ea:	5ee2      	ldrsh	r2, [r4, r3]
 80019ec:	0713      	lsls	r3, r2, #28
 80019ee:	d423      	bmi.n	8001a38 <__swsetup_r+0x68>
 80019f0:	06d3      	lsls	r3, r2, #27
 80019f2:	d407      	bmi.n	8001a04 <__swsetup_r+0x34>
 80019f4:	2309      	movs	r3, #9
 80019f6:	602b      	str	r3, [r5, #0]
 80019f8:	2340      	movs	r3, #64	@ 0x40
 80019fa:	2001      	movs	r0, #1
 80019fc:	4313      	orrs	r3, r2
 80019fe:	81a3      	strh	r3, [r4, #12]
 8001a00:	4240      	negs	r0, r0
 8001a02:	e03a      	b.n	8001a7a <__swsetup_r+0xaa>
 8001a04:	0752      	lsls	r2, r2, #29
 8001a06:	d513      	bpl.n	8001a30 <__swsetup_r+0x60>
 8001a08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001a0a:	2900      	cmp	r1, #0
 8001a0c:	d008      	beq.n	8001a20 <__swsetup_r+0x50>
 8001a0e:	0023      	movs	r3, r4
 8001a10:	3344      	adds	r3, #68	@ 0x44
 8001a12:	4299      	cmp	r1, r3
 8001a14:	d002      	beq.n	8001a1c <__swsetup_r+0x4c>
 8001a16:	0028      	movs	r0, r5
 8001a18:	f000 f8f2 	bl	8001c00 <_free_r>
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	6363      	str	r3, [r4, #52]	@ 0x34
 8001a20:	2224      	movs	r2, #36	@ 0x24
 8001a22:	89a3      	ldrh	r3, [r4, #12]
 8001a24:	4393      	bics	r3, r2
 8001a26:	81a3      	strh	r3, [r4, #12]
 8001a28:	2300      	movs	r3, #0
 8001a2a:	6063      	str	r3, [r4, #4]
 8001a2c:	6923      	ldr	r3, [r4, #16]
 8001a2e:	6023      	str	r3, [r4, #0]
 8001a30:	2308      	movs	r3, #8
 8001a32:	89a2      	ldrh	r2, [r4, #12]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	81a3      	strh	r3, [r4, #12]
 8001a38:	6923      	ldr	r3, [r4, #16]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d10b      	bne.n	8001a56 <__swsetup_r+0x86>
 8001a3e:	21a0      	movs	r1, #160	@ 0xa0
 8001a40:	2280      	movs	r2, #128	@ 0x80
 8001a42:	89a3      	ldrh	r3, [r4, #12]
 8001a44:	0089      	lsls	r1, r1, #2
 8001a46:	0092      	lsls	r2, r2, #2
 8001a48:	400b      	ands	r3, r1
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d003      	beq.n	8001a56 <__swsetup_r+0x86>
 8001a4e:	0021      	movs	r1, r4
 8001a50:	0028      	movs	r0, r5
 8001a52:	f001 f897 	bl	8002b84 <__smakebuf_r>
 8001a56:	230c      	movs	r3, #12
 8001a58:	5ee2      	ldrsh	r2, [r4, r3]
 8001a5a:	2101      	movs	r1, #1
 8001a5c:	0013      	movs	r3, r2
 8001a5e:	400b      	ands	r3, r1
 8001a60:	420a      	tst	r2, r1
 8001a62:	d00b      	beq.n	8001a7c <__swsetup_r+0xac>
 8001a64:	2300      	movs	r3, #0
 8001a66:	60a3      	str	r3, [r4, #8]
 8001a68:	6963      	ldr	r3, [r4, #20]
 8001a6a:	425b      	negs	r3, r3
 8001a6c:	61a3      	str	r3, [r4, #24]
 8001a6e:	2000      	movs	r0, #0
 8001a70:	6923      	ldr	r3, [r4, #16]
 8001a72:	4283      	cmp	r3, r0
 8001a74:	d101      	bne.n	8001a7a <__swsetup_r+0xaa>
 8001a76:	0613      	lsls	r3, r2, #24
 8001a78:	d4be      	bmi.n	80019f8 <__swsetup_r+0x28>
 8001a7a:	bd70      	pop	{r4, r5, r6, pc}
 8001a7c:	0791      	lsls	r1, r2, #30
 8001a7e:	d400      	bmi.n	8001a82 <__swsetup_r+0xb2>
 8001a80:	6963      	ldr	r3, [r4, #20]
 8001a82:	60a3      	str	r3, [r4, #8]
 8001a84:	e7f3      	b.n	8001a6e <__swsetup_r+0x9e>
 8001a86:	46c0      	nop			@ (mov r8, r8)
 8001a88:	20000010 	.word	0x20000010

08001a8c <memset>:
 8001a8c:	0003      	movs	r3, r0
 8001a8e:	1882      	adds	r2, r0, r2
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d100      	bne.n	8001a96 <memset+0xa>
 8001a94:	4770      	bx	lr
 8001a96:	7019      	strb	r1, [r3, #0]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	e7f9      	b.n	8001a90 <memset+0x4>

08001a9c <strncasecmp>:
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001aa0:	469c      	mov	ip, r3
 8001aa2:	0006      	movs	r6, r0
 8001aa4:	2400      	movs	r4, #0
 8001aa6:	4f0e      	ldr	r7, [pc, #56]	@ (8001ae0 <strncasecmp+0x44>)
 8001aa8:	9201      	str	r2, [sp, #4]
 8001aaa:	9b01      	ldr	r3, [sp, #4]
 8001aac:	429c      	cmp	r4, r3
 8001aae:	d101      	bne.n	8001ab4 <strncasecmp+0x18>
 8001ab0:	2000      	movs	r0, #0
 8001ab2:	e013      	b.n	8001adc <strncasecmp+0x40>
 8001ab4:	4660      	mov	r0, ip
 8001ab6:	5d35      	ldrb	r5, [r6, r4]
 8001ab8:	5d7b      	ldrb	r3, [r7, r5]
 8001aba:	4003      	ands	r3, r0
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d100      	bne.n	8001ac2 <strncasecmp+0x26>
 8001ac0:	3520      	adds	r5, #32
 8001ac2:	4662      	mov	r2, ip
 8001ac4:	5d0b      	ldrb	r3, [r1, r4]
 8001ac6:	5cf8      	ldrb	r0, [r7, r3]
 8001ac8:	4010      	ands	r0, r2
 8001aca:	2801      	cmp	r0, #1
 8001acc:	d100      	bne.n	8001ad0 <strncasecmp+0x34>
 8001ace:	3320      	adds	r3, #32
 8001ad0:	1ae8      	subs	r0, r5, r3
 8001ad2:	429d      	cmp	r5, r3
 8001ad4:	d102      	bne.n	8001adc <strncasecmp+0x40>
 8001ad6:	3401      	adds	r4, #1
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d1e6      	bne.n	8001aaa <strncasecmp+0xe>
 8001adc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001ade:	46c0      	nop			@ (mov r8, r8)
 8001ae0:	08003005 	.word	0x08003005

08001ae4 <strncmp>:
 8001ae4:	b530      	push	{r4, r5, lr}
 8001ae6:	0005      	movs	r5, r0
 8001ae8:	1e10      	subs	r0, r2, #0
 8001aea:	d00b      	beq.n	8001b04 <strncmp+0x20>
 8001aec:	2400      	movs	r4, #0
 8001aee:	3a01      	subs	r2, #1
 8001af0:	5d2b      	ldrb	r3, [r5, r4]
 8001af2:	5d08      	ldrb	r0, [r1, r4]
 8001af4:	4283      	cmp	r3, r0
 8001af6:	d104      	bne.n	8001b02 <strncmp+0x1e>
 8001af8:	42a2      	cmp	r2, r4
 8001afa:	d002      	beq.n	8001b02 <strncmp+0x1e>
 8001afc:	3401      	adds	r4, #1
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d1f6      	bne.n	8001af0 <strncmp+0xc>
 8001b02:	1a18      	subs	r0, r3, r0
 8001b04:	bd30      	pop	{r4, r5, pc}
	...

08001b08 <_close_r>:
 8001b08:	2300      	movs	r3, #0
 8001b0a:	b570      	push	{r4, r5, r6, lr}
 8001b0c:	4d06      	ldr	r5, [pc, #24]	@ (8001b28 <_close_r+0x20>)
 8001b0e:	0004      	movs	r4, r0
 8001b10:	0008      	movs	r0, r1
 8001b12:	602b      	str	r3, [r5, #0]
 8001b14:	f7ff f82f 	bl	8000b76 <_close>
 8001b18:	1c43      	adds	r3, r0, #1
 8001b1a:	d103      	bne.n	8001b24 <_close_r+0x1c>
 8001b1c:	682b      	ldr	r3, [r5, #0]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d000      	beq.n	8001b24 <_close_r+0x1c>
 8001b22:	6023      	str	r3, [r4, #0]
 8001b24:	bd70      	pop	{r4, r5, r6, pc}
 8001b26:	46c0      	nop			@ (mov r8, r8)
 8001b28:	200002cc 	.word	0x200002cc

08001b2c <_lseek_r>:
 8001b2c:	b570      	push	{r4, r5, r6, lr}
 8001b2e:	0004      	movs	r4, r0
 8001b30:	0008      	movs	r0, r1
 8001b32:	0011      	movs	r1, r2
 8001b34:	001a      	movs	r2, r3
 8001b36:	2300      	movs	r3, #0
 8001b38:	4d05      	ldr	r5, [pc, #20]	@ (8001b50 <_lseek_r+0x24>)
 8001b3a:	602b      	str	r3, [r5, #0]
 8001b3c:	f7ff f83c 	bl	8000bb8 <_lseek>
 8001b40:	1c43      	adds	r3, r0, #1
 8001b42:	d103      	bne.n	8001b4c <_lseek_r+0x20>
 8001b44:	682b      	ldr	r3, [r5, #0]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d000      	beq.n	8001b4c <_lseek_r+0x20>
 8001b4a:	6023      	str	r3, [r4, #0]
 8001b4c:	bd70      	pop	{r4, r5, r6, pc}
 8001b4e:	46c0      	nop			@ (mov r8, r8)
 8001b50:	200002cc 	.word	0x200002cc

08001b54 <_read_r>:
 8001b54:	b570      	push	{r4, r5, r6, lr}
 8001b56:	0004      	movs	r4, r0
 8001b58:	0008      	movs	r0, r1
 8001b5a:	0011      	movs	r1, r2
 8001b5c:	001a      	movs	r2, r3
 8001b5e:	2300      	movs	r3, #0
 8001b60:	4d05      	ldr	r5, [pc, #20]	@ (8001b78 <_read_r+0x24>)
 8001b62:	602b      	str	r3, [r5, #0]
 8001b64:	f7fe ffce 	bl	8000b04 <_read>
 8001b68:	1c43      	adds	r3, r0, #1
 8001b6a:	d103      	bne.n	8001b74 <_read_r+0x20>
 8001b6c:	682b      	ldr	r3, [r5, #0]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d000      	beq.n	8001b74 <_read_r+0x20>
 8001b72:	6023      	str	r3, [r4, #0]
 8001b74:	bd70      	pop	{r4, r5, r6, pc}
 8001b76:	46c0      	nop			@ (mov r8, r8)
 8001b78:	200002cc 	.word	0x200002cc

08001b7c <_write_r>:
 8001b7c:	b570      	push	{r4, r5, r6, lr}
 8001b7e:	0004      	movs	r4, r0
 8001b80:	0008      	movs	r0, r1
 8001b82:	0011      	movs	r1, r2
 8001b84:	001a      	movs	r2, r3
 8001b86:	2300      	movs	r3, #0
 8001b88:	4d05      	ldr	r5, [pc, #20]	@ (8001ba0 <_write_r+0x24>)
 8001b8a:	602b      	str	r3, [r5, #0]
 8001b8c:	f7fe ffd7 	bl	8000b3e <_write>
 8001b90:	1c43      	adds	r3, r0, #1
 8001b92:	d103      	bne.n	8001b9c <_write_r+0x20>
 8001b94:	682b      	ldr	r3, [r5, #0]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d000      	beq.n	8001b9c <_write_r+0x20>
 8001b9a:	6023      	str	r3, [r4, #0]
 8001b9c:	bd70      	pop	{r4, r5, r6, pc}
 8001b9e:	46c0      	nop			@ (mov r8, r8)
 8001ba0:	200002cc 	.word	0x200002cc

08001ba4 <__errno>:
 8001ba4:	4b01      	ldr	r3, [pc, #4]	@ (8001bac <__errno+0x8>)
 8001ba6:	6818      	ldr	r0, [r3, #0]
 8001ba8:	4770      	bx	lr
 8001baa:	46c0      	nop			@ (mov r8, r8)
 8001bac:	20000010 	.word	0x20000010

08001bb0 <__libc_init_array>:
 8001bb0:	b570      	push	{r4, r5, r6, lr}
 8001bb2:	2600      	movs	r6, #0
 8001bb4:	4c0c      	ldr	r4, [pc, #48]	@ (8001be8 <__libc_init_array+0x38>)
 8001bb6:	4d0d      	ldr	r5, [pc, #52]	@ (8001bec <__libc_init_array+0x3c>)
 8001bb8:	1b64      	subs	r4, r4, r5
 8001bba:	10a4      	asrs	r4, r4, #2
 8001bbc:	42a6      	cmp	r6, r4
 8001bbe:	d109      	bne.n	8001bd4 <__libc_init_array+0x24>
 8001bc0:	2600      	movs	r6, #0
 8001bc2:	f001 f99f 	bl	8002f04 <_init>
 8001bc6:	4c0a      	ldr	r4, [pc, #40]	@ (8001bf0 <__libc_init_array+0x40>)
 8001bc8:	4d0a      	ldr	r5, [pc, #40]	@ (8001bf4 <__libc_init_array+0x44>)
 8001bca:	1b64      	subs	r4, r4, r5
 8001bcc:	10a4      	asrs	r4, r4, #2
 8001bce:	42a6      	cmp	r6, r4
 8001bd0:	d105      	bne.n	8001bde <__libc_init_array+0x2e>
 8001bd2:	bd70      	pop	{r4, r5, r6, pc}
 8001bd4:	00b3      	lsls	r3, r6, #2
 8001bd6:	58eb      	ldr	r3, [r5, r3]
 8001bd8:	4798      	blx	r3
 8001bda:	3601      	adds	r6, #1
 8001bdc:	e7ee      	b.n	8001bbc <__libc_init_array+0xc>
 8001bde:	00b3      	lsls	r3, r6, #2
 8001be0:	58eb      	ldr	r3, [r5, r3]
 8001be2:	4798      	blx	r3
 8001be4:	3601      	adds	r6, #1
 8001be6:	e7f2      	b.n	8001bce <__libc_init_array+0x1e>
 8001be8:	08003154 	.word	0x08003154
 8001bec:	08003154 	.word	0x08003154
 8001bf0:	08003158 	.word	0x08003158
 8001bf4:	08003154 	.word	0x08003154

08001bf8 <__retarget_lock_init_recursive>:
 8001bf8:	4770      	bx	lr

08001bfa <__retarget_lock_acquire_recursive>:
 8001bfa:	4770      	bx	lr

08001bfc <__retarget_lock_release_recursive>:
 8001bfc:	4770      	bx	lr
	...

08001c00 <_free_r>:
 8001c00:	b570      	push	{r4, r5, r6, lr}
 8001c02:	0005      	movs	r5, r0
 8001c04:	1e0c      	subs	r4, r1, #0
 8001c06:	d010      	beq.n	8001c2a <_free_r+0x2a>
 8001c08:	3c04      	subs	r4, #4
 8001c0a:	6823      	ldr	r3, [r4, #0]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	da00      	bge.n	8001c12 <_free_r+0x12>
 8001c10:	18e4      	adds	r4, r4, r3
 8001c12:	0028      	movs	r0, r5
 8001c14:	f000 f8ea 	bl	8001dec <__malloc_lock>
 8001c18:	4a1d      	ldr	r2, [pc, #116]	@ (8001c90 <_free_r+0x90>)
 8001c1a:	6813      	ldr	r3, [r2, #0]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d105      	bne.n	8001c2c <_free_r+0x2c>
 8001c20:	6063      	str	r3, [r4, #4]
 8001c22:	6014      	str	r4, [r2, #0]
 8001c24:	0028      	movs	r0, r5
 8001c26:	f000 f8e9 	bl	8001dfc <__malloc_unlock>
 8001c2a:	bd70      	pop	{r4, r5, r6, pc}
 8001c2c:	42a3      	cmp	r3, r4
 8001c2e:	d908      	bls.n	8001c42 <_free_r+0x42>
 8001c30:	6820      	ldr	r0, [r4, #0]
 8001c32:	1821      	adds	r1, r4, r0
 8001c34:	428b      	cmp	r3, r1
 8001c36:	d1f3      	bne.n	8001c20 <_free_r+0x20>
 8001c38:	6819      	ldr	r1, [r3, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	1809      	adds	r1, r1, r0
 8001c3e:	6021      	str	r1, [r4, #0]
 8001c40:	e7ee      	b.n	8001c20 <_free_r+0x20>
 8001c42:	001a      	movs	r2, r3
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <_free_r+0x4e>
 8001c4a:	42a3      	cmp	r3, r4
 8001c4c:	d9f9      	bls.n	8001c42 <_free_r+0x42>
 8001c4e:	6811      	ldr	r1, [r2, #0]
 8001c50:	1850      	adds	r0, r2, r1
 8001c52:	42a0      	cmp	r0, r4
 8001c54:	d10b      	bne.n	8001c6e <_free_r+0x6e>
 8001c56:	6820      	ldr	r0, [r4, #0]
 8001c58:	1809      	adds	r1, r1, r0
 8001c5a:	1850      	adds	r0, r2, r1
 8001c5c:	6011      	str	r1, [r2, #0]
 8001c5e:	4283      	cmp	r3, r0
 8001c60:	d1e0      	bne.n	8001c24 <_free_r+0x24>
 8001c62:	6818      	ldr	r0, [r3, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	1841      	adds	r1, r0, r1
 8001c68:	6011      	str	r1, [r2, #0]
 8001c6a:	6053      	str	r3, [r2, #4]
 8001c6c:	e7da      	b.n	8001c24 <_free_r+0x24>
 8001c6e:	42a0      	cmp	r0, r4
 8001c70:	d902      	bls.n	8001c78 <_free_r+0x78>
 8001c72:	230c      	movs	r3, #12
 8001c74:	602b      	str	r3, [r5, #0]
 8001c76:	e7d5      	b.n	8001c24 <_free_r+0x24>
 8001c78:	6820      	ldr	r0, [r4, #0]
 8001c7a:	1821      	adds	r1, r4, r0
 8001c7c:	428b      	cmp	r3, r1
 8001c7e:	d103      	bne.n	8001c88 <_free_r+0x88>
 8001c80:	6819      	ldr	r1, [r3, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	1809      	adds	r1, r1, r0
 8001c86:	6021      	str	r1, [r4, #0]
 8001c88:	6063      	str	r3, [r4, #4]
 8001c8a:	6054      	str	r4, [r2, #4]
 8001c8c:	e7ca      	b.n	8001c24 <_free_r+0x24>
 8001c8e:	46c0      	nop			@ (mov r8, r8)
 8001c90:	200002d8 	.word	0x200002d8

08001c94 <malloc>:
 8001c94:	b510      	push	{r4, lr}
 8001c96:	4b03      	ldr	r3, [pc, #12]	@ (8001ca4 <malloc+0x10>)
 8001c98:	0001      	movs	r1, r0
 8001c9a:	6818      	ldr	r0, [r3, #0]
 8001c9c:	f000 f826 	bl	8001cec <_malloc_r>
 8001ca0:	bd10      	pop	{r4, pc}
 8001ca2:	46c0      	nop			@ (mov r8, r8)
 8001ca4:	20000010 	.word	0x20000010

08001ca8 <sbrk_aligned>:
 8001ca8:	b570      	push	{r4, r5, r6, lr}
 8001caa:	4e0f      	ldr	r6, [pc, #60]	@ (8001ce8 <sbrk_aligned+0x40>)
 8001cac:	000d      	movs	r5, r1
 8001cae:	6831      	ldr	r1, [r6, #0]
 8001cb0:	0004      	movs	r4, r0
 8001cb2:	2900      	cmp	r1, #0
 8001cb4:	d102      	bne.n	8001cbc <sbrk_aligned+0x14>
 8001cb6:	f001 f841 	bl	8002d3c <_sbrk_r>
 8001cba:	6030      	str	r0, [r6, #0]
 8001cbc:	0029      	movs	r1, r5
 8001cbe:	0020      	movs	r0, r4
 8001cc0:	f001 f83c 	bl	8002d3c <_sbrk_r>
 8001cc4:	1c43      	adds	r3, r0, #1
 8001cc6:	d103      	bne.n	8001cd0 <sbrk_aligned+0x28>
 8001cc8:	2501      	movs	r5, #1
 8001cca:	426d      	negs	r5, r5
 8001ccc:	0028      	movs	r0, r5
 8001cce:	bd70      	pop	{r4, r5, r6, pc}
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	1cc5      	adds	r5, r0, #3
 8001cd4:	439d      	bics	r5, r3
 8001cd6:	42a8      	cmp	r0, r5
 8001cd8:	d0f8      	beq.n	8001ccc <sbrk_aligned+0x24>
 8001cda:	1a29      	subs	r1, r5, r0
 8001cdc:	0020      	movs	r0, r4
 8001cde:	f001 f82d 	bl	8002d3c <_sbrk_r>
 8001ce2:	3001      	adds	r0, #1
 8001ce4:	d1f2      	bne.n	8001ccc <sbrk_aligned+0x24>
 8001ce6:	e7ef      	b.n	8001cc8 <sbrk_aligned+0x20>
 8001ce8:	200002d4 	.word	0x200002d4

08001cec <_malloc_r>:
 8001cec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001cee:	2203      	movs	r2, #3
 8001cf0:	1ccb      	adds	r3, r1, #3
 8001cf2:	4393      	bics	r3, r2
 8001cf4:	3308      	adds	r3, #8
 8001cf6:	0005      	movs	r5, r0
 8001cf8:	001f      	movs	r7, r3
 8001cfa:	2b0c      	cmp	r3, #12
 8001cfc:	d234      	bcs.n	8001d68 <_malloc_r+0x7c>
 8001cfe:	270c      	movs	r7, #12
 8001d00:	42b9      	cmp	r1, r7
 8001d02:	d833      	bhi.n	8001d6c <_malloc_r+0x80>
 8001d04:	0028      	movs	r0, r5
 8001d06:	f000 f871 	bl	8001dec <__malloc_lock>
 8001d0a:	4e37      	ldr	r6, [pc, #220]	@ (8001de8 <_malloc_r+0xfc>)
 8001d0c:	6833      	ldr	r3, [r6, #0]
 8001d0e:	001c      	movs	r4, r3
 8001d10:	2c00      	cmp	r4, #0
 8001d12:	d12f      	bne.n	8001d74 <_malloc_r+0x88>
 8001d14:	0039      	movs	r1, r7
 8001d16:	0028      	movs	r0, r5
 8001d18:	f7ff ffc6 	bl	8001ca8 <sbrk_aligned>
 8001d1c:	0004      	movs	r4, r0
 8001d1e:	1c43      	adds	r3, r0, #1
 8001d20:	d15f      	bne.n	8001de2 <_malloc_r+0xf6>
 8001d22:	6834      	ldr	r4, [r6, #0]
 8001d24:	9400      	str	r4, [sp, #0]
 8001d26:	9b00      	ldr	r3, [sp, #0]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d14a      	bne.n	8001dc2 <_malloc_r+0xd6>
 8001d2c:	2c00      	cmp	r4, #0
 8001d2e:	d052      	beq.n	8001dd6 <_malloc_r+0xea>
 8001d30:	6823      	ldr	r3, [r4, #0]
 8001d32:	0028      	movs	r0, r5
 8001d34:	18e3      	adds	r3, r4, r3
 8001d36:	9900      	ldr	r1, [sp, #0]
 8001d38:	9301      	str	r3, [sp, #4]
 8001d3a:	f000 ffff 	bl	8002d3c <_sbrk_r>
 8001d3e:	9b01      	ldr	r3, [sp, #4]
 8001d40:	4283      	cmp	r3, r0
 8001d42:	d148      	bne.n	8001dd6 <_malloc_r+0xea>
 8001d44:	6823      	ldr	r3, [r4, #0]
 8001d46:	0028      	movs	r0, r5
 8001d48:	1aff      	subs	r7, r7, r3
 8001d4a:	0039      	movs	r1, r7
 8001d4c:	f7ff ffac 	bl	8001ca8 <sbrk_aligned>
 8001d50:	3001      	adds	r0, #1
 8001d52:	d040      	beq.n	8001dd6 <_malloc_r+0xea>
 8001d54:	6823      	ldr	r3, [r4, #0]
 8001d56:	19db      	adds	r3, r3, r7
 8001d58:	6023      	str	r3, [r4, #0]
 8001d5a:	6833      	ldr	r3, [r6, #0]
 8001d5c:	685a      	ldr	r2, [r3, #4]
 8001d5e:	2a00      	cmp	r2, #0
 8001d60:	d133      	bne.n	8001dca <_malloc_r+0xde>
 8001d62:	9b00      	ldr	r3, [sp, #0]
 8001d64:	6033      	str	r3, [r6, #0]
 8001d66:	e019      	b.n	8001d9c <_malloc_r+0xb0>
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	dac9      	bge.n	8001d00 <_malloc_r+0x14>
 8001d6c:	230c      	movs	r3, #12
 8001d6e:	602b      	str	r3, [r5, #0]
 8001d70:	2000      	movs	r0, #0
 8001d72:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001d74:	6821      	ldr	r1, [r4, #0]
 8001d76:	1bc9      	subs	r1, r1, r7
 8001d78:	d420      	bmi.n	8001dbc <_malloc_r+0xd0>
 8001d7a:	290b      	cmp	r1, #11
 8001d7c:	d90a      	bls.n	8001d94 <_malloc_r+0xa8>
 8001d7e:	19e2      	adds	r2, r4, r7
 8001d80:	6027      	str	r7, [r4, #0]
 8001d82:	42a3      	cmp	r3, r4
 8001d84:	d104      	bne.n	8001d90 <_malloc_r+0xa4>
 8001d86:	6032      	str	r2, [r6, #0]
 8001d88:	6863      	ldr	r3, [r4, #4]
 8001d8a:	6011      	str	r1, [r2, #0]
 8001d8c:	6053      	str	r3, [r2, #4]
 8001d8e:	e005      	b.n	8001d9c <_malloc_r+0xb0>
 8001d90:	605a      	str	r2, [r3, #4]
 8001d92:	e7f9      	b.n	8001d88 <_malloc_r+0x9c>
 8001d94:	6862      	ldr	r2, [r4, #4]
 8001d96:	42a3      	cmp	r3, r4
 8001d98:	d10e      	bne.n	8001db8 <_malloc_r+0xcc>
 8001d9a:	6032      	str	r2, [r6, #0]
 8001d9c:	0028      	movs	r0, r5
 8001d9e:	f000 f82d 	bl	8001dfc <__malloc_unlock>
 8001da2:	0020      	movs	r0, r4
 8001da4:	2207      	movs	r2, #7
 8001da6:	300b      	adds	r0, #11
 8001da8:	1d23      	adds	r3, r4, #4
 8001daa:	4390      	bics	r0, r2
 8001dac:	1ac2      	subs	r2, r0, r3
 8001dae:	4298      	cmp	r0, r3
 8001db0:	d0df      	beq.n	8001d72 <_malloc_r+0x86>
 8001db2:	1a1b      	subs	r3, r3, r0
 8001db4:	50a3      	str	r3, [r4, r2]
 8001db6:	e7dc      	b.n	8001d72 <_malloc_r+0x86>
 8001db8:	605a      	str	r2, [r3, #4]
 8001dba:	e7ef      	b.n	8001d9c <_malloc_r+0xb0>
 8001dbc:	0023      	movs	r3, r4
 8001dbe:	6864      	ldr	r4, [r4, #4]
 8001dc0:	e7a6      	b.n	8001d10 <_malloc_r+0x24>
 8001dc2:	9c00      	ldr	r4, [sp, #0]
 8001dc4:	6863      	ldr	r3, [r4, #4]
 8001dc6:	9300      	str	r3, [sp, #0]
 8001dc8:	e7ad      	b.n	8001d26 <_malloc_r+0x3a>
 8001dca:	001a      	movs	r2, r3
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	42a3      	cmp	r3, r4
 8001dd0:	d1fb      	bne.n	8001dca <_malloc_r+0xde>
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	e7da      	b.n	8001d8c <_malloc_r+0xa0>
 8001dd6:	230c      	movs	r3, #12
 8001dd8:	0028      	movs	r0, r5
 8001dda:	602b      	str	r3, [r5, #0]
 8001ddc:	f000 f80e 	bl	8001dfc <__malloc_unlock>
 8001de0:	e7c6      	b.n	8001d70 <_malloc_r+0x84>
 8001de2:	6007      	str	r7, [r0, #0]
 8001de4:	e7da      	b.n	8001d9c <_malloc_r+0xb0>
 8001de6:	46c0      	nop			@ (mov r8, r8)
 8001de8:	200002d8 	.word	0x200002d8

08001dec <__malloc_lock>:
 8001dec:	b510      	push	{r4, lr}
 8001dee:	4802      	ldr	r0, [pc, #8]	@ (8001df8 <__malloc_lock+0xc>)
 8001df0:	f7ff ff03 	bl	8001bfa <__retarget_lock_acquire_recursive>
 8001df4:	bd10      	pop	{r4, pc}
 8001df6:	46c0      	nop			@ (mov r8, r8)
 8001df8:	200002d0 	.word	0x200002d0

08001dfc <__malloc_unlock>:
 8001dfc:	b510      	push	{r4, lr}
 8001dfe:	4802      	ldr	r0, [pc, #8]	@ (8001e08 <__malloc_unlock+0xc>)
 8001e00:	f7ff fefc 	bl	8001bfc <__retarget_lock_release_recursive>
 8001e04:	bd10      	pop	{r4, pc}
 8001e06:	46c0      	nop			@ (mov r8, r8)
 8001e08:	200002d0 	.word	0x200002d0

08001e0c <_sungetc_r>:
 8001e0c:	b570      	push	{r4, r5, r6, lr}
 8001e0e:	0014      	movs	r4, r2
 8001e10:	1c4b      	adds	r3, r1, #1
 8001e12:	d103      	bne.n	8001e1c <_sungetc_r+0x10>
 8001e14:	2501      	movs	r5, #1
 8001e16:	426d      	negs	r5, r5
 8001e18:	0028      	movs	r0, r5
 8001e1a:	bd70      	pop	{r4, r5, r6, pc}
 8001e1c:	8993      	ldrh	r3, [r2, #12]
 8001e1e:	2220      	movs	r2, #32
 8001e20:	4393      	bics	r3, r2
 8001e22:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8001e24:	81a3      	strh	r3, [r4, #12]
 8001e26:	b2ce      	uxtb	r6, r1
 8001e28:	6863      	ldr	r3, [r4, #4]
 8001e2a:	b2cd      	uxtb	r5, r1
 8001e2c:	2a00      	cmp	r2, #0
 8001e2e:	d010      	beq.n	8001e52 <_sungetc_r+0x46>
 8001e30:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8001e32:	429a      	cmp	r2, r3
 8001e34:	dd07      	ble.n	8001e46 <_sungetc_r+0x3a>
 8001e36:	6823      	ldr	r3, [r4, #0]
 8001e38:	3b01      	subs	r3, #1
 8001e3a:	6023      	str	r3, [r4, #0]
 8001e3c:	701e      	strb	r6, [r3, #0]
 8001e3e:	6863      	ldr	r3, [r4, #4]
 8001e40:	3301      	adds	r3, #1
 8001e42:	6063      	str	r3, [r4, #4]
 8001e44:	e7e8      	b.n	8001e18 <_sungetc_r+0xc>
 8001e46:	0021      	movs	r1, r4
 8001e48:	f000 ff16 	bl	8002c78 <__submore>
 8001e4c:	2800      	cmp	r0, #0
 8001e4e:	d0f2      	beq.n	8001e36 <_sungetc_r+0x2a>
 8001e50:	e7e0      	b.n	8001e14 <_sungetc_r+0x8>
 8001e52:	6921      	ldr	r1, [r4, #16]
 8001e54:	6822      	ldr	r2, [r4, #0]
 8001e56:	2900      	cmp	r1, #0
 8001e58:	d007      	beq.n	8001e6a <_sungetc_r+0x5e>
 8001e5a:	4291      	cmp	r1, r2
 8001e5c:	d205      	bcs.n	8001e6a <_sungetc_r+0x5e>
 8001e5e:	1e51      	subs	r1, r2, #1
 8001e60:	7808      	ldrb	r0, [r1, #0]
 8001e62:	42a8      	cmp	r0, r5
 8001e64:	d101      	bne.n	8001e6a <_sungetc_r+0x5e>
 8001e66:	6021      	str	r1, [r4, #0]
 8001e68:	e7ea      	b.n	8001e40 <_sungetc_r+0x34>
 8001e6a:	6423      	str	r3, [r4, #64]	@ 0x40
 8001e6c:	0023      	movs	r3, r4
 8001e6e:	3344      	adds	r3, #68	@ 0x44
 8001e70:	6363      	str	r3, [r4, #52]	@ 0x34
 8001e72:	2303      	movs	r3, #3
 8001e74:	63a3      	str	r3, [r4, #56]	@ 0x38
 8001e76:	0023      	movs	r3, r4
 8001e78:	3346      	adds	r3, #70	@ 0x46
 8001e7a:	63e2      	str	r2, [r4, #60]	@ 0x3c
 8001e7c:	701e      	strb	r6, [r3, #0]
 8001e7e:	6023      	str	r3, [r4, #0]
 8001e80:	2301      	movs	r3, #1
 8001e82:	e7de      	b.n	8001e42 <_sungetc_r+0x36>

08001e84 <__ssrefill_r>:
 8001e84:	b510      	push	{r4, lr}
 8001e86:	000c      	movs	r4, r1
 8001e88:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8001e8a:	2900      	cmp	r1, #0
 8001e8c:	d00e      	beq.n	8001eac <__ssrefill_r+0x28>
 8001e8e:	0023      	movs	r3, r4
 8001e90:	3344      	adds	r3, #68	@ 0x44
 8001e92:	4299      	cmp	r1, r3
 8001e94:	d001      	beq.n	8001e9a <__ssrefill_r+0x16>
 8001e96:	f7ff feb3 	bl	8001c00 <_free_r>
 8001e9a:	2000      	movs	r0, #0
 8001e9c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001e9e:	6360      	str	r0, [r4, #52]	@ 0x34
 8001ea0:	6063      	str	r3, [r4, #4]
 8001ea2:	4283      	cmp	r3, r0
 8001ea4:	d002      	beq.n	8001eac <__ssrefill_r+0x28>
 8001ea6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8001ea8:	6023      	str	r3, [r4, #0]
 8001eaa:	bd10      	pop	{r4, pc}
 8001eac:	6923      	ldr	r3, [r4, #16]
 8001eae:	2001      	movs	r0, #1
 8001eb0:	6023      	str	r3, [r4, #0]
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	89a2      	ldrh	r2, [r4, #12]
 8001eb6:	6063      	str	r3, [r4, #4]
 8001eb8:	3320      	adds	r3, #32
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	81a3      	strh	r3, [r4, #12]
 8001ebe:	4240      	negs	r0, r0
 8001ec0:	e7f3      	b.n	8001eaa <__ssrefill_r+0x26>
	...

08001ec4 <__ssvfiscanf_r>:
 8001ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ec6:	4caa      	ldr	r4, [pc, #680]	@ (8002170 <__ssvfiscanf_r+0x2ac>)
 8001ec8:	44a5      	add	sp, r4
 8001eca:	000c      	movs	r4, r1
 8001ecc:	2100      	movs	r1, #0
 8001ece:	9001      	str	r0, [sp, #4]
 8001ed0:	20be      	movs	r0, #190	@ 0xbe
 8001ed2:	9146      	str	r1, [sp, #280]	@ 0x118
 8001ed4:	9147      	str	r1, [sp, #284]	@ 0x11c
 8001ed6:	a903      	add	r1, sp, #12
 8001ed8:	9148      	str	r1, [sp, #288]	@ 0x120
 8001eda:	49a6      	ldr	r1, [pc, #664]	@ (8002174 <__ssvfiscanf_r+0x2b0>)
 8001edc:	0040      	lsls	r0, r0, #1
 8001ede:	ad43      	add	r5, sp, #268	@ 0x10c
 8001ee0:	5029      	str	r1, [r5, r0]
 8001ee2:	49a5      	ldr	r1, [pc, #660]	@ (8002178 <__ssvfiscanf_r+0x2b4>)
 8001ee4:	3004      	adds	r0, #4
 8001ee6:	ad43      	add	r5, sp, #268	@ 0x10c
 8001ee8:	5029      	str	r1, [r5, r0]
 8001eea:	9302      	str	r3, [sp, #8]
 8001eec:	7813      	ldrb	r3, [r2, #0]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d100      	bne.n	8001ef4 <__ssvfiscanf_r+0x30>
 8001ef2:	e13a      	b.n	800216a <__ssvfiscanf_r+0x2a6>
 8001ef4:	2108      	movs	r1, #8
 8001ef6:	2708      	movs	r7, #8
 8001ef8:	4ea0      	ldr	r6, [pc, #640]	@ (800217c <__ssvfiscanf_r+0x2b8>)
 8001efa:	1c55      	adds	r5, r2, #1
 8001efc:	5cf0      	ldrb	r0, [r6, r3]
 8001efe:	4001      	ands	r1, r0
 8001f00:	4238      	tst	r0, r7
 8001f02:	d01c      	beq.n	8001f3e <__ssvfiscanf_r+0x7a>
 8001f04:	6863      	ldr	r3, [r4, #4]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	dd0f      	ble.n	8001f2a <__ssvfiscanf_r+0x66>
 8001f0a:	6823      	ldr	r3, [r4, #0]
 8001f0c:	781a      	ldrb	r2, [r3, #0]
 8001f0e:	5cb2      	ldrb	r2, [r6, r2]
 8001f10:	423a      	tst	r2, r7
 8001f12:	d101      	bne.n	8001f18 <__ssvfiscanf_r+0x54>
 8001f14:	002a      	movs	r2, r5
 8001f16:	e7e9      	b.n	8001eec <__ssvfiscanf_r+0x28>
 8001f18:	9a47      	ldr	r2, [sp, #284]	@ 0x11c
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	3201      	adds	r2, #1
 8001f1e:	9247      	str	r2, [sp, #284]	@ 0x11c
 8001f20:	6862      	ldr	r2, [r4, #4]
 8001f22:	6023      	str	r3, [r4, #0]
 8001f24:	3a01      	subs	r2, #1
 8001f26:	6062      	str	r2, [r4, #4]
 8001f28:	e7ec      	b.n	8001f04 <__ssvfiscanf_r+0x40>
 8001f2a:	22c0      	movs	r2, #192	@ 0xc0
 8001f2c:	ab43      	add	r3, sp, #268	@ 0x10c
 8001f2e:	0052      	lsls	r2, r2, #1
 8001f30:	0021      	movs	r1, r4
 8001f32:	589b      	ldr	r3, [r3, r2]
 8001f34:	9801      	ldr	r0, [sp, #4]
 8001f36:	4798      	blx	r3
 8001f38:	2800      	cmp	r0, #0
 8001f3a:	d0e6      	beq.n	8001f0a <__ssvfiscanf_r+0x46>
 8001f3c:	e7ea      	b.n	8001f14 <__ssvfiscanf_r+0x50>
 8001f3e:	001e      	movs	r6, r3
 8001f40:	2b25      	cmp	r3, #37	@ 0x25
 8001f42:	d160      	bne.n	8002006 <__ssvfiscanf_r+0x142>
 8001f44:	9145      	str	r1, [sp, #276]	@ 0x114
 8001f46:	9143      	str	r1, [sp, #268]	@ 0x10c
 8001f48:	7853      	ldrb	r3, [r2, #1]
 8001f4a:	2b2a      	cmp	r3, #42	@ 0x2a
 8001f4c:	d102      	bne.n	8001f54 <__ssvfiscanf_r+0x90>
 8001f4e:	3b1a      	subs	r3, #26
 8001f50:	9343      	str	r3, [sp, #268]	@ 0x10c
 8001f52:	1c95      	adds	r5, r2, #2
 8001f54:	002e      	movs	r6, r5
 8001f56:	220a      	movs	r2, #10
 8001f58:	7831      	ldrb	r1, [r6, #0]
 8001f5a:	1c75      	adds	r5, r6, #1
 8001f5c:	000b      	movs	r3, r1
 8001f5e:	3b30      	subs	r3, #48	@ 0x30
 8001f60:	2b09      	cmp	r3, #9
 8001f62:	d91d      	bls.n	8001fa0 <__ssvfiscanf_r+0xdc>
 8001f64:	4f86      	ldr	r7, [pc, #536]	@ (8002180 <__ssvfiscanf_r+0x2bc>)
 8001f66:	2203      	movs	r2, #3
 8001f68:	0038      	movs	r0, r7
 8001f6a:	f000 fef9 	bl	8002d60 <memchr>
 8001f6e:	2800      	cmp	r0, #0
 8001f70:	d006      	beq.n	8001f80 <__ssvfiscanf_r+0xbc>
 8001f72:	2301      	movs	r3, #1
 8001f74:	1bc0      	subs	r0, r0, r7
 8001f76:	4083      	lsls	r3, r0
 8001f78:	002e      	movs	r6, r5
 8001f7a:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	9343      	str	r3, [sp, #268]	@ 0x10c
 8001f80:	1c75      	adds	r5, r6, #1
 8001f82:	7836      	ldrb	r6, [r6, #0]
 8001f84:	2e78      	cmp	r6, #120	@ 0x78
 8001f86:	d806      	bhi.n	8001f96 <__ssvfiscanf_r+0xd2>
 8001f88:	2e57      	cmp	r6, #87	@ 0x57
 8001f8a:	d810      	bhi.n	8001fae <__ssvfiscanf_r+0xea>
 8001f8c:	2e25      	cmp	r6, #37	@ 0x25
 8001f8e:	d03a      	beq.n	8002006 <__ssvfiscanf_r+0x142>
 8001f90:	d834      	bhi.n	8001ffc <__ssvfiscanf_r+0x138>
 8001f92:	2e00      	cmp	r6, #0
 8001f94:	d055      	beq.n	8002042 <__ssvfiscanf_r+0x17e>
 8001f96:	2303      	movs	r3, #3
 8001f98:	9349      	str	r3, [sp, #292]	@ 0x124
 8001f9a:	3307      	adds	r3, #7
 8001f9c:	9344      	str	r3, [sp, #272]	@ 0x110
 8001f9e:	e069      	b.n	8002074 <__ssvfiscanf_r+0x1b0>
 8001fa0:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8001fa2:	002e      	movs	r6, r5
 8001fa4:	4353      	muls	r3, r2
 8001fa6:	3b30      	subs	r3, #48	@ 0x30
 8001fa8:	185b      	adds	r3, r3, r1
 8001faa:	9345      	str	r3, [sp, #276]	@ 0x114
 8001fac:	e7d4      	b.n	8001f58 <__ssvfiscanf_r+0x94>
 8001fae:	0030      	movs	r0, r6
 8001fb0:	3858      	subs	r0, #88	@ 0x58
 8001fb2:	2820      	cmp	r0, #32
 8001fb4:	d8ef      	bhi.n	8001f96 <__ssvfiscanf_r+0xd2>
 8001fb6:	f7fe f8af 	bl	8000118 <__gnu_thumb1_case_shi>
 8001fba:	004b      	.short	0x004b
 8001fbc:	ffeeffee 	.word	0xffeeffee
 8001fc0:	ffee007d 	.word	0xffee007d
 8001fc4:	ffeeffee 	.word	0xffeeffee
 8001fc8:	ffeeffee 	.word	0xffeeffee
 8001fcc:	ffeeffee 	.word	0xffeeffee
 8001fd0:	007b0088 	.word	0x007b0088
 8001fd4:	00240024 	.word	0x00240024
 8001fd8:	ffee0024 	.word	0xffee0024
 8001fdc:	ffee0055 	.word	0xffee0055
 8001fe0:	ffeeffee 	.word	0xffeeffee
 8001fe4:	0090ffee 	.word	0x0090ffee
 8001fe8:	00470059 	.word	0x00470059
 8001fec:	ffeeffee 	.word	0xffeeffee
 8001ff0:	ffee008e 	.word	0xffee008e
 8001ff4:	ffee007b 	.word	0xffee007b
 8001ff8:	004bffee 	.word	0x004bffee
 8001ffc:	3e45      	subs	r6, #69	@ 0x45
 8001ffe:	2e02      	cmp	r6, #2
 8002000:	d8c9      	bhi.n	8001f96 <__ssvfiscanf_r+0xd2>
 8002002:	2305      	movs	r3, #5
 8002004:	e035      	b.n	8002072 <__ssvfiscanf_r+0x1ae>
 8002006:	6863      	ldr	r3, [r4, #4]
 8002008:	2b00      	cmp	r3, #0
 800200a:	dd0d      	ble.n	8002028 <__ssvfiscanf_r+0x164>
 800200c:	6823      	ldr	r3, [r4, #0]
 800200e:	781a      	ldrb	r2, [r3, #0]
 8002010:	42b2      	cmp	r2, r6
 8002012:	d000      	beq.n	8002016 <__ssvfiscanf_r+0x152>
 8002014:	e0a9      	b.n	800216a <__ssvfiscanf_r+0x2a6>
 8002016:	3301      	adds	r3, #1
 8002018:	6862      	ldr	r2, [r4, #4]
 800201a:	6023      	str	r3, [r4, #0]
 800201c:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800201e:	3a01      	subs	r2, #1
 8002020:	3301      	adds	r3, #1
 8002022:	6062      	str	r2, [r4, #4]
 8002024:	9347      	str	r3, [sp, #284]	@ 0x11c
 8002026:	e775      	b.n	8001f14 <__ssvfiscanf_r+0x50>
 8002028:	23c0      	movs	r3, #192	@ 0xc0
 800202a:	aa43      	add	r2, sp, #268	@ 0x10c
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	0021      	movs	r1, r4
 8002030:	58d3      	ldr	r3, [r2, r3]
 8002032:	9801      	ldr	r0, [sp, #4]
 8002034:	4798      	blx	r3
 8002036:	2800      	cmp	r0, #0
 8002038:	d0e8      	beq.n	800200c <__ssvfiscanf_r+0x148>
 800203a:	9846      	ldr	r0, [sp, #280]	@ 0x118
 800203c:	2800      	cmp	r0, #0
 800203e:	d000      	beq.n	8002042 <__ssvfiscanf_r+0x17e>
 8002040:	e08b      	b.n	800215a <__ssvfiscanf_r+0x296>
 8002042:	2001      	movs	r0, #1
 8002044:	4240      	negs	r0, r0
 8002046:	e08c      	b.n	8002162 <__ssvfiscanf_r+0x29e>
 8002048:	2320      	movs	r3, #32
 800204a:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 800204c:	4313      	orrs	r3, r2
 800204e:	9343      	str	r3, [sp, #268]	@ 0x10c
 8002050:	2380      	movs	r3, #128	@ 0x80
 8002052:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	4313      	orrs	r3, r2
 8002058:	9343      	str	r3, [sp, #268]	@ 0x10c
 800205a:	2310      	movs	r3, #16
 800205c:	9344      	str	r3, [sp, #272]	@ 0x110
 800205e:	2e6e      	cmp	r6, #110	@ 0x6e
 8002060:	d902      	bls.n	8002068 <__ssvfiscanf_r+0x1a4>
 8002062:	e005      	b.n	8002070 <__ssvfiscanf_r+0x1ac>
 8002064:	2300      	movs	r3, #0
 8002066:	9344      	str	r3, [sp, #272]	@ 0x110
 8002068:	2303      	movs	r3, #3
 800206a:	e002      	b.n	8002072 <__ssvfiscanf_r+0x1ae>
 800206c:	2308      	movs	r3, #8
 800206e:	9344      	str	r3, [sp, #272]	@ 0x110
 8002070:	2304      	movs	r3, #4
 8002072:	9349      	str	r3, [sp, #292]	@ 0x124
 8002074:	6863      	ldr	r3, [r4, #4]
 8002076:	2b00      	cmp	r3, #0
 8002078:	dd3e      	ble.n	80020f8 <__ssvfiscanf_r+0x234>
 800207a:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800207c:	065b      	lsls	r3, r3, #25
 800207e:	d408      	bmi.n	8002092 <__ssvfiscanf_r+0x1ce>
 8002080:	27c0      	movs	r7, #192	@ 0xc0
 8002082:	2608      	movs	r6, #8
 8002084:	007f      	lsls	r7, r7, #1
 8002086:	6823      	ldr	r3, [r4, #0]
 8002088:	493c      	ldr	r1, [pc, #240]	@ (800217c <__ssvfiscanf_r+0x2b8>)
 800208a:	781a      	ldrb	r2, [r3, #0]
 800208c:	5c8a      	ldrb	r2, [r1, r2]
 800208e:	4232      	tst	r2, r6
 8002090:	d13c      	bne.n	800210c <__ssvfiscanf_r+0x248>
 8002092:	9b49      	ldr	r3, [sp, #292]	@ 0x124
 8002094:	2b02      	cmp	r3, #2
 8002096:	dc4c      	bgt.n	8002132 <__ssvfiscanf_r+0x26e>
 8002098:	0022      	movs	r2, r4
 800209a:	9801      	ldr	r0, [sp, #4]
 800209c:	ab02      	add	r3, sp, #8
 800209e:	a943      	add	r1, sp, #268	@ 0x10c
 80020a0:	f000 fb34 	bl	800270c <_scanf_chars>
 80020a4:	2801      	cmp	r0, #1
 80020a6:	d060      	beq.n	800216a <__ssvfiscanf_r+0x2a6>
 80020a8:	2802      	cmp	r0, #2
 80020aa:	d000      	beq.n	80020ae <__ssvfiscanf_r+0x1ea>
 80020ac:	e732      	b.n	8001f14 <__ssvfiscanf_r+0x50>
 80020ae:	e7c4      	b.n	800203a <__ssvfiscanf_r+0x176>
 80020b0:	230a      	movs	r3, #10
 80020b2:	e7d3      	b.n	800205c <__ssvfiscanf_r+0x198>
 80020b4:	0029      	movs	r1, r5
 80020b6:	a803      	add	r0, sp, #12
 80020b8:	f000 fda5 	bl	8002c06 <__sccl>
 80020bc:	2340      	movs	r3, #64	@ 0x40
 80020be:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 80020c0:	0005      	movs	r5, r0
 80020c2:	4313      	orrs	r3, r2
 80020c4:	9343      	str	r3, [sp, #268]	@ 0x10c
 80020c6:	2301      	movs	r3, #1
 80020c8:	e7d3      	b.n	8002072 <__ssvfiscanf_r+0x1ae>
 80020ca:	2340      	movs	r3, #64	@ 0x40
 80020cc:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 80020ce:	4313      	orrs	r3, r2
 80020d0:	9343      	str	r3, [sp, #268]	@ 0x10c
 80020d2:	2300      	movs	r3, #0
 80020d4:	e7cd      	b.n	8002072 <__ssvfiscanf_r+0x1ae>
 80020d6:	2302      	movs	r3, #2
 80020d8:	e7cb      	b.n	8002072 <__ssvfiscanf_r+0x1ae>
 80020da:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 80020dc:	06d3      	lsls	r3, r2, #27
 80020de:	d500      	bpl.n	80020e2 <__ssvfiscanf_r+0x21e>
 80020e0:	e718      	b.n	8001f14 <__ssvfiscanf_r+0x50>
 80020e2:	9b02      	ldr	r3, [sp, #8]
 80020e4:	9947      	ldr	r1, [sp, #284]	@ 0x11c
 80020e6:	1d18      	adds	r0, r3, #4
 80020e8:	9002      	str	r0, [sp, #8]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	07d6      	lsls	r6, r2, #31
 80020ee:	d501      	bpl.n	80020f4 <__ssvfiscanf_r+0x230>
 80020f0:	8019      	strh	r1, [r3, #0]
 80020f2:	e70f      	b.n	8001f14 <__ssvfiscanf_r+0x50>
 80020f4:	6019      	str	r1, [r3, #0]
 80020f6:	e70d      	b.n	8001f14 <__ssvfiscanf_r+0x50>
 80020f8:	23c0      	movs	r3, #192	@ 0xc0
 80020fa:	aa43      	add	r2, sp, #268	@ 0x10c
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	0021      	movs	r1, r4
 8002100:	58d3      	ldr	r3, [r2, r3]
 8002102:	9801      	ldr	r0, [sp, #4]
 8002104:	4798      	blx	r3
 8002106:	2800      	cmp	r0, #0
 8002108:	d0b7      	beq.n	800207a <__ssvfiscanf_r+0x1b6>
 800210a:	e796      	b.n	800203a <__ssvfiscanf_r+0x176>
 800210c:	9a47      	ldr	r2, [sp, #284]	@ 0x11c
 800210e:	3201      	adds	r2, #1
 8002110:	9247      	str	r2, [sp, #284]	@ 0x11c
 8002112:	6862      	ldr	r2, [r4, #4]
 8002114:	3a01      	subs	r2, #1
 8002116:	6062      	str	r2, [r4, #4]
 8002118:	2a00      	cmp	r2, #0
 800211a:	dd02      	ble.n	8002122 <__ssvfiscanf_r+0x25e>
 800211c:	3301      	adds	r3, #1
 800211e:	6023      	str	r3, [r4, #0]
 8002120:	e7b1      	b.n	8002086 <__ssvfiscanf_r+0x1c2>
 8002122:	ab43      	add	r3, sp, #268	@ 0x10c
 8002124:	0021      	movs	r1, r4
 8002126:	59db      	ldr	r3, [r3, r7]
 8002128:	9801      	ldr	r0, [sp, #4]
 800212a:	4798      	blx	r3
 800212c:	2800      	cmp	r0, #0
 800212e:	d0aa      	beq.n	8002086 <__ssvfiscanf_r+0x1c2>
 8002130:	e783      	b.n	800203a <__ssvfiscanf_r+0x176>
 8002132:	2b04      	cmp	r3, #4
 8002134:	dc06      	bgt.n	8002144 <__ssvfiscanf_r+0x280>
 8002136:	0022      	movs	r2, r4
 8002138:	9801      	ldr	r0, [sp, #4]
 800213a:	ab02      	add	r3, sp, #8
 800213c:	a943      	add	r1, sp, #268	@ 0x10c
 800213e:	f000 fb45 	bl	80027cc <_scanf_i>
 8002142:	e7af      	b.n	80020a4 <__ssvfiscanf_r+0x1e0>
 8002144:	4b0f      	ldr	r3, [pc, #60]	@ (8002184 <__ssvfiscanf_r+0x2c0>)
 8002146:	2b00      	cmp	r3, #0
 8002148:	d100      	bne.n	800214c <__ssvfiscanf_r+0x288>
 800214a:	e6e3      	b.n	8001f14 <__ssvfiscanf_r+0x50>
 800214c:	0022      	movs	r2, r4
 800214e:	9801      	ldr	r0, [sp, #4]
 8002150:	ab02      	add	r3, sp, #8
 8002152:	a943      	add	r1, sp, #268	@ 0x10c
 8002154:	e000      	b.n	8002158 <__ssvfiscanf_r+0x294>
 8002156:	bf00      	nop
 8002158:	e7a4      	b.n	80020a4 <__ssvfiscanf_r+0x1e0>
 800215a:	89a3      	ldrh	r3, [r4, #12]
 800215c:	065b      	lsls	r3, r3, #25
 800215e:	d500      	bpl.n	8002162 <__ssvfiscanf_r+0x29e>
 8002160:	e76f      	b.n	8002042 <__ssvfiscanf_r+0x17e>
 8002162:	23a5      	movs	r3, #165	@ 0xa5
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	449d      	add	sp, r3
 8002168:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800216a:	9846      	ldr	r0, [sp, #280]	@ 0x118
 800216c:	e7f9      	b.n	8002162 <__ssvfiscanf_r+0x29e>
 800216e:	46c0      	nop			@ (mov r8, r8)
 8002170:	fffffd6c 	.word	0xfffffd6c
 8002174:	08001e0d 	.word	0x08001e0d
 8002178:	08001e85 	.word	0x08001e85
 800217c:	08003005 	.word	0x08003005
 8002180:	08003105 	.word	0x08003105
 8002184:	00000000 	.word	0x00000000

08002188 <__sfputc_r>:
 8002188:	6893      	ldr	r3, [r2, #8]
 800218a:	b510      	push	{r4, lr}
 800218c:	3b01      	subs	r3, #1
 800218e:	6093      	str	r3, [r2, #8]
 8002190:	2b00      	cmp	r3, #0
 8002192:	da04      	bge.n	800219e <__sfputc_r+0x16>
 8002194:	6994      	ldr	r4, [r2, #24]
 8002196:	42a3      	cmp	r3, r4
 8002198:	db07      	blt.n	80021aa <__sfputc_r+0x22>
 800219a:	290a      	cmp	r1, #10
 800219c:	d005      	beq.n	80021aa <__sfputc_r+0x22>
 800219e:	6813      	ldr	r3, [r2, #0]
 80021a0:	1c58      	adds	r0, r3, #1
 80021a2:	6010      	str	r0, [r2, #0]
 80021a4:	7019      	strb	r1, [r3, #0]
 80021a6:	0008      	movs	r0, r1
 80021a8:	bd10      	pop	{r4, pc}
 80021aa:	f7ff fbcf 	bl	800194c <__swbuf_r>
 80021ae:	0001      	movs	r1, r0
 80021b0:	e7f9      	b.n	80021a6 <__sfputc_r+0x1e>

080021b2 <__sfputs_r>:
 80021b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021b4:	0006      	movs	r6, r0
 80021b6:	000f      	movs	r7, r1
 80021b8:	0014      	movs	r4, r2
 80021ba:	18d5      	adds	r5, r2, r3
 80021bc:	42ac      	cmp	r4, r5
 80021be:	d101      	bne.n	80021c4 <__sfputs_r+0x12>
 80021c0:	2000      	movs	r0, #0
 80021c2:	e007      	b.n	80021d4 <__sfputs_r+0x22>
 80021c4:	7821      	ldrb	r1, [r4, #0]
 80021c6:	003a      	movs	r2, r7
 80021c8:	0030      	movs	r0, r6
 80021ca:	f7ff ffdd 	bl	8002188 <__sfputc_r>
 80021ce:	3401      	adds	r4, #1
 80021d0:	1c43      	adds	r3, r0, #1
 80021d2:	d1f3      	bne.n	80021bc <__sfputs_r+0xa>
 80021d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080021d8 <_vfiprintf_r>:
 80021d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021da:	b0a1      	sub	sp, #132	@ 0x84
 80021dc:	000f      	movs	r7, r1
 80021de:	0015      	movs	r5, r2
 80021e0:	001e      	movs	r6, r3
 80021e2:	9003      	str	r0, [sp, #12]
 80021e4:	2800      	cmp	r0, #0
 80021e6:	d004      	beq.n	80021f2 <_vfiprintf_r+0x1a>
 80021e8:	6a03      	ldr	r3, [r0, #32]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d101      	bne.n	80021f2 <_vfiprintf_r+0x1a>
 80021ee:	f7ff f9d3 	bl	8001598 <__sinit>
 80021f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80021f4:	07db      	lsls	r3, r3, #31
 80021f6:	d405      	bmi.n	8002204 <_vfiprintf_r+0x2c>
 80021f8:	89bb      	ldrh	r3, [r7, #12]
 80021fa:	059b      	lsls	r3, r3, #22
 80021fc:	d402      	bmi.n	8002204 <_vfiprintf_r+0x2c>
 80021fe:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002200:	f7ff fcfb 	bl	8001bfa <__retarget_lock_acquire_recursive>
 8002204:	89bb      	ldrh	r3, [r7, #12]
 8002206:	071b      	lsls	r3, r3, #28
 8002208:	d502      	bpl.n	8002210 <_vfiprintf_r+0x38>
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d113      	bne.n	8002238 <_vfiprintf_r+0x60>
 8002210:	0039      	movs	r1, r7
 8002212:	9803      	ldr	r0, [sp, #12]
 8002214:	f7ff fbdc 	bl	80019d0 <__swsetup_r>
 8002218:	2800      	cmp	r0, #0
 800221a:	d00d      	beq.n	8002238 <_vfiprintf_r+0x60>
 800221c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800221e:	07db      	lsls	r3, r3, #31
 8002220:	d503      	bpl.n	800222a <_vfiprintf_r+0x52>
 8002222:	2001      	movs	r0, #1
 8002224:	4240      	negs	r0, r0
 8002226:	b021      	add	sp, #132	@ 0x84
 8002228:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800222a:	89bb      	ldrh	r3, [r7, #12]
 800222c:	059b      	lsls	r3, r3, #22
 800222e:	d4f8      	bmi.n	8002222 <_vfiprintf_r+0x4a>
 8002230:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002232:	f7ff fce3 	bl	8001bfc <__retarget_lock_release_recursive>
 8002236:	e7f4      	b.n	8002222 <_vfiprintf_r+0x4a>
 8002238:	2300      	movs	r3, #0
 800223a:	ac08      	add	r4, sp, #32
 800223c:	6163      	str	r3, [r4, #20]
 800223e:	3320      	adds	r3, #32
 8002240:	7663      	strb	r3, [r4, #25]
 8002242:	3310      	adds	r3, #16
 8002244:	76a3      	strb	r3, [r4, #26]
 8002246:	9607      	str	r6, [sp, #28]
 8002248:	002e      	movs	r6, r5
 800224a:	7833      	ldrb	r3, [r6, #0]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <_vfiprintf_r+0x7c>
 8002250:	2b25      	cmp	r3, #37	@ 0x25
 8002252:	d148      	bne.n	80022e6 <_vfiprintf_r+0x10e>
 8002254:	1b73      	subs	r3, r6, r5
 8002256:	9305      	str	r3, [sp, #20]
 8002258:	42ae      	cmp	r6, r5
 800225a:	d00b      	beq.n	8002274 <_vfiprintf_r+0x9c>
 800225c:	002a      	movs	r2, r5
 800225e:	0039      	movs	r1, r7
 8002260:	9803      	ldr	r0, [sp, #12]
 8002262:	f7ff ffa6 	bl	80021b2 <__sfputs_r>
 8002266:	3001      	adds	r0, #1
 8002268:	d100      	bne.n	800226c <_vfiprintf_r+0x94>
 800226a:	e0ae      	b.n	80023ca <_vfiprintf_r+0x1f2>
 800226c:	6963      	ldr	r3, [r4, #20]
 800226e:	9a05      	ldr	r2, [sp, #20]
 8002270:	189b      	adds	r3, r3, r2
 8002272:	6163      	str	r3, [r4, #20]
 8002274:	7833      	ldrb	r3, [r6, #0]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d100      	bne.n	800227c <_vfiprintf_r+0xa4>
 800227a:	e0a6      	b.n	80023ca <_vfiprintf_r+0x1f2>
 800227c:	2201      	movs	r2, #1
 800227e:	2300      	movs	r3, #0
 8002280:	4252      	negs	r2, r2
 8002282:	6062      	str	r2, [r4, #4]
 8002284:	a904      	add	r1, sp, #16
 8002286:	3254      	adds	r2, #84	@ 0x54
 8002288:	1852      	adds	r2, r2, r1
 800228a:	1c75      	adds	r5, r6, #1
 800228c:	6023      	str	r3, [r4, #0]
 800228e:	60e3      	str	r3, [r4, #12]
 8002290:	60a3      	str	r3, [r4, #8]
 8002292:	7013      	strb	r3, [r2, #0]
 8002294:	65a3      	str	r3, [r4, #88]	@ 0x58
 8002296:	4b59      	ldr	r3, [pc, #356]	@ (80023fc <_vfiprintf_r+0x224>)
 8002298:	2205      	movs	r2, #5
 800229a:	0018      	movs	r0, r3
 800229c:	7829      	ldrb	r1, [r5, #0]
 800229e:	9305      	str	r3, [sp, #20]
 80022a0:	f000 fd5e 	bl	8002d60 <memchr>
 80022a4:	1c6e      	adds	r6, r5, #1
 80022a6:	2800      	cmp	r0, #0
 80022a8:	d11f      	bne.n	80022ea <_vfiprintf_r+0x112>
 80022aa:	6822      	ldr	r2, [r4, #0]
 80022ac:	06d3      	lsls	r3, r2, #27
 80022ae:	d504      	bpl.n	80022ba <_vfiprintf_r+0xe2>
 80022b0:	2353      	movs	r3, #83	@ 0x53
 80022b2:	a904      	add	r1, sp, #16
 80022b4:	185b      	adds	r3, r3, r1
 80022b6:	2120      	movs	r1, #32
 80022b8:	7019      	strb	r1, [r3, #0]
 80022ba:	0713      	lsls	r3, r2, #28
 80022bc:	d504      	bpl.n	80022c8 <_vfiprintf_r+0xf0>
 80022be:	2353      	movs	r3, #83	@ 0x53
 80022c0:	a904      	add	r1, sp, #16
 80022c2:	185b      	adds	r3, r3, r1
 80022c4:	212b      	movs	r1, #43	@ 0x2b
 80022c6:	7019      	strb	r1, [r3, #0]
 80022c8:	782b      	ldrb	r3, [r5, #0]
 80022ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80022cc:	d016      	beq.n	80022fc <_vfiprintf_r+0x124>
 80022ce:	002e      	movs	r6, r5
 80022d0:	2100      	movs	r1, #0
 80022d2:	200a      	movs	r0, #10
 80022d4:	68e3      	ldr	r3, [r4, #12]
 80022d6:	7832      	ldrb	r2, [r6, #0]
 80022d8:	1c75      	adds	r5, r6, #1
 80022da:	3a30      	subs	r2, #48	@ 0x30
 80022dc:	2a09      	cmp	r2, #9
 80022de:	d950      	bls.n	8002382 <_vfiprintf_r+0x1aa>
 80022e0:	2900      	cmp	r1, #0
 80022e2:	d111      	bne.n	8002308 <_vfiprintf_r+0x130>
 80022e4:	e017      	b.n	8002316 <_vfiprintf_r+0x13e>
 80022e6:	3601      	adds	r6, #1
 80022e8:	e7af      	b.n	800224a <_vfiprintf_r+0x72>
 80022ea:	9b05      	ldr	r3, [sp, #20]
 80022ec:	6822      	ldr	r2, [r4, #0]
 80022ee:	1ac0      	subs	r0, r0, r3
 80022f0:	2301      	movs	r3, #1
 80022f2:	4083      	lsls	r3, r0
 80022f4:	4313      	orrs	r3, r2
 80022f6:	0035      	movs	r5, r6
 80022f8:	6023      	str	r3, [r4, #0]
 80022fa:	e7cc      	b.n	8002296 <_vfiprintf_r+0xbe>
 80022fc:	9b07      	ldr	r3, [sp, #28]
 80022fe:	1d19      	adds	r1, r3, #4
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	9107      	str	r1, [sp, #28]
 8002304:	2b00      	cmp	r3, #0
 8002306:	db01      	blt.n	800230c <_vfiprintf_r+0x134>
 8002308:	930b      	str	r3, [sp, #44]	@ 0x2c
 800230a:	e004      	b.n	8002316 <_vfiprintf_r+0x13e>
 800230c:	425b      	negs	r3, r3
 800230e:	60e3      	str	r3, [r4, #12]
 8002310:	2302      	movs	r3, #2
 8002312:	4313      	orrs	r3, r2
 8002314:	6023      	str	r3, [r4, #0]
 8002316:	7833      	ldrb	r3, [r6, #0]
 8002318:	2b2e      	cmp	r3, #46	@ 0x2e
 800231a:	d10c      	bne.n	8002336 <_vfiprintf_r+0x15e>
 800231c:	7873      	ldrb	r3, [r6, #1]
 800231e:	2b2a      	cmp	r3, #42	@ 0x2a
 8002320:	d134      	bne.n	800238c <_vfiprintf_r+0x1b4>
 8002322:	9b07      	ldr	r3, [sp, #28]
 8002324:	3602      	adds	r6, #2
 8002326:	1d1a      	adds	r2, r3, #4
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	9207      	str	r2, [sp, #28]
 800232c:	2b00      	cmp	r3, #0
 800232e:	da01      	bge.n	8002334 <_vfiprintf_r+0x15c>
 8002330:	2301      	movs	r3, #1
 8002332:	425b      	negs	r3, r3
 8002334:	9309      	str	r3, [sp, #36]	@ 0x24
 8002336:	4d32      	ldr	r5, [pc, #200]	@ (8002400 <_vfiprintf_r+0x228>)
 8002338:	2203      	movs	r2, #3
 800233a:	0028      	movs	r0, r5
 800233c:	7831      	ldrb	r1, [r6, #0]
 800233e:	f000 fd0f 	bl	8002d60 <memchr>
 8002342:	2800      	cmp	r0, #0
 8002344:	d006      	beq.n	8002354 <_vfiprintf_r+0x17c>
 8002346:	2340      	movs	r3, #64	@ 0x40
 8002348:	1b40      	subs	r0, r0, r5
 800234a:	4083      	lsls	r3, r0
 800234c:	6822      	ldr	r2, [r4, #0]
 800234e:	3601      	adds	r6, #1
 8002350:	4313      	orrs	r3, r2
 8002352:	6023      	str	r3, [r4, #0]
 8002354:	7831      	ldrb	r1, [r6, #0]
 8002356:	2206      	movs	r2, #6
 8002358:	482a      	ldr	r0, [pc, #168]	@ (8002404 <_vfiprintf_r+0x22c>)
 800235a:	1c75      	adds	r5, r6, #1
 800235c:	7621      	strb	r1, [r4, #24]
 800235e:	f000 fcff 	bl	8002d60 <memchr>
 8002362:	2800      	cmp	r0, #0
 8002364:	d040      	beq.n	80023e8 <_vfiprintf_r+0x210>
 8002366:	4b28      	ldr	r3, [pc, #160]	@ (8002408 <_vfiprintf_r+0x230>)
 8002368:	2b00      	cmp	r3, #0
 800236a:	d122      	bne.n	80023b2 <_vfiprintf_r+0x1da>
 800236c:	2207      	movs	r2, #7
 800236e:	9b07      	ldr	r3, [sp, #28]
 8002370:	3307      	adds	r3, #7
 8002372:	4393      	bics	r3, r2
 8002374:	3308      	adds	r3, #8
 8002376:	9307      	str	r3, [sp, #28]
 8002378:	6963      	ldr	r3, [r4, #20]
 800237a:	9a04      	ldr	r2, [sp, #16]
 800237c:	189b      	adds	r3, r3, r2
 800237e:	6163      	str	r3, [r4, #20]
 8002380:	e762      	b.n	8002248 <_vfiprintf_r+0x70>
 8002382:	4343      	muls	r3, r0
 8002384:	002e      	movs	r6, r5
 8002386:	2101      	movs	r1, #1
 8002388:	189b      	adds	r3, r3, r2
 800238a:	e7a4      	b.n	80022d6 <_vfiprintf_r+0xfe>
 800238c:	2300      	movs	r3, #0
 800238e:	200a      	movs	r0, #10
 8002390:	0019      	movs	r1, r3
 8002392:	3601      	adds	r6, #1
 8002394:	6063      	str	r3, [r4, #4]
 8002396:	7832      	ldrb	r2, [r6, #0]
 8002398:	1c75      	adds	r5, r6, #1
 800239a:	3a30      	subs	r2, #48	@ 0x30
 800239c:	2a09      	cmp	r2, #9
 800239e:	d903      	bls.n	80023a8 <_vfiprintf_r+0x1d0>
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d0c8      	beq.n	8002336 <_vfiprintf_r+0x15e>
 80023a4:	9109      	str	r1, [sp, #36]	@ 0x24
 80023a6:	e7c6      	b.n	8002336 <_vfiprintf_r+0x15e>
 80023a8:	4341      	muls	r1, r0
 80023aa:	002e      	movs	r6, r5
 80023ac:	2301      	movs	r3, #1
 80023ae:	1889      	adds	r1, r1, r2
 80023b0:	e7f1      	b.n	8002396 <_vfiprintf_r+0x1be>
 80023b2:	aa07      	add	r2, sp, #28
 80023b4:	9200      	str	r2, [sp, #0]
 80023b6:	0021      	movs	r1, r4
 80023b8:	003a      	movs	r2, r7
 80023ba:	4b14      	ldr	r3, [pc, #80]	@ (800240c <_vfiprintf_r+0x234>)
 80023bc:	9803      	ldr	r0, [sp, #12]
 80023be:	e000      	b.n	80023c2 <_vfiprintf_r+0x1ea>
 80023c0:	bf00      	nop
 80023c2:	9004      	str	r0, [sp, #16]
 80023c4:	9b04      	ldr	r3, [sp, #16]
 80023c6:	3301      	adds	r3, #1
 80023c8:	d1d6      	bne.n	8002378 <_vfiprintf_r+0x1a0>
 80023ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80023cc:	07db      	lsls	r3, r3, #31
 80023ce:	d405      	bmi.n	80023dc <_vfiprintf_r+0x204>
 80023d0:	89bb      	ldrh	r3, [r7, #12]
 80023d2:	059b      	lsls	r3, r3, #22
 80023d4:	d402      	bmi.n	80023dc <_vfiprintf_r+0x204>
 80023d6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80023d8:	f7ff fc10 	bl	8001bfc <__retarget_lock_release_recursive>
 80023dc:	89bb      	ldrh	r3, [r7, #12]
 80023de:	065b      	lsls	r3, r3, #25
 80023e0:	d500      	bpl.n	80023e4 <_vfiprintf_r+0x20c>
 80023e2:	e71e      	b.n	8002222 <_vfiprintf_r+0x4a>
 80023e4:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80023e6:	e71e      	b.n	8002226 <_vfiprintf_r+0x4e>
 80023e8:	aa07      	add	r2, sp, #28
 80023ea:	9200      	str	r2, [sp, #0]
 80023ec:	0021      	movs	r1, r4
 80023ee:	003a      	movs	r2, r7
 80023f0:	4b06      	ldr	r3, [pc, #24]	@ (800240c <_vfiprintf_r+0x234>)
 80023f2:	9803      	ldr	r0, [sp, #12]
 80023f4:	f000 f87c 	bl	80024f0 <_printf_i>
 80023f8:	e7e3      	b.n	80023c2 <_vfiprintf_r+0x1ea>
 80023fa:	46c0      	nop			@ (mov r8, r8)
 80023fc:	08003109 	.word	0x08003109
 8002400:	08003105 	.word	0x08003105
 8002404:	0800310f 	.word	0x0800310f
 8002408:	00000000 	.word	0x00000000
 800240c:	080021b3 	.word	0x080021b3

08002410 <_printf_common>:
 8002410:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002412:	0016      	movs	r6, r2
 8002414:	9301      	str	r3, [sp, #4]
 8002416:	688a      	ldr	r2, [r1, #8]
 8002418:	690b      	ldr	r3, [r1, #16]
 800241a:	000c      	movs	r4, r1
 800241c:	9000      	str	r0, [sp, #0]
 800241e:	4293      	cmp	r3, r2
 8002420:	da00      	bge.n	8002424 <_printf_common+0x14>
 8002422:	0013      	movs	r3, r2
 8002424:	0022      	movs	r2, r4
 8002426:	6033      	str	r3, [r6, #0]
 8002428:	3243      	adds	r2, #67	@ 0x43
 800242a:	7812      	ldrb	r2, [r2, #0]
 800242c:	2a00      	cmp	r2, #0
 800242e:	d001      	beq.n	8002434 <_printf_common+0x24>
 8002430:	3301      	adds	r3, #1
 8002432:	6033      	str	r3, [r6, #0]
 8002434:	6823      	ldr	r3, [r4, #0]
 8002436:	069b      	lsls	r3, r3, #26
 8002438:	d502      	bpl.n	8002440 <_printf_common+0x30>
 800243a:	6833      	ldr	r3, [r6, #0]
 800243c:	3302      	adds	r3, #2
 800243e:	6033      	str	r3, [r6, #0]
 8002440:	6822      	ldr	r2, [r4, #0]
 8002442:	2306      	movs	r3, #6
 8002444:	0015      	movs	r5, r2
 8002446:	401d      	ands	r5, r3
 8002448:	421a      	tst	r2, r3
 800244a:	d027      	beq.n	800249c <_printf_common+0x8c>
 800244c:	0023      	movs	r3, r4
 800244e:	3343      	adds	r3, #67	@ 0x43
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	1e5a      	subs	r2, r3, #1
 8002454:	4193      	sbcs	r3, r2
 8002456:	6822      	ldr	r2, [r4, #0]
 8002458:	0692      	lsls	r2, r2, #26
 800245a:	d430      	bmi.n	80024be <_printf_common+0xae>
 800245c:	0022      	movs	r2, r4
 800245e:	9901      	ldr	r1, [sp, #4]
 8002460:	9800      	ldr	r0, [sp, #0]
 8002462:	9d08      	ldr	r5, [sp, #32]
 8002464:	3243      	adds	r2, #67	@ 0x43
 8002466:	47a8      	blx	r5
 8002468:	3001      	adds	r0, #1
 800246a:	d025      	beq.n	80024b8 <_printf_common+0xa8>
 800246c:	2206      	movs	r2, #6
 800246e:	6823      	ldr	r3, [r4, #0]
 8002470:	2500      	movs	r5, #0
 8002472:	4013      	ands	r3, r2
 8002474:	2b04      	cmp	r3, #4
 8002476:	d105      	bne.n	8002484 <_printf_common+0x74>
 8002478:	6833      	ldr	r3, [r6, #0]
 800247a:	68e5      	ldr	r5, [r4, #12]
 800247c:	1aed      	subs	r5, r5, r3
 800247e:	43eb      	mvns	r3, r5
 8002480:	17db      	asrs	r3, r3, #31
 8002482:	401d      	ands	r5, r3
 8002484:	68a3      	ldr	r3, [r4, #8]
 8002486:	6922      	ldr	r2, [r4, #16]
 8002488:	4293      	cmp	r3, r2
 800248a:	dd01      	ble.n	8002490 <_printf_common+0x80>
 800248c:	1a9b      	subs	r3, r3, r2
 800248e:	18ed      	adds	r5, r5, r3
 8002490:	2600      	movs	r6, #0
 8002492:	42b5      	cmp	r5, r6
 8002494:	d120      	bne.n	80024d8 <_printf_common+0xc8>
 8002496:	2000      	movs	r0, #0
 8002498:	e010      	b.n	80024bc <_printf_common+0xac>
 800249a:	3501      	adds	r5, #1
 800249c:	68e3      	ldr	r3, [r4, #12]
 800249e:	6832      	ldr	r2, [r6, #0]
 80024a0:	1a9b      	subs	r3, r3, r2
 80024a2:	42ab      	cmp	r3, r5
 80024a4:	ddd2      	ble.n	800244c <_printf_common+0x3c>
 80024a6:	0022      	movs	r2, r4
 80024a8:	2301      	movs	r3, #1
 80024aa:	9901      	ldr	r1, [sp, #4]
 80024ac:	9800      	ldr	r0, [sp, #0]
 80024ae:	9f08      	ldr	r7, [sp, #32]
 80024b0:	3219      	adds	r2, #25
 80024b2:	47b8      	blx	r7
 80024b4:	3001      	adds	r0, #1
 80024b6:	d1f0      	bne.n	800249a <_printf_common+0x8a>
 80024b8:	2001      	movs	r0, #1
 80024ba:	4240      	negs	r0, r0
 80024bc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80024be:	2030      	movs	r0, #48	@ 0x30
 80024c0:	18e1      	adds	r1, r4, r3
 80024c2:	3143      	adds	r1, #67	@ 0x43
 80024c4:	7008      	strb	r0, [r1, #0]
 80024c6:	0021      	movs	r1, r4
 80024c8:	1c5a      	adds	r2, r3, #1
 80024ca:	3145      	adds	r1, #69	@ 0x45
 80024cc:	7809      	ldrb	r1, [r1, #0]
 80024ce:	18a2      	adds	r2, r4, r2
 80024d0:	3243      	adds	r2, #67	@ 0x43
 80024d2:	3302      	adds	r3, #2
 80024d4:	7011      	strb	r1, [r2, #0]
 80024d6:	e7c1      	b.n	800245c <_printf_common+0x4c>
 80024d8:	0022      	movs	r2, r4
 80024da:	2301      	movs	r3, #1
 80024dc:	9901      	ldr	r1, [sp, #4]
 80024de:	9800      	ldr	r0, [sp, #0]
 80024e0:	9f08      	ldr	r7, [sp, #32]
 80024e2:	321a      	adds	r2, #26
 80024e4:	47b8      	blx	r7
 80024e6:	3001      	adds	r0, #1
 80024e8:	d0e6      	beq.n	80024b8 <_printf_common+0xa8>
 80024ea:	3601      	adds	r6, #1
 80024ec:	e7d1      	b.n	8002492 <_printf_common+0x82>
	...

080024f0 <_printf_i>:
 80024f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024f2:	b08b      	sub	sp, #44	@ 0x2c
 80024f4:	9206      	str	r2, [sp, #24]
 80024f6:	000a      	movs	r2, r1
 80024f8:	3243      	adds	r2, #67	@ 0x43
 80024fa:	9307      	str	r3, [sp, #28]
 80024fc:	9005      	str	r0, [sp, #20]
 80024fe:	9203      	str	r2, [sp, #12]
 8002500:	7e0a      	ldrb	r2, [r1, #24]
 8002502:	000c      	movs	r4, r1
 8002504:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8002506:	2a78      	cmp	r2, #120	@ 0x78
 8002508:	d809      	bhi.n	800251e <_printf_i+0x2e>
 800250a:	2a62      	cmp	r2, #98	@ 0x62
 800250c:	d80b      	bhi.n	8002526 <_printf_i+0x36>
 800250e:	2a00      	cmp	r2, #0
 8002510:	d100      	bne.n	8002514 <_printf_i+0x24>
 8002512:	e0bc      	b.n	800268e <_printf_i+0x19e>
 8002514:	497b      	ldr	r1, [pc, #492]	@ (8002704 <_printf_i+0x214>)
 8002516:	9104      	str	r1, [sp, #16]
 8002518:	2a58      	cmp	r2, #88	@ 0x58
 800251a:	d100      	bne.n	800251e <_printf_i+0x2e>
 800251c:	e090      	b.n	8002640 <_printf_i+0x150>
 800251e:	0025      	movs	r5, r4
 8002520:	3542      	adds	r5, #66	@ 0x42
 8002522:	702a      	strb	r2, [r5, #0]
 8002524:	e022      	b.n	800256c <_printf_i+0x7c>
 8002526:	0010      	movs	r0, r2
 8002528:	3863      	subs	r0, #99	@ 0x63
 800252a:	2815      	cmp	r0, #21
 800252c:	d8f7      	bhi.n	800251e <_printf_i+0x2e>
 800252e:	f7fd fdf3 	bl	8000118 <__gnu_thumb1_case_shi>
 8002532:	0016      	.short	0x0016
 8002534:	fff6001f 	.word	0xfff6001f
 8002538:	fff6fff6 	.word	0xfff6fff6
 800253c:	001ffff6 	.word	0x001ffff6
 8002540:	fff6fff6 	.word	0xfff6fff6
 8002544:	fff6fff6 	.word	0xfff6fff6
 8002548:	003600a1 	.word	0x003600a1
 800254c:	fff60080 	.word	0xfff60080
 8002550:	00b2fff6 	.word	0x00b2fff6
 8002554:	0036fff6 	.word	0x0036fff6
 8002558:	fff6fff6 	.word	0xfff6fff6
 800255c:	0084      	.short	0x0084
 800255e:	0025      	movs	r5, r4
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	3542      	adds	r5, #66	@ 0x42
 8002564:	1d11      	adds	r1, r2, #4
 8002566:	6019      	str	r1, [r3, #0]
 8002568:	6813      	ldr	r3, [r2, #0]
 800256a:	702b      	strb	r3, [r5, #0]
 800256c:	2301      	movs	r3, #1
 800256e:	e0a0      	b.n	80026b2 <_printf_i+0x1c2>
 8002570:	6818      	ldr	r0, [r3, #0]
 8002572:	6809      	ldr	r1, [r1, #0]
 8002574:	1d02      	adds	r2, r0, #4
 8002576:	060d      	lsls	r5, r1, #24
 8002578:	d50b      	bpl.n	8002592 <_printf_i+0xa2>
 800257a:	6806      	ldr	r6, [r0, #0]
 800257c:	601a      	str	r2, [r3, #0]
 800257e:	2e00      	cmp	r6, #0
 8002580:	da03      	bge.n	800258a <_printf_i+0x9a>
 8002582:	232d      	movs	r3, #45	@ 0x2d
 8002584:	9a03      	ldr	r2, [sp, #12]
 8002586:	4276      	negs	r6, r6
 8002588:	7013      	strb	r3, [r2, #0]
 800258a:	4b5e      	ldr	r3, [pc, #376]	@ (8002704 <_printf_i+0x214>)
 800258c:	270a      	movs	r7, #10
 800258e:	9304      	str	r3, [sp, #16]
 8002590:	e018      	b.n	80025c4 <_printf_i+0xd4>
 8002592:	6806      	ldr	r6, [r0, #0]
 8002594:	601a      	str	r2, [r3, #0]
 8002596:	0649      	lsls	r1, r1, #25
 8002598:	d5f1      	bpl.n	800257e <_printf_i+0x8e>
 800259a:	b236      	sxth	r6, r6
 800259c:	e7ef      	b.n	800257e <_printf_i+0x8e>
 800259e:	6808      	ldr	r0, [r1, #0]
 80025a0:	6819      	ldr	r1, [r3, #0]
 80025a2:	c940      	ldmia	r1!, {r6}
 80025a4:	0605      	lsls	r5, r0, #24
 80025a6:	d402      	bmi.n	80025ae <_printf_i+0xbe>
 80025a8:	0640      	lsls	r0, r0, #25
 80025aa:	d500      	bpl.n	80025ae <_printf_i+0xbe>
 80025ac:	b2b6      	uxth	r6, r6
 80025ae:	6019      	str	r1, [r3, #0]
 80025b0:	4b54      	ldr	r3, [pc, #336]	@ (8002704 <_printf_i+0x214>)
 80025b2:	270a      	movs	r7, #10
 80025b4:	9304      	str	r3, [sp, #16]
 80025b6:	2a6f      	cmp	r2, #111	@ 0x6f
 80025b8:	d100      	bne.n	80025bc <_printf_i+0xcc>
 80025ba:	3f02      	subs	r7, #2
 80025bc:	0023      	movs	r3, r4
 80025be:	2200      	movs	r2, #0
 80025c0:	3343      	adds	r3, #67	@ 0x43
 80025c2:	701a      	strb	r2, [r3, #0]
 80025c4:	6863      	ldr	r3, [r4, #4]
 80025c6:	60a3      	str	r3, [r4, #8]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	db03      	blt.n	80025d4 <_printf_i+0xe4>
 80025cc:	2104      	movs	r1, #4
 80025ce:	6822      	ldr	r2, [r4, #0]
 80025d0:	438a      	bics	r2, r1
 80025d2:	6022      	str	r2, [r4, #0]
 80025d4:	2e00      	cmp	r6, #0
 80025d6:	d102      	bne.n	80025de <_printf_i+0xee>
 80025d8:	9d03      	ldr	r5, [sp, #12]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d00c      	beq.n	80025f8 <_printf_i+0x108>
 80025de:	9d03      	ldr	r5, [sp, #12]
 80025e0:	0030      	movs	r0, r6
 80025e2:	0039      	movs	r1, r7
 80025e4:	f7fd fe28 	bl	8000238 <__aeabi_uidivmod>
 80025e8:	9b04      	ldr	r3, [sp, #16]
 80025ea:	3d01      	subs	r5, #1
 80025ec:	5c5b      	ldrb	r3, [r3, r1]
 80025ee:	702b      	strb	r3, [r5, #0]
 80025f0:	0033      	movs	r3, r6
 80025f2:	0006      	movs	r6, r0
 80025f4:	429f      	cmp	r7, r3
 80025f6:	d9f3      	bls.n	80025e0 <_printf_i+0xf0>
 80025f8:	2f08      	cmp	r7, #8
 80025fa:	d109      	bne.n	8002610 <_printf_i+0x120>
 80025fc:	6823      	ldr	r3, [r4, #0]
 80025fe:	07db      	lsls	r3, r3, #31
 8002600:	d506      	bpl.n	8002610 <_printf_i+0x120>
 8002602:	6862      	ldr	r2, [r4, #4]
 8002604:	6923      	ldr	r3, [r4, #16]
 8002606:	429a      	cmp	r2, r3
 8002608:	dc02      	bgt.n	8002610 <_printf_i+0x120>
 800260a:	2330      	movs	r3, #48	@ 0x30
 800260c:	3d01      	subs	r5, #1
 800260e:	702b      	strb	r3, [r5, #0]
 8002610:	9b03      	ldr	r3, [sp, #12]
 8002612:	1b5b      	subs	r3, r3, r5
 8002614:	6123      	str	r3, [r4, #16]
 8002616:	9b07      	ldr	r3, [sp, #28]
 8002618:	0021      	movs	r1, r4
 800261a:	9300      	str	r3, [sp, #0]
 800261c:	9805      	ldr	r0, [sp, #20]
 800261e:	9b06      	ldr	r3, [sp, #24]
 8002620:	aa09      	add	r2, sp, #36	@ 0x24
 8002622:	f7ff fef5 	bl	8002410 <_printf_common>
 8002626:	3001      	adds	r0, #1
 8002628:	d148      	bne.n	80026bc <_printf_i+0x1cc>
 800262a:	2001      	movs	r0, #1
 800262c:	4240      	negs	r0, r0
 800262e:	b00b      	add	sp, #44	@ 0x2c
 8002630:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002632:	2220      	movs	r2, #32
 8002634:	6809      	ldr	r1, [r1, #0]
 8002636:	430a      	orrs	r2, r1
 8002638:	6022      	str	r2, [r4, #0]
 800263a:	2278      	movs	r2, #120	@ 0x78
 800263c:	4932      	ldr	r1, [pc, #200]	@ (8002708 <_printf_i+0x218>)
 800263e:	9104      	str	r1, [sp, #16]
 8002640:	0021      	movs	r1, r4
 8002642:	3145      	adds	r1, #69	@ 0x45
 8002644:	700a      	strb	r2, [r1, #0]
 8002646:	6819      	ldr	r1, [r3, #0]
 8002648:	6822      	ldr	r2, [r4, #0]
 800264a:	c940      	ldmia	r1!, {r6}
 800264c:	0610      	lsls	r0, r2, #24
 800264e:	d402      	bmi.n	8002656 <_printf_i+0x166>
 8002650:	0650      	lsls	r0, r2, #25
 8002652:	d500      	bpl.n	8002656 <_printf_i+0x166>
 8002654:	b2b6      	uxth	r6, r6
 8002656:	6019      	str	r1, [r3, #0]
 8002658:	07d3      	lsls	r3, r2, #31
 800265a:	d502      	bpl.n	8002662 <_printf_i+0x172>
 800265c:	2320      	movs	r3, #32
 800265e:	4313      	orrs	r3, r2
 8002660:	6023      	str	r3, [r4, #0]
 8002662:	2e00      	cmp	r6, #0
 8002664:	d001      	beq.n	800266a <_printf_i+0x17a>
 8002666:	2710      	movs	r7, #16
 8002668:	e7a8      	b.n	80025bc <_printf_i+0xcc>
 800266a:	2220      	movs	r2, #32
 800266c:	6823      	ldr	r3, [r4, #0]
 800266e:	4393      	bics	r3, r2
 8002670:	6023      	str	r3, [r4, #0]
 8002672:	e7f8      	b.n	8002666 <_printf_i+0x176>
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	680d      	ldr	r5, [r1, #0]
 8002678:	1d10      	adds	r0, r2, #4
 800267a:	6949      	ldr	r1, [r1, #20]
 800267c:	6018      	str	r0, [r3, #0]
 800267e:	6813      	ldr	r3, [r2, #0]
 8002680:	062e      	lsls	r6, r5, #24
 8002682:	d501      	bpl.n	8002688 <_printf_i+0x198>
 8002684:	6019      	str	r1, [r3, #0]
 8002686:	e002      	b.n	800268e <_printf_i+0x19e>
 8002688:	066d      	lsls	r5, r5, #25
 800268a:	d5fb      	bpl.n	8002684 <_printf_i+0x194>
 800268c:	8019      	strh	r1, [r3, #0]
 800268e:	2300      	movs	r3, #0
 8002690:	9d03      	ldr	r5, [sp, #12]
 8002692:	6123      	str	r3, [r4, #16]
 8002694:	e7bf      	b.n	8002616 <_printf_i+0x126>
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	1d11      	adds	r1, r2, #4
 800269a:	6019      	str	r1, [r3, #0]
 800269c:	6815      	ldr	r5, [r2, #0]
 800269e:	2100      	movs	r1, #0
 80026a0:	0028      	movs	r0, r5
 80026a2:	6862      	ldr	r2, [r4, #4]
 80026a4:	f000 fb5c 	bl	8002d60 <memchr>
 80026a8:	2800      	cmp	r0, #0
 80026aa:	d001      	beq.n	80026b0 <_printf_i+0x1c0>
 80026ac:	1b40      	subs	r0, r0, r5
 80026ae:	6060      	str	r0, [r4, #4]
 80026b0:	6863      	ldr	r3, [r4, #4]
 80026b2:	6123      	str	r3, [r4, #16]
 80026b4:	2300      	movs	r3, #0
 80026b6:	9a03      	ldr	r2, [sp, #12]
 80026b8:	7013      	strb	r3, [r2, #0]
 80026ba:	e7ac      	b.n	8002616 <_printf_i+0x126>
 80026bc:	002a      	movs	r2, r5
 80026be:	6923      	ldr	r3, [r4, #16]
 80026c0:	9906      	ldr	r1, [sp, #24]
 80026c2:	9805      	ldr	r0, [sp, #20]
 80026c4:	9d07      	ldr	r5, [sp, #28]
 80026c6:	47a8      	blx	r5
 80026c8:	3001      	adds	r0, #1
 80026ca:	d0ae      	beq.n	800262a <_printf_i+0x13a>
 80026cc:	6823      	ldr	r3, [r4, #0]
 80026ce:	079b      	lsls	r3, r3, #30
 80026d0:	d415      	bmi.n	80026fe <_printf_i+0x20e>
 80026d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80026d4:	68e0      	ldr	r0, [r4, #12]
 80026d6:	4298      	cmp	r0, r3
 80026d8:	daa9      	bge.n	800262e <_printf_i+0x13e>
 80026da:	0018      	movs	r0, r3
 80026dc:	e7a7      	b.n	800262e <_printf_i+0x13e>
 80026de:	0022      	movs	r2, r4
 80026e0:	2301      	movs	r3, #1
 80026e2:	9906      	ldr	r1, [sp, #24]
 80026e4:	9805      	ldr	r0, [sp, #20]
 80026e6:	9e07      	ldr	r6, [sp, #28]
 80026e8:	3219      	adds	r2, #25
 80026ea:	47b0      	blx	r6
 80026ec:	3001      	adds	r0, #1
 80026ee:	d09c      	beq.n	800262a <_printf_i+0x13a>
 80026f0:	3501      	adds	r5, #1
 80026f2:	68e3      	ldr	r3, [r4, #12]
 80026f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80026f6:	1a9b      	subs	r3, r3, r2
 80026f8:	42ab      	cmp	r3, r5
 80026fa:	dcf0      	bgt.n	80026de <_printf_i+0x1ee>
 80026fc:	e7e9      	b.n	80026d2 <_printf_i+0x1e2>
 80026fe:	2500      	movs	r5, #0
 8002700:	e7f7      	b.n	80026f2 <_printf_i+0x202>
 8002702:	46c0      	nop			@ (mov r8, r8)
 8002704:	08003116 	.word	0x08003116
 8002708:	08003127 	.word	0x08003127

0800270c <_scanf_chars>:
 800270c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800270e:	0015      	movs	r5, r2
 8002710:	688a      	ldr	r2, [r1, #8]
 8002712:	000c      	movs	r4, r1
 8002714:	9001      	str	r0, [sp, #4]
 8002716:	2a00      	cmp	r2, #0
 8002718:	d104      	bne.n	8002724 <_scanf_chars+0x18>
 800271a:	698a      	ldr	r2, [r1, #24]
 800271c:	2a00      	cmp	r2, #0
 800271e:	d117      	bne.n	8002750 <_scanf_chars+0x44>
 8002720:	3201      	adds	r2, #1
 8002722:	60a2      	str	r2, [r4, #8]
 8002724:	6822      	ldr	r2, [r4, #0]
 8002726:	06d2      	lsls	r2, r2, #27
 8002728:	d403      	bmi.n	8002732 <_scanf_chars+0x26>
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	1d11      	adds	r1, r2, #4
 800272e:	6019      	str	r1, [r3, #0]
 8002730:	6817      	ldr	r7, [r2, #0]
 8002732:	2600      	movs	r6, #0
 8002734:	69a0      	ldr	r0, [r4, #24]
 8002736:	2800      	cmp	r0, #0
 8002738:	d016      	beq.n	8002768 <_scanf_chars+0x5c>
 800273a:	2801      	cmp	r0, #1
 800273c:	d10b      	bne.n	8002756 <_scanf_chars+0x4a>
 800273e:	682b      	ldr	r3, [r5, #0]
 8002740:	6962      	ldr	r2, [r4, #20]
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	5cd3      	ldrb	r3, [r2, r3]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d10e      	bne.n	8002768 <_scanf_chars+0x5c>
 800274a:	2e00      	cmp	r6, #0
 800274c:	d03b      	beq.n	80027c6 <_scanf_chars+0xba>
 800274e:	e029      	b.n	80027a4 <_scanf_chars+0x98>
 8002750:	2201      	movs	r2, #1
 8002752:	4252      	negs	r2, r2
 8002754:	e7e5      	b.n	8002722 <_scanf_chars+0x16>
 8002756:	2802      	cmp	r0, #2
 8002758:	d124      	bne.n	80027a4 <_scanf_chars+0x98>
 800275a:	682b      	ldr	r3, [r5, #0]
 800275c:	4a1a      	ldr	r2, [pc, #104]	@ (80027c8 <_scanf_chars+0xbc>)
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	5cd3      	ldrb	r3, [r2, r3]
 8002762:	2208      	movs	r2, #8
 8002764:	4213      	tst	r3, r2
 8002766:	d11d      	bne.n	80027a4 <_scanf_chars+0x98>
 8002768:	2210      	movs	r2, #16
 800276a:	6823      	ldr	r3, [r4, #0]
 800276c:	3601      	adds	r6, #1
 800276e:	4213      	tst	r3, r2
 8002770:	d103      	bne.n	800277a <_scanf_chars+0x6e>
 8002772:	682b      	ldr	r3, [r5, #0]
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	703b      	strb	r3, [r7, #0]
 8002778:	3701      	adds	r7, #1
 800277a:	682a      	ldr	r2, [r5, #0]
 800277c:	686b      	ldr	r3, [r5, #4]
 800277e:	3201      	adds	r2, #1
 8002780:	602a      	str	r2, [r5, #0]
 8002782:	68a2      	ldr	r2, [r4, #8]
 8002784:	3b01      	subs	r3, #1
 8002786:	3a01      	subs	r2, #1
 8002788:	606b      	str	r3, [r5, #4]
 800278a:	60a2      	str	r2, [r4, #8]
 800278c:	2a00      	cmp	r2, #0
 800278e:	d009      	beq.n	80027a4 <_scanf_chars+0x98>
 8002790:	2b00      	cmp	r3, #0
 8002792:	dccf      	bgt.n	8002734 <_scanf_chars+0x28>
 8002794:	23c0      	movs	r3, #192	@ 0xc0
 8002796:	005b      	lsls	r3, r3, #1
 8002798:	0029      	movs	r1, r5
 800279a:	58e3      	ldr	r3, [r4, r3]
 800279c:	9801      	ldr	r0, [sp, #4]
 800279e:	4798      	blx	r3
 80027a0:	2800      	cmp	r0, #0
 80027a2:	d0c7      	beq.n	8002734 <_scanf_chars+0x28>
 80027a4:	6822      	ldr	r2, [r4, #0]
 80027a6:	2310      	movs	r3, #16
 80027a8:	0011      	movs	r1, r2
 80027aa:	4019      	ands	r1, r3
 80027ac:	421a      	tst	r2, r3
 80027ae:	d106      	bne.n	80027be <_scanf_chars+0xb2>
 80027b0:	68e3      	ldr	r3, [r4, #12]
 80027b2:	3301      	adds	r3, #1
 80027b4:	60e3      	str	r3, [r4, #12]
 80027b6:	69a3      	ldr	r3, [r4, #24]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d000      	beq.n	80027be <_scanf_chars+0xb2>
 80027bc:	7039      	strb	r1, [r7, #0]
 80027be:	2000      	movs	r0, #0
 80027c0:	6923      	ldr	r3, [r4, #16]
 80027c2:	199b      	adds	r3, r3, r6
 80027c4:	6123      	str	r3, [r4, #16]
 80027c6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80027c8:	08003005 	.word	0x08003005

080027cc <_scanf_i>:
 80027cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027ce:	b08b      	sub	sp, #44	@ 0x2c
 80027d0:	9301      	str	r3, [sp, #4]
 80027d2:	4b78      	ldr	r3, [pc, #480]	@ (80029b4 <_scanf_i+0x1e8>)
 80027d4:	0016      	movs	r6, r2
 80027d6:	9004      	str	r0, [sp, #16]
 80027d8:	aa07      	add	r2, sp, #28
 80027da:	cba1      	ldmia	r3!, {r0, r5, r7}
 80027dc:	c2a1      	stmia	r2!, {r0, r5, r7}
 80027de:	4a76      	ldr	r2, [pc, #472]	@ (80029b8 <_scanf_i+0x1ec>)
 80027e0:	698b      	ldr	r3, [r1, #24]
 80027e2:	000c      	movs	r4, r1
 80027e4:	9205      	str	r2, [sp, #20]
 80027e6:	2b03      	cmp	r3, #3
 80027e8:	d101      	bne.n	80027ee <_scanf_i+0x22>
 80027ea:	4b74      	ldr	r3, [pc, #464]	@ (80029bc <_scanf_i+0x1f0>)
 80027ec:	9305      	str	r3, [sp, #20]
 80027ee:	22ae      	movs	r2, #174	@ 0xae
 80027f0:	2000      	movs	r0, #0
 80027f2:	68a3      	ldr	r3, [r4, #8]
 80027f4:	0052      	lsls	r2, r2, #1
 80027f6:	1e59      	subs	r1, r3, #1
 80027f8:	9003      	str	r0, [sp, #12]
 80027fa:	4291      	cmp	r1, r2
 80027fc:	d905      	bls.n	800280a <_scanf_i+0x3e>
 80027fe:	3b5e      	subs	r3, #94	@ 0x5e
 8002800:	3bff      	subs	r3, #255	@ 0xff
 8002802:	9303      	str	r3, [sp, #12]
 8002804:	235e      	movs	r3, #94	@ 0x5e
 8002806:	33ff      	adds	r3, #255	@ 0xff
 8002808:	60a3      	str	r3, [r4, #8]
 800280a:	0023      	movs	r3, r4
 800280c:	331c      	adds	r3, #28
 800280e:	9300      	str	r3, [sp, #0]
 8002810:	23d0      	movs	r3, #208	@ 0xd0
 8002812:	2700      	movs	r7, #0
 8002814:	6822      	ldr	r2, [r4, #0]
 8002816:	011b      	lsls	r3, r3, #4
 8002818:	4313      	orrs	r3, r2
 800281a:	6023      	str	r3, [r4, #0]
 800281c:	9b00      	ldr	r3, [sp, #0]
 800281e:	9302      	str	r3, [sp, #8]
 8002820:	6833      	ldr	r3, [r6, #0]
 8002822:	a807      	add	r0, sp, #28
 8002824:	7819      	ldrb	r1, [r3, #0]
 8002826:	00bb      	lsls	r3, r7, #2
 8002828:	2202      	movs	r2, #2
 800282a:	5818      	ldr	r0, [r3, r0]
 800282c:	f000 fa98 	bl	8002d60 <memchr>
 8002830:	2800      	cmp	r0, #0
 8002832:	d029      	beq.n	8002888 <_scanf_i+0xbc>
 8002834:	2f01      	cmp	r7, #1
 8002836:	d15e      	bne.n	80028f6 <_scanf_i+0x12a>
 8002838:	6863      	ldr	r3, [r4, #4]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d106      	bne.n	800284c <_scanf_i+0x80>
 800283e:	3308      	adds	r3, #8
 8002840:	6822      	ldr	r2, [r4, #0]
 8002842:	6063      	str	r3, [r4, #4]
 8002844:	33f9      	adds	r3, #249	@ 0xf9
 8002846:	33ff      	adds	r3, #255	@ 0xff
 8002848:	4313      	orrs	r3, r2
 800284a:	6023      	str	r3, [r4, #0]
 800284c:	6823      	ldr	r3, [r4, #0]
 800284e:	4a5c      	ldr	r2, [pc, #368]	@ (80029c0 <_scanf_i+0x1f4>)
 8002850:	4013      	ands	r3, r2
 8002852:	6023      	str	r3, [r4, #0]
 8002854:	68a3      	ldr	r3, [r4, #8]
 8002856:	1e5a      	subs	r2, r3, #1
 8002858:	60a2      	str	r2, [r4, #8]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d014      	beq.n	8002888 <_scanf_i+0xbc>
 800285e:	6833      	ldr	r3, [r6, #0]
 8002860:	1c5a      	adds	r2, r3, #1
 8002862:	6032      	str	r2, [r6, #0]
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	9a02      	ldr	r2, [sp, #8]
 8002868:	7013      	strb	r3, [r2, #0]
 800286a:	6873      	ldr	r3, [r6, #4]
 800286c:	1c55      	adds	r5, r2, #1
 800286e:	3b01      	subs	r3, #1
 8002870:	6073      	str	r3, [r6, #4]
 8002872:	2b00      	cmp	r3, #0
 8002874:	dc07      	bgt.n	8002886 <_scanf_i+0xba>
 8002876:	23c0      	movs	r3, #192	@ 0xc0
 8002878:	005b      	lsls	r3, r3, #1
 800287a:	0031      	movs	r1, r6
 800287c:	58e3      	ldr	r3, [r4, r3]
 800287e:	9804      	ldr	r0, [sp, #16]
 8002880:	4798      	blx	r3
 8002882:	2800      	cmp	r0, #0
 8002884:	d17e      	bne.n	8002984 <_scanf_i+0x1b8>
 8002886:	9502      	str	r5, [sp, #8]
 8002888:	3701      	adds	r7, #1
 800288a:	2f03      	cmp	r7, #3
 800288c:	d1c8      	bne.n	8002820 <_scanf_i+0x54>
 800288e:	6863      	ldr	r3, [r4, #4]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d101      	bne.n	8002898 <_scanf_i+0xcc>
 8002894:	330a      	adds	r3, #10
 8002896:	6063      	str	r3, [r4, #4]
 8002898:	2700      	movs	r7, #0
 800289a:	6863      	ldr	r3, [r4, #4]
 800289c:	4949      	ldr	r1, [pc, #292]	@ (80029c4 <_scanf_i+0x1f8>)
 800289e:	6960      	ldr	r0, [r4, #20]
 80028a0:	1ac9      	subs	r1, r1, r3
 80028a2:	f000 f9b0 	bl	8002c06 <__sccl>
 80028a6:	9d02      	ldr	r5, [sp, #8]
 80028a8:	68a3      	ldr	r3, [r4, #8]
 80028aa:	6820      	ldr	r0, [r4, #0]
 80028ac:	9302      	str	r3, [sp, #8]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d03f      	beq.n	8002932 <_scanf_i+0x166>
 80028b2:	6831      	ldr	r1, [r6, #0]
 80028b4:	6963      	ldr	r3, [r4, #20]
 80028b6:	780a      	ldrb	r2, [r1, #0]
 80028b8:	5c9b      	ldrb	r3, [r3, r2]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d039      	beq.n	8002932 <_scanf_i+0x166>
 80028be:	2a30      	cmp	r2, #48	@ 0x30
 80028c0:	d128      	bne.n	8002914 <_scanf_i+0x148>
 80028c2:	2380      	movs	r3, #128	@ 0x80
 80028c4:	011b      	lsls	r3, r3, #4
 80028c6:	4218      	tst	r0, r3
 80028c8:	d024      	beq.n	8002914 <_scanf_i+0x148>
 80028ca:	9b03      	ldr	r3, [sp, #12]
 80028cc:	3701      	adds	r7, #1
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d005      	beq.n	80028de <_scanf_i+0x112>
 80028d2:	001a      	movs	r2, r3
 80028d4:	9b02      	ldr	r3, [sp, #8]
 80028d6:	3a01      	subs	r2, #1
 80028d8:	3301      	adds	r3, #1
 80028da:	9203      	str	r2, [sp, #12]
 80028dc:	60a3      	str	r3, [r4, #8]
 80028de:	6873      	ldr	r3, [r6, #4]
 80028e0:	3b01      	subs	r3, #1
 80028e2:	6073      	str	r3, [r6, #4]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	dd1c      	ble.n	8002922 <_scanf_i+0x156>
 80028e8:	6833      	ldr	r3, [r6, #0]
 80028ea:	3301      	adds	r3, #1
 80028ec:	6033      	str	r3, [r6, #0]
 80028ee:	68a3      	ldr	r3, [r4, #8]
 80028f0:	3b01      	subs	r3, #1
 80028f2:	60a3      	str	r3, [r4, #8]
 80028f4:	e7d8      	b.n	80028a8 <_scanf_i+0xdc>
 80028f6:	2f02      	cmp	r7, #2
 80028f8:	d1ac      	bne.n	8002854 <_scanf_i+0x88>
 80028fa:	23c0      	movs	r3, #192	@ 0xc0
 80028fc:	2180      	movs	r1, #128	@ 0x80
 80028fe:	6822      	ldr	r2, [r4, #0]
 8002900:	00db      	lsls	r3, r3, #3
 8002902:	4013      	ands	r3, r2
 8002904:	0089      	lsls	r1, r1, #2
 8002906:	428b      	cmp	r3, r1
 8002908:	d1c1      	bne.n	800288e <_scanf_i+0xc2>
 800290a:	2310      	movs	r3, #16
 800290c:	6063      	str	r3, [r4, #4]
 800290e:	33f0      	adds	r3, #240	@ 0xf0
 8002910:	4313      	orrs	r3, r2
 8002912:	e79e      	b.n	8002852 <_scanf_i+0x86>
 8002914:	4b2c      	ldr	r3, [pc, #176]	@ (80029c8 <_scanf_i+0x1fc>)
 8002916:	4003      	ands	r3, r0
 8002918:	6023      	str	r3, [r4, #0]
 800291a:	780b      	ldrb	r3, [r1, #0]
 800291c:	702b      	strb	r3, [r5, #0]
 800291e:	3501      	adds	r5, #1
 8002920:	e7dd      	b.n	80028de <_scanf_i+0x112>
 8002922:	23c0      	movs	r3, #192	@ 0xc0
 8002924:	005b      	lsls	r3, r3, #1
 8002926:	0031      	movs	r1, r6
 8002928:	58e3      	ldr	r3, [r4, r3]
 800292a:	9804      	ldr	r0, [sp, #16]
 800292c:	4798      	blx	r3
 800292e:	2800      	cmp	r0, #0
 8002930:	d0dd      	beq.n	80028ee <_scanf_i+0x122>
 8002932:	6823      	ldr	r3, [r4, #0]
 8002934:	05db      	lsls	r3, r3, #23
 8002936:	d50e      	bpl.n	8002956 <_scanf_i+0x18a>
 8002938:	9b00      	ldr	r3, [sp, #0]
 800293a:	429d      	cmp	r5, r3
 800293c:	d907      	bls.n	800294e <_scanf_i+0x182>
 800293e:	23be      	movs	r3, #190	@ 0xbe
 8002940:	3d01      	subs	r5, #1
 8002942:	005b      	lsls	r3, r3, #1
 8002944:	0032      	movs	r2, r6
 8002946:	7829      	ldrb	r1, [r5, #0]
 8002948:	58e3      	ldr	r3, [r4, r3]
 800294a:	9804      	ldr	r0, [sp, #16]
 800294c:	4798      	blx	r3
 800294e:	9b00      	ldr	r3, [sp, #0]
 8002950:	2001      	movs	r0, #1
 8002952:	429d      	cmp	r5, r3
 8002954:	d029      	beq.n	80029aa <_scanf_i+0x1de>
 8002956:	6821      	ldr	r1, [r4, #0]
 8002958:	2310      	movs	r3, #16
 800295a:	000a      	movs	r2, r1
 800295c:	401a      	ands	r2, r3
 800295e:	4219      	tst	r1, r3
 8002960:	d11c      	bne.n	800299c <_scanf_i+0x1d0>
 8002962:	702a      	strb	r2, [r5, #0]
 8002964:	6863      	ldr	r3, [r4, #4]
 8002966:	9900      	ldr	r1, [sp, #0]
 8002968:	9804      	ldr	r0, [sp, #16]
 800296a:	9e05      	ldr	r6, [sp, #20]
 800296c:	47b0      	blx	r6
 800296e:	9b01      	ldr	r3, [sp, #4]
 8002970:	6822      	ldr	r2, [r4, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	0691      	lsls	r1, r2, #26
 8002976:	d507      	bpl.n	8002988 <_scanf_i+0x1bc>
 8002978:	9901      	ldr	r1, [sp, #4]
 800297a:	1d1a      	adds	r2, r3, #4
 800297c:	600a      	str	r2, [r1, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	6018      	str	r0, [r3, #0]
 8002982:	e008      	b.n	8002996 <_scanf_i+0x1ca>
 8002984:	2700      	movs	r7, #0
 8002986:	e7d4      	b.n	8002932 <_scanf_i+0x166>
 8002988:	1d19      	adds	r1, r3, #4
 800298a:	07d6      	lsls	r6, r2, #31
 800298c:	d50f      	bpl.n	80029ae <_scanf_i+0x1e2>
 800298e:	9a01      	ldr	r2, [sp, #4]
 8002990:	6011      	str	r1, [r2, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	8018      	strh	r0, [r3, #0]
 8002996:	68e3      	ldr	r3, [r4, #12]
 8002998:	3301      	adds	r3, #1
 800299a:	60e3      	str	r3, [r4, #12]
 800299c:	2000      	movs	r0, #0
 800299e:	9b00      	ldr	r3, [sp, #0]
 80029a0:	1aed      	subs	r5, r5, r3
 80029a2:	6923      	ldr	r3, [r4, #16]
 80029a4:	19ed      	adds	r5, r5, r7
 80029a6:	195b      	adds	r3, r3, r5
 80029a8:	6123      	str	r3, [r4, #16]
 80029aa:	b00b      	add	sp, #44	@ 0x2c
 80029ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029ae:	9a01      	ldr	r2, [sp, #4]
 80029b0:	6011      	str	r1, [r2, #0]
 80029b2:	e7e4      	b.n	800297e <_scanf_i+0x1b2>
 80029b4:	08002fe8 	.word	0x08002fe8
 80029b8:	08002eed 	.word	0x08002eed
 80029bc:	08001459 	.word	0x08001459
 80029c0:	fffffaff 	.word	0xfffffaff
 80029c4:	08003148 	.word	0x08003148
 80029c8:	fffff6ff 	.word	0xfffff6ff

080029cc <__sflush_r>:
 80029cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80029ce:	220c      	movs	r2, #12
 80029d0:	5e8b      	ldrsh	r3, [r1, r2]
 80029d2:	0005      	movs	r5, r0
 80029d4:	000c      	movs	r4, r1
 80029d6:	071a      	lsls	r2, r3, #28
 80029d8:	d456      	bmi.n	8002a88 <__sflush_r+0xbc>
 80029da:	684a      	ldr	r2, [r1, #4]
 80029dc:	2a00      	cmp	r2, #0
 80029de:	dc02      	bgt.n	80029e6 <__sflush_r+0x1a>
 80029e0:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 80029e2:	2a00      	cmp	r2, #0
 80029e4:	dd4e      	ble.n	8002a84 <__sflush_r+0xb8>
 80029e6:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80029e8:	2f00      	cmp	r7, #0
 80029ea:	d04b      	beq.n	8002a84 <__sflush_r+0xb8>
 80029ec:	2200      	movs	r2, #0
 80029ee:	2080      	movs	r0, #128	@ 0x80
 80029f0:	682e      	ldr	r6, [r5, #0]
 80029f2:	602a      	str	r2, [r5, #0]
 80029f4:	001a      	movs	r2, r3
 80029f6:	0140      	lsls	r0, r0, #5
 80029f8:	6a21      	ldr	r1, [r4, #32]
 80029fa:	4002      	ands	r2, r0
 80029fc:	4203      	tst	r3, r0
 80029fe:	d033      	beq.n	8002a68 <__sflush_r+0x9c>
 8002a00:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002a02:	89a3      	ldrh	r3, [r4, #12]
 8002a04:	075b      	lsls	r3, r3, #29
 8002a06:	d506      	bpl.n	8002a16 <__sflush_r+0x4a>
 8002a08:	6863      	ldr	r3, [r4, #4]
 8002a0a:	1ad2      	subs	r2, r2, r3
 8002a0c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d001      	beq.n	8002a16 <__sflush_r+0x4a>
 8002a12:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002a14:	1ad2      	subs	r2, r2, r3
 8002a16:	2300      	movs	r3, #0
 8002a18:	0028      	movs	r0, r5
 8002a1a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8002a1c:	6a21      	ldr	r1, [r4, #32]
 8002a1e:	47b8      	blx	r7
 8002a20:	89a2      	ldrh	r2, [r4, #12]
 8002a22:	1c43      	adds	r3, r0, #1
 8002a24:	d106      	bne.n	8002a34 <__sflush_r+0x68>
 8002a26:	6829      	ldr	r1, [r5, #0]
 8002a28:	291d      	cmp	r1, #29
 8002a2a:	d846      	bhi.n	8002aba <__sflush_r+0xee>
 8002a2c:	4b29      	ldr	r3, [pc, #164]	@ (8002ad4 <__sflush_r+0x108>)
 8002a2e:	410b      	asrs	r3, r1
 8002a30:	07db      	lsls	r3, r3, #31
 8002a32:	d442      	bmi.n	8002aba <__sflush_r+0xee>
 8002a34:	2300      	movs	r3, #0
 8002a36:	6063      	str	r3, [r4, #4]
 8002a38:	6923      	ldr	r3, [r4, #16]
 8002a3a:	6023      	str	r3, [r4, #0]
 8002a3c:	04d2      	lsls	r2, r2, #19
 8002a3e:	d505      	bpl.n	8002a4c <__sflush_r+0x80>
 8002a40:	1c43      	adds	r3, r0, #1
 8002a42:	d102      	bne.n	8002a4a <__sflush_r+0x7e>
 8002a44:	682b      	ldr	r3, [r5, #0]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d100      	bne.n	8002a4c <__sflush_r+0x80>
 8002a4a:	6560      	str	r0, [r4, #84]	@ 0x54
 8002a4c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002a4e:	602e      	str	r6, [r5, #0]
 8002a50:	2900      	cmp	r1, #0
 8002a52:	d017      	beq.n	8002a84 <__sflush_r+0xb8>
 8002a54:	0023      	movs	r3, r4
 8002a56:	3344      	adds	r3, #68	@ 0x44
 8002a58:	4299      	cmp	r1, r3
 8002a5a:	d002      	beq.n	8002a62 <__sflush_r+0x96>
 8002a5c:	0028      	movs	r0, r5
 8002a5e:	f7ff f8cf 	bl	8001c00 <_free_r>
 8002a62:	2300      	movs	r3, #0
 8002a64:	6363      	str	r3, [r4, #52]	@ 0x34
 8002a66:	e00d      	b.n	8002a84 <__sflush_r+0xb8>
 8002a68:	2301      	movs	r3, #1
 8002a6a:	0028      	movs	r0, r5
 8002a6c:	47b8      	blx	r7
 8002a6e:	0002      	movs	r2, r0
 8002a70:	1c43      	adds	r3, r0, #1
 8002a72:	d1c6      	bne.n	8002a02 <__sflush_r+0x36>
 8002a74:	682b      	ldr	r3, [r5, #0]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d0c3      	beq.n	8002a02 <__sflush_r+0x36>
 8002a7a:	2b1d      	cmp	r3, #29
 8002a7c:	d001      	beq.n	8002a82 <__sflush_r+0xb6>
 8002a7e:	2b16      	cmp	r3, #22
 8002a80:	d11a      	bne.n	8002ab8 <__sflush_r+0xec>
 8002a82:	602e      	str	r6, [r5, #0]
 8002a84:	2000      	movs	r0, #0
 8002a86:	e01e      	b.n	8002ac6 <__sflush_r+0xfa>
 8002a88:	690e      	ldr	r6, [r1, #16]
 8002a8a:	2e00      	cmp	r6, #0
 8002a8c:	d0fa      	beq.n	8002a84 <__sflush_r+0xb8>
 8002a8e:	680f      	ldr	r7, [r1, #0]
 8002a90:	600e      	str	r6, [r1, #0]
 8002a92:	1bba      	subs	r2, r7, r6
 8002a94:	9201      	str	r2, [sp, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	079b      	lsls	r3, r3, #30
 8002a9a:	d100      	bne.n	8002a9e <__sflush_r+0xd2>
 8002a9c:	694a      	ldr	r2, [r1, #20]
 8002a9e:	60a2      	str	r2, [r4, #8]
 8002aa0:	9b01      	ldr	r3, [sp, #4]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	ddee      	ble.n	8002a84 <__sflush_r+0xb8>
 8002aa6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002aa8:	0032      	movs	r2, r6
 8002aaa:	001f      	movs	r7, r3
 8002aac:	0028      	movs	r0, r5
 8002aae:	9b01      	ldr	r3, [sp, #4]
 8002ab0:	6a21      	ldr	r1, [r4, #32]
 8002ab2:	47b8      	blx	r7
 8002ab4:	2800      	cmp	r0, #0
 8002ab6:	dc07      	bgt.n	8002ac8 <__sflush_r+0xfc>
 8002ab8:	89a2      	ldrh	r2, [r4, #12]
 8002aba:	2340      	movs	r3, #64	@ 0x40
 8002abc:	2001      	movs	r0, #1
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	b21b      	sxth	r3, r3
 8002ac2:	81a3      	strh	r3, [r4, #12]
 8002ac4:	4240      	negs	r0, r0
 8002ac6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002ac8:	9b01      	ldr	r3, [sp, #4]
 8002aca:	1836      	adds	r6, r6, r0
 8002acc:	1a1b      	subs	r3, r3, r0
 8002ace:	9301      	str	r3, [sp, #4]
 8002ad0:	e7e6      	b.n	8002aa0 <__sflush_r+0xd4>
 8002ad2:	46c0      	nop			@ (mov r8, r8)
 8002ad4:	dfbffffe 	.word	0xdfbffffe

08002ad8 <_fflush_r>:
 8002ad8:	690b      	ldr	r3, [r1, #16]
 8002ada:	b570      	push	{r4, r5, r6, lr}
 8002adc:	0005      	movs	r5, r0
 8002ade:	000c      	movs	r4, r1
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d102      	bne.n	8002aea <_fflush_r+0x12>
 8002ae4:	2500      	movs	r5, #0
 8002ae6:	0028      	movs	r0, r5
 8002ae8:	bd70      	pop	{r4, r5, r6, pc}
 8002aea:	2800      	cmp	r0, #0
 8002aec:	d004      	beq.n	8002af8 <_fflush_r+0x20>
 8002aee:	6a03      	ldr	r3, [r0, #32]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d101      	bne.n	8002af8 <_fflush_r+0x20>
 8002af4:	f7fe fd50 	bl	8001598 <__sinit>
 8002af8:	220c      	movs	r2, #12
 8002afa:	5ea3      	ldrsh	r3, [r4, r2]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d0f1      	beq.n	8002ae4 <_fflush_r+0xc>
 8002b00:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002b02:	07d2      	lsls	r2, r2, #31
 8002b04:	d404      	bmi.n	8002b10 <_fflush_r+0x38>
 8002b06:	059b      	lsls	r3, r3, #22
 8002b08:	d402      	bmi.n	8002b10 <_fflush_r+0x38>
 8002b0a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002b0c:	f7ff f875 	bl	8001bfa <__retarget_lock_acquire_recursive>
 8002b10:	0028      	movs	r0, r5
 8002b12:	0021      	movs	r1, r4
 8002b14:	f7ff ff5a 	bl	80029cc <__sflush_r>
 8002b18:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002b1a:	0005      	movs	r5, r0
 8002b1c:	07db      	lsls	r3, r3, #31
 8002b1e:	d4e2      	bmi.n	8002ae6 <_fflush_r+0xe>
 8002b20:	89a3      	ldrh	r3, [r4, #12]
 8002b22:	059b      	lsls	r3, r3, #22
 8002b24:	d4df      	bmi.n	8002ae6 <_fflush_r+0xe>
 8002b26:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002b28:	f7ff f868 	bl	8001bfc <__retarget_lock_release_recursive>
 8002b2c:	e7db      	b.n	8002ae6 <_fflush_r+0xe>
	...

08002b30 <__swhatbuf_r>:
 8002b30:	b570      	push	{r4, r5, r6, lr}
 8002b32:	000e      	movs	r6, r1
 8002b34:	001d      	movs	r5, r3
 8002b36:	230e      	movs	r3, #14
 8002b38:	5ec9      	ldrsh	r1, [r1, r3]
 8002b3a:	0014      	movs	r4, r2
 8002b3c:	b096      	sub	sp, #88	@ 0x58
 8002b3e:	2900      	cmp	r1, #0
 8002b40:	da0c      	bge.n	8002b5c <__swhatbuf_r+0x2c>
 8002b42:	89b2      	ldrh	r2, [r6, #12]
 8002b44:	2380      	movs	r3, #128	@ 0x80
 8002b46:	0011      	movs	r1, r2
 8002b48:	4019      	ands	r1, r3
 8002b4a:	421a      	tst	r2, r3
 8002b4c:	d114      	bne.n	8002b78 <__swhatbuf_r+0x48>
 8002b4e:	2380      	movs	r3, #128	@ 0x80
 8002b50:	00db      	lsls	r3, r3, #3
 8002b52:	2000      	movs	r0, #0
 8002b54:	6029      	str	r1, [r5, #0]
 8002b56:	6023      	str	r3, [r4, #0]
 8002b58:	b016      	add	sp, #88	@ 0x58
 8002b5a:	bd70      	pop	{r4, r5, r6, pc}
 8002b5c:	466a      	mov	r2, sp
 8002b5e:	f000 f8c9 	bl	8002cf4 <_fstat_r>
 8002b62:	2800      	cmp	r0, #0
 8002b64:	dbed      	blt.n	8002b42 <__swhatbuf_r+0x12>
 8002b66:	23f0      	movs	r3, #240	@ 0xf0
 8002b68:	9901      	ldr	r1, [sp, #4]
 8002b6a:	021b      	lsls	r3, r3, #8
 8002b6c:	4019      	ands	r1, r3
 8002b6e:	4b04      	ldr	r3, [pc, #16]	@ (8002b80 <__swhatbuf_r+0x50>)
 8002b70:	18c9      	adds	r1, r1, r3
 8002b72:	424b      	negs	r3, r1
 8002b74:	4159      	adcs	r1, r3
 8002b76:	e7ea      	b.n	8002b4e <__swhatbuf_r+0x1e>
 8002b78:	2100      	movs	r1, #0
 8002b7a:	2340      	movs	r3, #64	@ 0x40
 8002b7c:	e7e9      	b.n	8002b52 <__swhatbuf_r+0x22>
 8002b7e:	46c0      	nop			@ (mov r8, r8)
 8002b80:	ffffe000 	.word	0xffffe000

08002b84 <__smakebuf_r>:
 8002b84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b86:	2602      	movs	r6, #2
 8002b88:	898b      	ldrh	r3, [r1, #12]
 8002b8a:	0005      	movs	r5, r0
 8002b8c:	000c      	movs	r4, r1
 8002b8e:	b085      	sub	sp, #20
 8002b90:	4233      	tst	r3, r6
 8002b92:	d007      	beq.n	8002ba4 <__smakebuf_r+0x20>
 8002b94:	0023      	movs	r3, r4
 8002b96:	3347      	adds	r3, #71	@ 0x47
 8002b98:	6023      	str	r3, [r4, #0]
 8002b9a:	6123      	str	r3, [r4, #16]
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	6163      	str	r3, [r4, #20]
 8002ba0:	b005      	add	sp, #20
 8002ba2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ba4:	ab03      	add	r3, sp, #12
 8002ba6:	aa02      	add	r2, sp, #8
 8002ba8:	f7ff ffc2 	bl	8002b30 <__swhatbuf_r>
 8002bac:	9f02      	ldr	r7, [sp, #8]
 8002bae:	9001      	str	r0, [sp, #4]
 8002bb0:	0039      	movs	r1, r7
 8002bb2:	0028      	movs	r0, r5
 8002bb4:	f7ff f89a 	bl	8001cec <_malloc_r>
 8002bb8:	2800      	cmp	r0, #0
 8002bba:	d108      	bne.n	8002bce <__smakebuf_r+0x4a>
 8002bbc:	220c      	movs	r2, #12
 8002bbe:	5ea3      	ldrsh	r3, [r4, r2]
 8002bc0:	059a      	lsls	r2, r3, #22
 8002bc2:	d4ed      	bmi.n	8002ba0 <__smakebuf_r+0x1c>
 8002bc4:	2203      	movs	r2, #3
 8002bc6:	4393      	bics	r3, r2
 8002bc8:	431e      	orrs	r6, r3
 8002bca:	81a6      	strh	r6, [r4, #12]
 8002bcc:	e7e2      	b.n	8002b94 <__smakebuf_r+0x10>
 8002bce:	2380      	movs	r3, #128	@ 0x80
 8002bd0:	89a2      	ldrh	r2, [r4, #12]
 8002bd2:	6020      	str	r0, [r4, #0]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	81a3      	strh	r3, [r4, #12]
 8002bd8:	9b03      	ldr	r3, [sp, #12]
 8002bda:	6120      	str	r0, [r4, #16]
 8002bdc:	6167      	str	r7, [r4, #20]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d00c      	beq.n	8002bfc <__smakebuf_r+0x78>
 8002be2:	0028      	movs	r0, r5
 8002be4:	230e      	movs	r3, #14
 8002be6:	5ee1      	ldrsh	r1, [r4, r3]
 8002be8:	f000 f896 	bl	8002d18 <_isatty_r>
 8002bec:	2800      	cmp	r0, #0
 8002bee:	d005      	beq.n	8002bfc <__smakebuf_r+0x78>
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	89a2      	ldrh	r2, [r4, #12]
 8002bf4:	439a      	bics	r2, r3
 8002bf6:	3b02      	subs	r3, #2
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	81a3      	strh	r3, [r4, #12]
 8002bfc:	89a3      	ldrh	r3, [r4, #12]
 8002bfe:	9a01      	ldr	r2, [sp, #4]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	81a3      	strh	r3, [r4, #12]
 8002c04:	e7cc      	b.n	8002ba0 <__smakebuf_r+0x1c>

08002c06 <__sccl>:
 8002c06:	b570      	push	{r4, r5, r6, lr}
 8002c08:	780b      	ldrb	r3, [r1, #0]
 8002c0a:	0004      	movs	r4, r0
 8002c0c:	2b5e      	cmp	r3, #94	@ 0x5e
 8002c0e:	d018      	beq.n	8002c42 <__sccl+0x3c>
 8002c10:	2200      	movs	r2, #0
 8002c12:	1c4d      	adds	r5, r1, #1
 8002c14:	0021      	movs	r1, r4
 8002c16:	1c60      	adds	r0, r4, #1
 8002c18:	30ff      	adds	r0, #255	@ 0xff
 8002c1a:	700a      	strb	r2, [r1, #0]
 8002c1c:	3101      	adds	r1, #1
 8002c1e:	4281      	cmp	r1, r0
 8002c20:	d1fb      	bne.n	8002c1a <__sccl+0x14>
 8002c22:	1e68      	subs	r0, r5, #1
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d00b      	beq.n	8002c40 <__sccl+0x3a>
 8002c28:	2101      	movs	r1, #1
 8002c2a:	404a      	eors	r2, r1
 8002c2c:	0028      	movs	r0, r5
 8002c2e:	54e2      	strb	r2, [r4, r3]
 8002c30:	7801      	ldrb	r1, [r0, #0]
 8002c32:	1c45      	adds	r5, r0, #1
 8002c34:	292d      	cmp	r1, #45	@ 0x2d
 8002c36:	d00a      	beq.n	8002c4e <__sccl+0x48>
 8002c38:	295d      	cmp	r1, #93	@ 0x5d
 8002c3a:	d01b      	beq.n	8002c74 <__sccl+0x6e>
 8002c3c:	2900      	cmp	r1, #0
 8002c3e:	d104      	bne.n	8002c4a <__sccl+0x44>
 8002c40:	bd70      	pop	{r4, r5, r6, pc}
 8002c42:	2201      	movs	r2, #1
 8002c44:	784b      	ldrb	r3, [r1, #1]
 8002c46:	1c8d      	adds	r5, r1, #2
 8002c48:	e7e4      	b.n	8002c14 <__sccl+0xe>
 8002c4a:	000b      	movs	r3, r1
 8002c4c:	e7ee      	b.n	8002c2c <__sccl+0x26>
 8002c4e:	7846      	ldrb	r6, [r0, #1]
 8002c50:	2e5d      	cmp	r6, #93	@ 0x5d
 8002c52:	d0fa      	beq.n	8002c4a <__sccl+0x44>
 8002c54:	42b3      	cmp	r3, r6
 8002c56:	dcf8      	bgt.n	8002c4a <__sccl+0x44>
 8002c58:	0019      	movs	r1, r3
 8002c5a:	3002      	adds	r0, #2
 8002c5c:	3101      	adds	r1, #1
 8002c5e:	5462      	strb	r2, [r4, r1]
 8002c60:	428e      	cmp	r6, r1
 8002c62:	dcfb      	bgt.n	8002c5c <__sccl+0x56>
 8002c64:	2100      	movs	r1, #0
 8002c66:	1c5d      	adds	r5, r3, #1
 8002c68:	42b3      	cmp	r3, r6
 8002c6a:	da01      	bge.n	8002c70 <__sccl+0x6a>
 8002c6c:	1af1      	subs	r1, r6, r3
 8002c6e:	3901      	subs	r1, #1
 8002c70:	186b      	adds	r3, r5, r1
 8002c72:	e7dd      	b.n	8002c30 <__sccl+0x2a>
 8002c74:	0028      	movs	r0, r5
 8002c76:	e7e3      	b.n	8002c40 <__sccl+0x3a>

08002c78 <__submore>:
 8002c78:	000b      	movs	r3, r1
 8002c7a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002c7c:	6b4d      	ldr	r5, [r1, #52]	@ 0x34
 8002c7e:	3344      	adds	r3, #68	@ 0x44
 8002c80:	000c      	movs	r4, r1
 8002c82:	429d      	cmp	r5, r3
 8002c84:	d11c      	bne.n	8002cc0 <__submore+0x48>
 8002c86:	2680      	movs	r6, #128	@ 0x80
 8002c88:	00f6      	lsls	r6, r6, #3
 8002c8a:	0031      	movs	r1, r6
 8002c8c:	f7ff f82e 	bl	8001cec <_malloc_r>
 8002c90:	2800      	cmp	r0, #0
 8002c92:	d102      	bne.n	8002c9a <__submore+0x22>
 8002c94:	2001      	movs	r0, #1
 8002c96:	4240      	negs	r0, r0
 8002c98:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002c9a:	0023      	movs	r3, r4
 8002c9c:	6360      	str	r0, [r4, #52]	@ 0x34
 8002c9e:	63a6      	str	r6, [r4, #56]	@ 0x38
 8002ca0:	3346      	adds	r3, #70	@ 0x46
 8002ca2:	781a      	ldrb	r2, [r3, #0]
 8002ca4:	4b10      	ldr	r3, [pc, #64]	@ (8002ce8 <__submore+0x70>)
 8002ca6:	54c2      	strb	r2, [r0, r3]
 8002ca8:	0023      	movs	r3, r4
 8002caa:	3345      	adds	r3, #69	@ 0x45
 8002cac:	781a      	ldrb	r2, [r3, #0]
 8002cae:	4b0f      	ldr	r3, [pc, #60]	@ (8002cec <__submore+0x74>)
 8002cb0:	54c2      	strb	r2, [r0, r3]
 8002cb2:	782a      	ldrb	r2, [r5, #0]
 8002cb4:	4b0e      	ldr	r3, [pc, #56]	@ (8002cf0 <__submore+0x78>)
 8002cb6:	54c2      	strb	r2, [r0, r3]
 8002cb8:	18c0      	adds	r0, r0, r3
 8002cba:	6020      	str	r0, [r4, #0]
 8002cbc:	2000      	movs	r0, #0
 8002cbe:	e7eb      	b.n	8002c98 <__submore+0x20>
 8002cc0:	6b8e      	ldr	r6, [r1, #56]	@ 0x38
 8002cc2:	0029      	movs	r1, r5
 8002cc4:	0073      	lsls	r3, r6, #1
 8002cc6:	001a      	movs	r2, r3
 8002cc8:	9301      	str	r3, [sp, #4]
 8002cca:	f000 f85d 	bl	8002d88 <_realloc_r>
 8002cce:	1e05      	subs	r5, r0, #0
 8002cd0:	d0e0      	beq.n	8002c94 <__submore+0x1c>
 8002cd2:	1987      	adds	r7, r0, r6
 8002cd4:	0001      	movs	r1, r0
 8002cd6:	0032      	movs	r2, r6
 8002cd8:	0038      	movs	r0, r7
 8002cda:	f000 f84c 	bl	8002d76 <memcpy>
 8002cde:	9b01      	ldr	r3, [sp, #4]
 8002ce0:	6027      	str	r7, [r4, #0]
 8002ce2:	6365      	str	r5, [r4, #52]	@ 0x34
 8002ce4:	63a3      	str	r3, [r4, #56]	@ 0x38
 8002ce6:	e7e9      	b.n	8002cbc <__submore+0x44>
 8002ce8:	000003ff 	.word	0x000003ff
 8002cec:	000003fe 	.word	0x000003fe
 8002cf0:	000003fd 	.word	0x000003fd

08002cf4 <_fstat_r>:
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	b570      	push	{r4, r5, r6, lr}
 8002cf8:	4d06      	ldr	r5, [pc, #24]	@ (8002d14 <_fstat_r+0x20>)
 8002cfa:	0004      	movs	r4, r0
 8002cfc:	0008      	movs	r0, r1
 8002cfe:	0011      	movs	r1, r2
 8002d00:	602b      	str	r3, [r5, #0]
 8002d02:	f7fd ff42 	bl	8000b8a <_fstat>
 8002d06:	1c43      	adds	r3, r0, #1
 8002d08:	d103      	bne.n	8002d12 <_fstat_r+0x1e>
 8002d0a:	682b      	ldr	r3, [r5, #0]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d000      	beq.n	8002d12 <_fstat_r+0x1e>
 8002d10:	6023      	str	r3, [r4, #0]
 8002d12:	bd70      	pop	{r4, r5, r6, pc}
 8002d14:	200002cc 	.word	0x200002cc

08002d18 <_isatty_r>:
 8002d18:	2300      	movs	r3, #0
 8002d1a:	b570      	push	{r4, r5, r6, lr}
 8002d1c:	4d06      	ldr	r5, [pc, #24]	@ (8002d38 <_isatty_r+0x20>)
 8002d1e:	0004      	movs	r4, r0
 8002d20:	0008      	movs	r0, r1
 8002d22:	602b      	str	r3, [r5, #0]
 8002d24:	f7fd ff3f 	bl	8000ba6 <_isatty>
 8002d28:	1c43      	adds	r3, r0, #1
 8002d2a:	d103      	bne.n	8002d34 <_isatty_r+0x1c>
 8002d2c:	682b      	ldr	r3, [r5, #0]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d000      	beq.n	8002d34 <_isatty_r+0x1c>
 8002d32:	6023      	str	r3, [r4, #0]
 8002d34:	bd70      	pop	{r4, r5, r6, pc}
 8002d36:	46c0      	nop			@ (mov r8, r8)
 8002d38:	200002cc 	.word	0x200002cc

08002d3c <_sbrk_r>:
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	b570      	push	{r4, r5, r6, lr}
 8002d40:	4d06      	ldr	r5, [pc, #24]	@ (8002d5c <_sbrk_r+0x20>)
 8002d42:	0004      	movs	r4, r0
 8002d44:	0008      	movs	r0, r1
 8002d46:	602b      	str	r3, [r5, #0]
 8002d48:	f7fd ff42 	bl	8000bd0 <_sbrk>
 8002d4c:	1c43      	adds	r3, r0, #1
 8002d4e:	d103      	bne.n	8002d58 <_sbrk_r+0x1c>
 8002d50:	682b      	ldr	r3, [r5, #0]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d000      	beq.n	8002d58 <_sbrk_r+0x1c>
 8002d56:	6023      	str	r3, [r4, #0]
 8002d58:	bd70      	pop	{r4, r5, r6, pc}
 8002d5a:	46c0      	nop			@ (mov r8, r8)
 8002d5c:	200002cc 	.word	0x200002cc

08002d60 <memchr>:
 8002d60:	b2c9      	uxtb	r1, r1
 8002d62:	1882      	adds	r2, r0, r2
 8002d64:	4290      	cmp	r0, r2
 8002d66:	d101      	bne.n	8002d6c <memchr+0xc>
 8002d68:	2000      	movs	r0, #0
 8002d6a:	4770      	bx	lr
 8002d6c:	7803      	ldrb	r3, [r0, #0]
 8002d6e:	428b      	cmp	r3, r1
 8002d70:	d0fb      	beq.n	8002d6a <memchr+0xa>
 8002d72:	3001      	adds	r0, #1
 8002d74:	e7f6      	b.n	8002d64 <memchr+0x4>

08002d76 <memcpy>:
 8002d76:	2300      	movs	r3, #0
 8002d78:	b510      	push	{r4, lr}
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d100      	bne.n	8002d80 <memcpy+0xa>
 8002d7e:	bd10      	pop	{r4, pc}
 8002d80:	5ccc      	ldrb	r4, [r1, r3]
 8002d82:	54c4      	strb	r4, [r0, r3]
 8002d84:	3301      	adds	r3, #1
 8002d86:	e7f8      	b.n	8002d7a <memcpy+0x4>

08002d88 <_realloc_r>:
 8002d88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002d8a:	0006      	movs	r6, r0
 8002d8c:	000c      	movs	r4, r1
 8002d8e:	0015      	movs	r5, r2
 8002d90:	2900      	cmp	r1, #0
 8002d92:	d105      	bne.n	8002da0 <_realloc_r+0x18>
 8002d94:	0011      	movs	r1, r2
 8002d96:	f7fe ffa9 	bl	8001cec <_malloc_r>
 8002d9a:	0004      	movs	r4, r0
 8002d9c:	0020      	movs	r0, r4
 8002d9e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002da0:	2a00      	cmp	r2, #0
 8002da2:	d103      	bne.n	8002dac <_realloc_r+0x24>
 8002da4:	f7fe ff2c 	bl	8001c00 <_free_r>
 8002da8:	2400      	movs	r4, #0
 8002daa:	e7f7      	b.n	8002d9c <_realloc_r+0x14>
 8002dac:	f000 f8a2 	bl	8002ef4 <_malloc_usable_size_r>
 8002db0:	0007      	movs	r7, r0
 8002db2:	4285      	cmp	r5, r0
 8002db4:	d802      	bhi.n	8002dbc <_realloc_r+0x34>
 8002db6:	0843      	lsrs	r3, r0, #1
 8002db8:	42ab      	cmp	r3, r5
 8002dba:	d3ef      	bcc.n	8002d9c <_realloc_r+0x14>
 8002dbc:	0029      	movs	r1, r5
 8002dbe:	0030      	movs	r0, r6
 8002dc0:	f7fe ff94 	bl	8001cec <_malloc_r>
 8002dc4:	9001      	str	r0, [sp, #4]
 8002dc6:	2800      	cmp	r0, #0
 8002dc8:	d0ee      	beq.n	8002da8 <_realloc_r+0x20>
 8002dca:	002a      	movs	r2, r5
 8002dcc:	42bd      	cmp	r5, r7
 8002dce:	d900      	bls.n	8002dd2 <_realloc_r+0x4a>
 8002dd0:	003a      	movs	r2, r7
 8002dd2:	0021      	movs	r1, r4
 8002dd4:	9801      	ldr	r0, [sp, #4]
 8002dd6:	f7ff ffce 	bl	8002d76 <memcpy>
 8002dda:	0021      	movs	r1, r4
 8002ddc:	0030      	movs	r0, r6
 8002dde:	f7fe ff0f 	bl	8001c00 <_free_r>
 8002de2:	9c01      	ldr	r4, [sp, #4]
 8002de4:	e7da      	b.n	8002d9c <_realloc_r+0x14>
	...

08002de8 <_strtoul_l.constprop.0>:
 8002de8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dea:	001e      	movs	r6, r3
 8002dec:	4b3e      	ldr	r3, [pc, #248]	@ (8002ee8 <_strtoul_l.constprop.0+0x100>)
 8002dee:	0017      	movs	r7, r2
 8002df0:	000c      	movs	r4, r1
 8002df2:	469c      	mov	ip, r3
 8002df4:	2208      	movs	r2, #8
 8002df6:	b085      	sub	sp, #20
 8002df8:	9003      	str	r0, [sp, #12]
 8002dfa:	9100      	str	r1, [sp, #0]
 8002dfc:	0023      	movs	r3, r4
 8002dfe:	4661      	mov	r1, ip
 8002e00:	781d      	ldrb	r5, [r3, #0]
 8002e02:	3401      	adds	r4, #1
 8002e04:	5d48      	ldrb	r0, [r1, r5]
 8002e06:	0001      	movs	r1, r0
 8002e08:	4011      	ands	r1, r2
 8002e0a:	4210      	tst	r0, r2
 8002e0c:	d1f6      	bne.n	8002dfc <_strtoul_l.constprop.0+0x14>
 8002e0e:	2d2d      	cmp	r5, #45	@ 0x2d
 8002e10:	d137      	bne.n	8002e82 <_strtoul_l.constprop.0+0x9a>
 8002e12:	7825      	ldrb	r5, [r4, #0]
 8002e14:	1c9c      	adds	r4, r3, #2
 8002e16:	2301      	movs	r3, #1
 8002e18:	9302      	str	r3, [sp, #8]
 8002e1a:	2210      	movs	r2, #16
 8002e1c:	0033      	movs	r3, r6
 8002e1e:	4393      	bics	r3, r2
 8002e20:	d109      	bne.n	8002e36 <_strtoul_l.constprop.0+0x4e>
 8002e22:	2d30      	cmp	r5, #48	@ 0x30
 8002e24:	d133      	bne.n	8002e8e <_strtoul_l.constprop.0+0xa6>
 8002e26:	2120      	movs	r1, #32
 8002e28:	7823      	ldrb	r3, [r4, #0]
 8002e2a:	438b      	bics	r3, r1
 8002e2c:	2b58      	cmp	r3, #88	@ 0x58
 8002e2e:	d12e      	bne.n	8002e8e <_strtoul_l.constprop.0+0xa6>
 8002e30:	0016      	movs	r6, r2
 8002e32:	7865      	ldrb	r5, [r4, #1]
 8002e34:	3402      	adds	r4, #2
 8002e36:	2001      	movs	r0, #1
 8002e38:	0031      	movs	r1, r6
 8002e3a:	4240      	negs	r0, r0
 8002e3c:	f7fd f976 	bl	800012c <__udivsi3>
 8002e40:	9001      	str	r0, [sp, #4]
 8002e42:	2001      	movs	r0, #1
 8002e44:	0031      	movs	r1, r6
 8002e46:	4240      	negs	r0, r0
 8002e48:	f7fd f9f6 	bl	8000238 <__aeabi_uidivmod>
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	2201      	movs	r2, #1
 8002e50:	0018      	movs	r0, r3
 8002e52:	4694      	mov	ip, r2
 8002e54:	002a      	movs	r2, r5
 8002e56:	3a30      	subs	r2, #48	@ 0x30
 8002e58:	2a09      	cmp	r2, #9
 8002e5a:	d81f      	bhi.n	8002e9c <_strtoul_l.constprop.0+0xb4>
 8002e5c:	0015      	movs	r5, r2
 8002e5e:	42ae      	cmp	r6, r5
 8002e60:	dd2b      	ble.n	8002eba <_strtoul_l.constprop.0+0xd2>
 8002e62:	1c5a      	adds	r2, r3, #1
 8002e64:	d00a      	beq.n	8002e7c <_strtoul_l.constprop.0+0x94>
 8002e66:	2301      	movs	r3, #1
 8002e68:	9a01      	ldr	r2, [sp, #4]
 8002e6a:	425b      	negs	r3, r3
 8002e6c:	4282      	cmp	r2, r0
 8002e6e:	d305      	bcc.n	8002e7c <_strtoul_l.constprop.0+0x94>
 8002e70:	d101      	bne.n	8002e76 <_strtoul_l.constprop.0+0x8e>
 8002e72:	42a9      	cmp	r1, r5
 8002e74:	db1e      	blt.n	8002eb4 <_strtoul_l.constprop.0+0xcc>
 8002e76:	4663      	mov	r3, ip
 8002e78:	4370      	muls	r0, r6
 8002e7a:	1828      	adds	r0, r5, r0
 8002e7c:	7825      	ldrb	r5, [r4, #0]
 8002e7e:	3401      	adds	r4, #1
 8002e80:	e7e8      	b.n	8002e54 <_strtoul_l.constprop.0+0x6c>
 8002e82:	9102      	str	r1, [sp, #8]
 8002e84:	2d2b      	cmp	r5, #43	@ 0x2b
 8002e86:	d1c8      	bne.n	8002e1a <_strtoul_l.constprop.0+0x32>
 8002e88:	7825      	ldrb	r5, [r4, #0]
 8002e8a:	1c9c      	adds	r4, r3, #2
 8002e8c:	e7c5      	b.n	8002e1a <_strtoul_l.constprop.0+0x32>
 8002e8e:	2e00      	cmp	r6, #0
 8002e90:	d1d1      	bne.n	8002e36 <_strtoul_l.constprop.0+0x4e>
 8002e92:	3608      	adds	r6, #8
 8002e94:	2d30      	cmp	r5, #48	@ 0x30
 8002e96:	d0ce      	beq.n	8002e36 <_strtoul_l.constprop.0+0x4e>
 8002e98:	3602      	adds	r6, #2
 8002e9a:	e7cc      	b.n	8002e36 <_strtoul_l.constprop.0+0x4e>
 8002e9c:	002a      	movs	r2, r5
 8002e9e:	3a41      	subs	r2, #65	@ 0x41
 8002ea0:	2a19      	cmp	r2, #25
 8002ea2:	d801      	bhi.n	8002ea8 <_strtoul_l.constprop.0+0xc0>
 8002ea4:	3d37      	subs	r5, #55	@ 0x37
 8002ea6:	e7da      	b.n	8002e5e <_strtoul_l.constprop.0+0x76>
 8002ea8:	002a      	movs	r2, r5
 8002eaa:	3a61      	subs	r2, #97	@ 0x61
 8002eac:	2a19      	cmp	r2, #25
 8002eae:	d804      	bhi.n	8002eba <_strtoul_l.constprop.0+0xd2>
 8002eb0:	3d57      	subs	r5, #87	@ 0x57
 8002eb2:	e7d4      	b.n	8002e5e <_strtoul_l.constprop.0+0x76>
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	425b      	negs	r3, r3
 8002eb8:	e7e0      	b.n	8002e7c <_strtoul_l.constprop.0+0x94>
 8002eba:	1c5a      	adds	r2, r3, #1
 8002ebc:	d107      	bne.n	8002ece <_strtoul_l.constprop.0+0xe6>
 8002ebe:	2222      	movs	r2, #34	@ 0x22
 8002ec0:	9903      	ldr	r1, [sp, #12]
 8002ec2:	0018      	movs	r0, r3
 8002ec4:	600a      	str	r2, [r1, #0]
 8002ec6:	2f00      	cmp	r7, #0
 8002ec8:	d109      	bne.n	8002ede <_strtoul_l.constprop.0+0xf6>
 8002eca:	b005      	add	sp, #20
 8002ecc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ece:	9a02      	ldr	r2, [sp, #8]
 8002ed0:	2a00      	cmp	r2, #0
 8002ed2:	d000      	beq.n	8002ed6 <_strtoul_l.constprop.0+0xee>
 8002ed4:	4240      	negs	r0, r0
 8002ed6:	2f00      	cmp	r7, #0
 8002ed8:	d0f7      	beq.n	8002eca <_strtoul_l.constprop.0+0xe2>
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d001      	beq.n	8002ee2 <_strtoul_l.constprop.0+0xfa>
 8002ede:	1e63      	subs	r3, r4, #1
 8002ee0:	9300      	str	r3, [sp, #0]
 8002ee2:	9b00      	ldr	r3, [sp, #0]
 8002ee4:	603b      	str	r3, [r7, #0]
 8002ee6:	e7f0      	b.n	8002eca <_strtoul_l.constprop.0+0xe2>
 8002ee8:	08003005 	.word	0x08003005

08002eec <_strtoul_r>:
 8002eec:	b510      	push	{r4, lr}
 8002eee:	f7ff ff7b 	bl	8002de8 <_strtoul_l.constprop.0>
 8002ef2:	bd10      	pop	{r4, pc}

08002ef4 <_malloc_usable_size_r>:
 8002ef4:	1f0b      	subs	r3, r1, #4
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	1f18      	subs	r0, r3, #4
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	da01      	bge.n	8002f02 <_malloc_usable_size_r+0xe>
 8002efe:	580b      	ldr	r3, [r1, r0]
 8002f00:	18c0      	adds	r0, r0, r3
 8002f02:	4770      	bx	lr

08002f04 <_init>:
 8002f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f06:	46c0      	nop			@ (mov r8, r8)
 8002f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f0a:	bc08      	pop	{r3}
 8002f0c:	469e      	mov	lr, r3
 8002f0e:	4770      	bx	lr

08002f10 <_fini>:
 8002f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f12:	46c0      	nop			@ (mov r8, r8)
 8002f14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f16:	bc08      	pop	{r3}
 8002f18:	469e      	mov	lr, r3
 8002f1a:	4770      	bx	lr
